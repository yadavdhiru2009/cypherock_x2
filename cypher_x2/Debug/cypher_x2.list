
cypher_x2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000069f4  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000830  08006c94  08006c94  00007c94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  080074c4  080074c4  000084c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .fini_array   00000004  080074c8  080074c8  000084c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .data         0000001c  24000000  080074cc  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000040b4  2400001c  080074e8  0000901c  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  240040d0  080074e8  000090d0  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  0000901c  2**0
                  CONTENTS, READONLY
  9 .debug_info   00014733  00000000  00000000  0000904a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 0000303a  00000000  00000000  0001d77d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00001140  00000000  00000000  000207b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_macro  00037a57  00000000  00000000  000218f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_line   00016c06  00000000  00000000  0005934f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_str    0015cd80  00000000  00000000  0006ff55  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .comment      00000043  00000000  00000000  001cccd5  2**0
                  CONTENTS, READONLY
 16 .debug_rnglists 00000d17  00000000  00000000  001ccd18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_frame  00004618  00000000  00000000  001cda30  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line_str 00000065  00000000  00000000  001d2048  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	2400001c 	.word	0x2400001c
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08006c7c 	.word	0x08006c7c

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000020 	.word	0x24000020
 80002dc:	08006c7c 	.word	0x08006c7c

080002e0 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80002e0:	b480      	push	{r7}
 80002e2:	b085      	sub	sp, #20
 80002e4:	af00      	add	r7, sp, #0
 80002e6:	60f8      	str	r0, [r7, #12]
 80002e8:	60b9      	str	r1, [r7, #8]
 80002ea:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80002ec:	68fb      	ldr	r3, [r7, #12]
 80002ee:	4a07      	ldr	r2, [pc, #28]	@ (800030c <vApplicationGetIdleTaskMemory+0x2c>)
 80002f0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80002f2:	68bb      	ldr	r3, [r7, #8]
 80002f4:	4a06      	ldr	r2, [pc, #24]	@ (8000310 <vApplicationGetIdleTaskMemory+0x30>)
 80002f6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80002f8:	687b      	ldr	r3, [r7, #4]
 80002fa:	2280      	movs	r2, #128	@ 0x80
 80002fc:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80002fe:	bf00      	nop
 8000300:	3714      	adds	r7, #20
 8000302:	46bd      	mov	sp, r7
 8000304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000308:	4770      	bx	lr
 800030a:	bf00      	nop
 800030c:	24000038 	.word	0x24000038
 8000310:	2400008c 	.word	0x2400008c

08000314 <DAL_SPI_ILI9341_Select>:



#include "ili9341.h"

static void DAL_SPI_ILI9341_Select() {
 8000314:	b580      	push	{r7, lr}
 8000316:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ILI9341_CS_GPIO_Port, ILI9341_CS_Pin, GPIO_PIN_RESET);
 8000318:	2200      	movs	r2, #0
 800031a:	2102      	movs	r1, #2
 800031c:	4802      	ldr	r0, [pc, #8]	@ (8000328 <DAL_SPI_ILI9341_Select+0x14>)
 800031e:	f001 fbf7 	bl	8001b10 <HAL_GPIO_WritePin>
}
 8000322:	bf00      	nop
 8000324:	bd80      	pop	{r7, pc}
 8000326:	bf00      	nop
 8000328:	58020400 	.word	0x58020400

0800032c <DAL_SPI_ILI9341_Unselect>:

void  DAL_SPI_ILI9341_Unselect() {
 800032c:	b580      	push	{r7, lr}
 800032e:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ILI9341_CS_GPIO_Port, ILI9341_CS_Pin, GPIO_PIN_SET);
 8000330:	2201      	movs	r2, #1
 8000332:	2102      	movs	r1, #2
 8000334:	4802      	ldr	r0, [pc, #8]	@ (8000340 <DAL_SPI_ILI9341_Unselect+0x14>)
 8000336:	f001 fbeb 	bl	8001b10 <HAL_GPIO_WritePin>
}
 800033a:	bf00      	nop
 800033c:	bd80      	pop	{r7, pc}
 800033e:	bf00      	nop
 8000340:	58020400 	.word	0x58020400

08000344 <DAL_SPI_ILI9341_Reset>:

static void DAL_SPI_ILI9341_Reset() {
 8000344:	b580      	push	{r7, lr}
 8000346:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ILI9341_RES_GPIO_Port, ILI9341_RES_Pin, GPIO_PIN_RESET);
 8000348:	2200      	movs	r2, #0
 800034a:	2104      	movs	r1, #4
 800034c:	4806      	ldr	r0, [pc, #24]	@ (8000368 <DAL_SPI_ILI9341_Reset+0x24>)
 800034e:	f001 fbdf 	bl	8001b10 <HAL_GPIO_WritePin>
    HAL_Delay(5);
 8000352:	2005      	movs	r0, #5
 8000354:	f001 f8a0 	bl	8001498 <HAL_Delay>
    HAL_GPIO_WritePin(ILI9341_RES_GPIO_Port, ILI9341_RES_Pin, GPIO_PIN_SET);
 8000358:	2201      	movs	r2, #1
 800035a:	2104      	movs	r1, #4
 800035c:	4802      	ldr	r0, [pc, #8]	@ (8000368 <DAL_SPI_ILI9341_Reset+0x24>)
 800035e:	f001 fbd7 	bl	8001b10 <HAL_GPIO_WritePin>
}
 8000362:	bf00      	nop
 8000364:	bd80      	pop	{r7, pc}
 8000366:	bf00      	nop
 8000368:	58020400 	.word	0x58020400

0800036c <DAL_SPI_ILI9341_WriteCommand>:

static void DAL_SPI_ILI9341_WriteCommand(SPI_HandleTypeDef *hspi1, uint8_t cmd) {
 800036c:	b580      	push	{r7, lr}
 800036e:	b082      	sub	sp, #8
 8000370:	af00      	add	r7, sp, #0
 8000372:	6078      	str	r0, [r7, #4]
 8000374:	460b      	mov	r3, r1
 8000376:	70fb      	strb	r3, [r7, #3]
    HAL_GPIO_WritePin(ILI9341_DC_GPIO_Port, ILI9341_DC_Pin, GPIO_PIN_RESET);
 8000378:	2200      	movs	r2, #0
 800037a:	2101      	movs	r1, #1
 800037c:	4806      	ldr	r0, [pc, #24]	@ (8000398 <DAL_SPI_ILI9341_WriteCommand+0x2c>)
 800037e:	f001 fbc7 	bl	8001b10 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(hspi1, &cmd, sizeof(cmd), HAL_MAX_DELAY);
 8000382:	1cf9      	adds	r1, r7, #3
 8000384:	f04f 33ff 	mov.w	r3, #4294967295
 8000388:	2201      	movs	r2, #1
 800038a:	6878      	ldr	r0, [r7, #4]
 800038c:	f004 fe54 	bl	8005038 <HAL_SPI_Transmit>

}
 8000390:	bf00      	nop
 8000392:	3708      	adds	r7, #8
 8000394:	46bd      	mov	sp, r7
 8000396:	bd80      	pop	{r7, pc}
 8000398:	58020400 	.word	0x58020400

0800039c <DAL_SPI_ILI9341_WriteData>:

static void DAL_SPI_ILI9341_WriteData(SPI_HandleTypeDef *hspi1, uint8_t* buff, size_t buff_size) {
 800039c:	b580      	push	{r7, lr}
 800039e:	b086      	sub	sp, #24
 80003a0:	af00      	add	r7, sp, #0
 80003a2:	60f8      	str	r0, [r7, #12]
 80003a4:	60b9      	str	r1, [r7, #8]
 80003a6:	607a      	str	r2, [r7, #4]
    HAL_GPIO_WritePin(ILI9341_DC_GPIO_Port, ILI9341_DC_Pin, GPIO_PIN_SET);
 80003a8:	2201      	movs	r2, #1
 80003aa:	2101      	movs	r1, #1
 80003ac:	4810      	ldr	r0, [pc, #64]	@ (80003f0 <DAL_SPI_ILI9341_WriteData+0x54>)
 80003ae:	f001 fbaf 	bl	8001b10 <HAL_GPIO_WritePin>

    // split data in small chunks because HAL can't send more then 64K at once
    while(buff_size > 0) {
 80003b2:	e015      	b.n	80003e0 <DAL_SPI_ILI9341_WriteData+0x44>
        uint16_t chunk_size = buff_size > 32768 ? 32768 : buff_size;
 80003b4:	687b      	ldr	r3, [r7, #4]
 80003b6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80003ba:	bf28      	it	cs
 80003bc:	f44f 4300 	movcs.w	r3, #32768	@ 0x8000
 80003c0:	82fb      	strh	r3, [r7, #22]
        HAL_SPI_Transmit(hspi1, buff, chunk_size, HAL_MAX_DELAY);
 80003c2:	8afa      	ldrh	r2, [r7, #22]
 80003c4:	f04f 33ff 	mov.w	r3, #4294967295
 80003c8:	68b9      	ldr	r1, [r7, #8]
 80003ca:	68f8      	ldr	r0, [r7, #12]
 80003cc:	f004 fe34 	bl	8005038 <HAL_SPI_Transmit>

        buff += chunk_size;
 80003d0:	8afb      	ldrh	r3, [r7, #22]
 80003d2:	68ba      	ldr	r2, [r7, #8]
 80003d4:	4413      	add	r3, r2
 80003d6:	60bb      	str	r3, [r7, #8]
        buff_size -= chunk_size;
 80003d8:	8afb      	ldrh	r3, [r7, #22]
 80003da:	687a      	ldr	r2, [r7, #4]
 80003dc:	1ad3      	subs	r3, r2, r3
 80003de:	607b      	str	r3, [r7, #4]
    while(buff_size > 0) {
 80003e0:	687b      	ldr	r3, [r7, #4]
 80003e2:	2b00      	cmp	r3, #0
 80003e4:	d1e6      	bne.n	80003b4 <DAL_SPI_ILI9341_WriteData+0x18>
    }
}
 80003e6:	bf00      	nop
 80003e8:	bf00      	nop
 80003ea:	3718      	adds	r7, #24
 80003ec:	46bd      	mov	sp, r7
 80003ee:	bd80      	pop	{r7, pc}
 80003f0:	58020400 	.word	0x58020400

080003f4 <DAL_SPI_ILI9341_SetAddressWindow>:


static void DAL_SPI_ILI9341_SetAddressWindow(SPI_HandleTypeDef *hspi1, uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1) {
 80003f4:	b580      	push	{r7, lr}
 80003f6:	b086      	sub	sp, #24
 80003f8:	af00      	add	r7, sp, #0
 80003fa:	60f8      	str	r0, [r7, #12]
 80003fc:	4608      	mov	r0, r1
 80003fe:	4611      	mov	r1, r2
 8000400:	461a      	mov	r2, r3
 8000402:	4603      	mov	r3, r0
 8000404:	817b      	strh	r3, [r7, #10]
 8000406:	460b      	mov	r3, r1
 8000408:	813b      	strh	r3, [r7, #8]
 800040a:	4613      	mov	r3, r2
 800040c:	80fb      	strh	r3, [r7, #6]
    // column address set
	DAL_SPI_ILI9341_WriteCommand(hspi1, 0x2A); // CASET
 800040e:	212a      	movs	r1, #42	@ 0x2a
 8000410:	68f8      	ldr	r0, [r7, #12]
 8000412:	f7ff ffab 	bl	800036c <DAL_SPI_ILI9341_WriteCommand>

	uint8_t data1[] = { (x0 >> 8) & 0xFF, x0 & 0xFF, (x1 >> 8) & 0xFF, x1 & 0xFF };
 8000416:	897b      	ldrh	r3, [r7, #10]
 8000418:	0a1b      	lsrs	r3, r3, #8
 800041a:	b29b      	uxth	r3, r3
 800041c:	b2db      	uxtb	r3, r3
 800041e:	753b      	strb	r3, [r7, #20]
 8000420:	897b      	ldrh	r3, [r7, #10]
 8000422:	b2db      	uxtb	r3, r3
 8000424:	757b      	strb	r3, [r7, #21]
 8000426:	88fb      	ldrh	r3, [r7, #6]
 8000428:	0a1b      	lsrs	r3, r3, #8
 800042a:	b29b      	uxth	r3, r3
 800042c:	b2db      	uxtb	r3, r3
 800042e:	75bb      	strb	r3, [r7, #22]
 8000430:	88fb      	ldrh	r3, [r7, #6]
 8000432:	b2db      	uxtb	r3, r3
 8000434:	75fb      	strb	r3, [r7, #23]
	DAL_SPI_ILI9341_WriteData(hspi1, data1, sizeof(data1));
 8000436:	f107 0314 	add.w	r3, r7, #20
 800043a:	2204      	movs	r2, #4
 800043c:	4619      	mov	r1, r3
 800043e:	68f8      	ldr	r0, [r7, #12]
 8000440:	f7ff ffac 	bl	800039c <DAL_SPI_ILI9341_WriteData>


    // row address set
    DAL_SPI_ILI9341_WriteCommand(hspi1, 0x2B); // RASET
 8000444:	212b      	movs	r1, #43	@ 0x2b
 8000446:	68f8      	ldr	r0, [r7, #12]
 8000448:	f7ff ff90 	bl	800036c <DAL_SPI_ILI9341_WriteCommand>

	uint8_t data2[] = { (y0 >> 8) & 0xFF, y0 & 0xFF, (y1 >> 8) & 0xFF, y1 & 0xFF };
 800044c:	893b      	ldrh	r3, [r7, #8]
 800044e:	0a1b      	lsrs	r3, r3, #8
 8000450:	b29b      	uxth	r3, r3
 8000452:	b2db      	uxtb	r3, r3
 8000454:	743b      	strb	r3, [r7, #16]
 8000456:	893b      	ldrh	r3, [r7, #8]
 8000458:	b2db      	uxtb	r3, r3
 800045a:	747b      	strb	r3, [r7, #17]
 800045c:	8c3b      	ldrh	r3, [r7, #32]
 800045e:	0a1b      	lsrs	r3, r3, #8
 8000460:	b29b      	uxth	r3, r3
 8000462:	b2db      	uxtb	r3, r3
 8000464:	74bb      	strb	r3, [r7, #18]
 8000466:	8c3b      	ldrh	r3, [r7, #32]
 8000468:	b2db      	uxtb	r3, r3
 800046a:	74fb      	strb	r3, [r7, #19]
	DAL_SPI_ILI9341_WriteData(hspi1, data2, sizeof(data2));
 800046c:	f107 0310 	add.w	r3, r7, #16
 8000470:	2204      	movs	r2, #4
 8000472:	4619      	mov	r1, r3
 8000474:	68f8      	ldr	r0, [r7, #12]
 8000476:	f7ff ff91 	bl	800039c <DAL_SPI_ILI9341_WriteData>


    // write to RAM
    DAL_SPI_ILI9341_WriteCommand(hspi1, 0x2C); // RAMWR
 800047a:	212c      	movs	r1, #44	@ 0x2c
 800047c:	68f8      	ldr	r0, [r7, #12]
 800047e:	f7ff ff75 	bl	800036c <DAL_SPI_ILI9341_WriteCommand>
}
 8000482:	bf00      	nop
 8000484:	3718      	adds	r7, #24
 8000486:	46bd      	mov	sp, r7
 8000488:	bd80      	pop	{r7, pc}

0800048a <DAL_SPI_ILI9341_WriteChar>:


static void DAL_SPI_ILI9341_WriteChar(SPI_HandleTypeDef *hspi1, uint16_t x, uint16_t y, char ch, FontDef font, uint16_t color, uint16_t bgcolor) {
 800048a:	b580      	push	{r7, lr}
 800048c:	b08c      	sub	sp, #48	@ 0x30
 800048e:	af02      	add	r7, sp, #8
 8000490:	60f8      	str	r0, [r7, #12]
 8000492:	4608      	mov	r0, r1
 8000494:	4611      	mov	r1, r2
 8000496:	461a      	mov	r2, r3
 8000498:	4603      	mov	r3, r0
 800049a:	817b      	strh	r3, [r7, #10]
 800049c:	460b      	mov	r3, r1
 800049e:	813b      	strh	r3, [r7, #8]
 80004a0:	4613      	mov	r3, r2
 80004a2:	71fb      	strb	r3, [r7, #7]
    uint32_t i, b, j;

    DAL_SPI_ILI9341_SetAddressWindow(hspi1, x, y, x+font.width-1, y+font.height-1);
 80004a4:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 80004a8:	461a      	mov	r2, r3
 80004aa:	897b      	ldrh	r3, [r7, #10]
 80004ac:	4413      	add	r3, r2
 80004ae:	b29b      	uxth	r3, r3
 80004b0:	3b01      	subs	r3, #1
 80004b2:	b298      	uxth	r0, r3
 80004b4:	f897 3031 	ldrb.w	r3, [r7, #49]	@ 0x31
 80004b8:	461a      	mov	r2, r3
 80004ba:	893b      	ldrh	r3, [r7, #8]
 80004bc:	4413      	add	r3, r2
 80004be:	b29b      	uxth	r3, r3
 80004c0:	3b01      	subs	r3, #1
 80004c2:	b29b      	uxth	r3, r3
 80004c4:	893a      	ldrh	r2, [r7, #8]
 80004c6:	8979      	ldrh	r1, [r7, #10]
 80004c8:	9300      	str	r3, [sp, #0]
 80004ca:	4603      	mov	r3, r0
 80004cc:	68f8      	ldr	r0, [r7, #12]
 80004ce:	f7ff ff91 	bl	80003f4 <DAL_SPI_ILI9341_SetAddressWindow>

    for(i = 0; i < font.height; i++) {
 80004d2:	2300      	movs	r3, #0
 80004d4:	627b      	str	r3, [r7, #36]	@ 0x24
 80004d6:	e043      	b.n	8000560 <DAL_SPI_ILI9341_WriteChar+0xd6>
        b = font.data[(ch - 32) * font.height + i];
 80004d8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80004da:	79fb      	ldrb	r3, [r7, #7]
 80004dc:	3b20      	subs	r3, #32
 80004de:	f897 1031 	ldrb.w	r1, [r7, #49]	@ 0x31
 80004e2:	fb01 f303 	mul.w	r3, r1, r3
 80004e6:	4619      	mov	r1, r3
 80004e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80004ea:	440b      	add	r3, r1
 80004ec:	005b      	lsls	r3, r3, #1
 80004ee:	4413      	add	r3, r2
 80004f0:	881b      	ldrh	r3, [r3, #0]
 80004f2:	61fb      	str	r3, [r7, #28]
        for(j = 0; j < font.width; j++) {
 80004f4:	2300      	movs	r3, #0
 80004f6:	623b      	str	r3, [r7, #32]
 80004f8:	e029      	b.n	800054e <DAL_SPI_ILI9341_WriteChar+0xc4>
            if((b << j) & 0x8000)  {
 80004fa:	69fa      	ldr	r2, [r7, #28]
 80004fc:	6a3b      	ldr	r3, [r7, #32]
 80004fe:	fa02 f303 	lsl.w	r3, r2, r3
 8000502:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000506:	2b00      	cmp	r3, #0
 8000508:	d00f      	beq.n	800052a <DAL_SPI_ILI9341_WriteChar+0xa0>
                uint8_t data[] = { color >> 8, color & 0xFF };
 800050a:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 800050c:	0a1b      	lsrs	r3, r3, #8
 800050e:	b29b      	uxth	r3, r3
 8000510:	b2db      	uxtb	r3, r3
 8000512:	763b      	strb	r3, [r7, #24]
 8000514:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8000516:	b2db      	uxtb	r3, r3
 8000518:	767b      	strb	r3, [r7, #25]
                DAL_SPI_ILI9341_WriteData(hspi1, data, sizeof(data));
 800051a:	f107 0318 	add.w	r3, r7, #24
 800051e:	2202      	movs	r2, #2
 8000520:	4619      	mov	r1, r3
 8000522:	68f8      	ldr	r0, [r7, #12]
 8000524:	f7ff ff3a 	bl	800039c <DAL_SPI_ILI9341_WriteData>
 8000528:	e00e      	b.n	8000548 <DAL_SPI_ILI9341_WriteChar+0xbe>
            } else {
                uint8_t data[] = { bgcolor >> 8, bgcolor & 0xFF };
 800052a:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800052c:	0a1b      	lsrs	r3, r3, #8
 800052e:	b29b      	uxth	r3, r3
 8000530:	b2db      	uxtb	r3, r3
 8000532:	753b      	strb	r3, [r7, #20]
 8000534:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8000536:	b2db      	uxtb	r3, r3
 8000538:	757b      	strb	r3, [r7, #21]
                DAL_SPI_ILI9341_WriteData(hspi1, data, sizeof(data));
 800053a:	f107 0314 	add.w	r3, r7, #20
 800053e:	2202      	movs	r2, #2
 8000540:	4619      	mov	r1, r3
 8000542:	68f8      	ldr	r0, [r7, #12]
 8000544:	f7ff ff2a 	bl	800039c <DAL_SPI_ILI9341_WriteData>
        for(j = 0; j < font.width; j++) {
 8000548:	6a3b      	ldr	r3, [r7, #32]
 800054a:	3301      	adds	r3, #1
 800054c:	623b      	str	r3, [r7, #32]
 800054e:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8000552:	461a      	mov	r2, r3
 8000554:	6a3b      	ldr	r3, [r7, #32]
 8000556:	4293      	cmp	r3, r2
 8000558:	d3cf      	bcc.n	80004fa <DAL_SPI_ILI9341_WriteChar+0x70>
    for(i = 0; i < font.height; i++) {
 800055a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800055c:	3301      	adds	r3, #1
 800055e:	627b      	str	r3, [r7, #36]	@ 0x24
 8000560:	f897 3031 	ldrb.w	r3, [r7, #49]	@ 0x31
 8000564:	461a      	mov	r2, r3
 8000566:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000568:	4293      	cmp	r3, r2
 800056a:	d3b5      	bcc.n	80004d8 <DAL_SPI_ILI9341_WriteChar+0x4e>
            }
        }
    }
}
 800056c:	bf00      	nop
 800056e:	bf00      	nop
 8000570:	3728      	adds	r7, #40	@ 0x28
 8000572:	46bd      	mov	sp, r7
 8000574:	bd80      	pop	{r7, pc}

08000576 <DAL_SPI_ILI9341_WriteString>:

void DAL_SPI_ILI9341_WriteString(SPI_HandleTypeDef *hspi1, uint16_t x, uint16_t y, const char* str, FontDef font, uint16_t color, uint16_t bgcolor) {
 8000576:	b5b0      	push	{r4, r5, r7, lr}
 8000578:	b088      	sub	sp, #32
 800057a:	af04      	add	r7, sp, #16
 800057c:	60f8      	str	r0, [r7, #12]
 800057e:	607b      	str	r3, [r7, #4]
 8000580:	460b      	mov	r3, r1
 8000582:	817b      	strh	r3, [r7, #10]
 8000584:	4613      	mov	r3, r2
 8000586:	813b      	strh	r3, [r7, #8]
	DAL_SPI_ILI9341_Select();
 8000588:	f7ff fec4 	bl	8000314 <DAL_SPI_ILI9341_Select>

    while(*str) {
 800058c:	e038      	b.n	8000600 <DAL_SPI_ILI9341_WriteString+0x8a>
        if(x + font.width >= ILI9341_WIDTH) {
 800058e:	897b      	ldrh	r3, [r7, #10]
 8000590:	f897 2020 	ldrb.w	r2, [r7, #32]
 8000594:	4413      	add	r3, r2
 8000596:	2bef      	cmp	r3, #239	@ 0xef
 8000598:	dd16      	ble.n	80005c8 <DAL_SPI_ILI9341_WriteString+0x52>
            x = 0;
 800059a:	2300      	movs	r3, #0
 800059c:	817b      	strh	r3, [r7, #10]
            y += font.height;
 800059e:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80005a2:	461a      	mov	r2, r3
 80005a4:	893b      	ldrh	r3, [r7, #8]
 80005a6:	4413      	add	r3, r2
 80005a8:	813b      	strh	r3, [r7, #8]
            if(y + font.height >= ILI9341_HEIGHT) {
 80005aa:	893b      	ldrh	r3, [r7, #8]
 80005ac:	f897 2021 	ldrb.w	r2, [r7, #33]	@ 0x21
 80005b0:	4413      	add	r3, r2
 80005b2:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 80005b6:	da28      	bge.n	800060a <DAL_SPI_ILI9341_WriteString+0x94>
                break;
            }

            if(*str == ' ') {
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	781b      	ldrb	r3, [r3, #0]
 80005bc:	2b20      	cmp	r3, #32
 80005be:	d103      	bne.n	80005c8 <DAL_SPI_ILI9341_WriteString+0x52>
                // skip spaces in the beginning of the new line
                str++;
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	3301      	adds	r3, #1
 80005c4:	607b      	str	r3, [r7, #4]
                continue;
 80005c6:	e01b      	b.n	8000600 <DAL_SPI_ILI9341_WriteString+0x8a>
            }
        }

        DAL_SPI_ILI9341_WriteChar(hspi1, x, y, *str, font, color, bgcolor);
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	781d      	ldrb	r5, [r3, #0]
 80005cc:	893a      	ldrh	r2, [r7, #8]
 80005ce:	897c      	ldrh	r4, [r7, #10]
 80005d0:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 80005d2:	9303      	str	r3, [sp, #12]
 80005d4:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80005d6:	9302      	str	r3, [sp, #8]
 80005d8:	466b      	mov	r3, sp
 80005da:	f107 0120 	add.w	r1, r7, #32
 80005de:	c903      	ldmia	r1, {r0, r1}
 80005e0:	e883 0003 	stmia.w	r3, {r0, r1}
 80005e4:	462b      	mov	r3, r5
 80005e6:	4621      	mov	r1, r4
 80005e8:	68f8      	ldr	r0, [r7, #12]
 80005ea:	f7ff ff4e 	bl	800048a <DAL_SPI_ILI9341_WriteChar>
        x += font.width;
 80005ee:	f897 3020 	ldrb.w	r3, [r7, #32]
 80005f2:	461a      	mov	r2, r3
 80005f4:	897b      	ldrh	r3, [r7, #10]
 80005f6:	4413      	add	r3, r2
 80005f8:	817b      	strh	r3, [r7, #10]
        str++;
 80005fa:	687b      	ldr	r3, [r7, #4]
 80005fc:	3301      	adds	r3, #1
 80005fe:	607b      	str	r3, [r7, #4]
    while(*str) {
 8000600:	687b      	ldr	r3, [r7, #4]
 8000602:	781b      	ldrb	r3, [r3, #0]
 8000604:	2b00      	cmp	r3, #0
 8000606:	d1c2      	bne.n	800058e <DAL_SPI_ILI9341_WriteString+0x18>
 8000608:	e000      	b.n	800060c <DAL_SPI_ILI9341_WriteString+0x96>
                break;
 800060a:	bf00      	nop
    }

    DAL_SPI_ILI9341_Unselect();
 800060c:	f7ff fe8e 	bl	800032c <DAL_SPI_ILI9341_Unselect>
}
 8000610:	bf00      	nop
 8000612:	3710      	adds	r7, #16
 8000614:	46bd      	mov	sp, r7
 8000616:	bdb0      	pop	{r4, r5, r7, pc}

08000618 <DAL_SPI_ILI9341_FillRectangle>:

void DAL_SPI_ILI9341_FillRectangle(SPI_HandleTypeDef *hspi1, uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color) {
 8000618:	b580      	push	{r7, lr}
 800061a:	b088      	sub	sp, #32
 800061c:	af02      	add	r7, sp, #8
 800061e:	60f8      	str	r0, [r7, #12]
 8000620:	4608      	mov	r0, r1
 8000622:	4611      	mov	r1, r2
 8000624:	461a      	mov	r2, r3
 8000626:	4603      	mov	r3, r0
 8000628:	817b      	strh	r3, [r7, #10]
 800062a:	460b      	mov	r3, r1
 800062c:	813b      	strh	r3, [r7, #8]
 800062e:	4613      	mov	r3, r2
 8000630:	80fb      	strh	r3, [r7, #6]
    // clipping
    if((x >= ILI9341_WIDTH) || (y >= ILI9341_HEIGHT)) return;
 8000632:	897b      	ldrh	r3, [r7, #10]
 8000634:	2bef      	cmp	r3, #239	@ 0xef
 8000636:	d855      	bhi.n	80006e4 <DAL_SPI_ILI9341_FillRectangle+0xcc>
 8000638:	893b      	ldrh	r3, [r7, #8]
 800063a:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 800063e:	d251      	bcs.n	80006e4 <DAL_SPI_ILI9341_FillRectangle+0xcc>
    if((x + w - 1) >= ILI9341_WIDTH) w = ILI9341_WIDTH - x;
 8000640:	897a      	ldrh	r2, [r7, #10]
 8000642:	88fb      	ldrh	r3, [r7, #6]
 8000644:	4413      	add	r3, r2
 8000646:	2bf0      	cmp	r3, #240	@ 0xf0
 8000648:	dd03      	ble.n	8000652 <DAL_SPI_ILI9341_FillRectangle+0x3a>
 800064a:	897b      	ldrh	r3, [r7, #10]
 800064c:	f1c3 03f0 	rsb	r3, r3, #240	@ 0xf0
 8000650:	80fb      	strh	r3, [r7, #6]
    if((y + h - 1) >= ILI9341_HEIGHT) h = ILI9341_HEIGHT - y;
 8000652:	893a      	ldrh	r2, [r7, #8]
 8000654:	8c3b      	ldrh	r3, [r7, #32]
 8000656:	4413      	add	r3, r2
 8000658:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 800065c:	dd03      	ble.n	8000666 <DAL_SPI_ILI9341_FillRectangle+0x4e>
 800065e:	893b      	ldrh	r3, [r7, #8]
 8000660:	f5c3 73a0 	rsb	r3, r3, #320	@ 0x140
 8000664:	843b      	strh	r3, [r7, #32]

    DAL_SPI_ILI9341_Select();
 8000666:	f7ff fe55 	bl	8000314 <DAL_SPI_ILI9341_Select>
    DAL_SPI_ILI9341_SetAddressWindow(hspi1, x, y, x+w-1, y+h-1);
 800066a:	897a      	ldrh	r2, [r7, #10]
 800066c:	88fb      	ldrh	r3, [r7, #6]
 800066e:	4413      	add	r3, r2
 8000670:	b29b      	uxth	r3, r3
 8000672:	3b01      	subs	r3, #1
 8000674:	b298      	uxth	r0, r3
 8000676:	893a      	ldrh	r2, [r7, #8]
 8000678:	8c3b      	ldrh	r3, [r7, #32]
 800067a:	4413      	add	r3, r2
 800067c:	b29b      	uxth	r3, r3
 800067e:	3b01      	subs	r3, #1
 8000680:	b29b      	uxth	r3, r3
 8000682:	893a      	ldrh	r2, [r7, #8]
 8000684:	8979      	ldrh	r1, [r7, #10]
 8000686:	9300      	str	r3, [sp, #0]
 8000688:	4603      	mov	r3, r0
 800068a:	68f8      	ldr	r0, [r7, #12]
 800068c:	f7ff feb2 	bl	80003f4 <DAL_SPI_ILI9341_SetAddressWindow>

    uint8_t data[] = { color >> 8, color & 0xFF };
 8000690:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8000692:	0a1b      	lsrs	r3, r3, #8
 8000694:	b29b      	uxth	r3, r3
 8000696:	b2db      	uxtb	r3, r3
 8000698:	753b      	strb	r3, [r7, #20]
 800069a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800069c:	b2db      	uxtb	r3, r3
 800069e:	757b      	strb	r3, [r7, #21]
    HAL_GPIO_WritePin(ILI9341_DC_GPIO_Port, ILI9341_DC_Pin, GPIO_PIN_SET);
 80006a0:	2201      	movs	r2, #1
 80006a2:	2101      	movs	r1, #1
 80006a4:	4811      	ldr	r0, [pc, #68]	@ (80006ec <DAL_SPI_ILI9341_FillRectangle+0xd4>)
 80006a6:	f001 fa33 	bl	8001b10 <HAL_GPIO_WritePin>
    for(y = h; y > 0; y--) {
 80006aa:	8c3b      	ldrh	r3, [r7, #32]
 80006ac:	813b      	strh	r3, [r7, #8]
 80006ae:	e013      	b.n	80006d8 <DAL_SPI_ILI9341_FillRectangle+0xc0>
        for(x = w; x > 0; x--) {
 80006b0:	88fb      	ldrh	r3, [r7, #6]
 80006b2:	817b      	strh	r3, [r7, #10]
 80006b4:	e00a      	b.n	80006cc <DAL_SPI_ILI9341_FillRectangle+0xb4>
            HAL_SPI_Transmit(hspi1, data, sizeof(data), HAL_MAX_DELAY);
 80006b6:	f107 0114 	add.w	r1, r7, #20
 80006ba:	f04f 33ff 	mov.w	r3, #4294967295
 80006be:	2202      	movs	r2, #2
 80006c0:	68f8      	ldr	r0, [r7, #12]
 80006c2:	f004 fcb9 	bl	8005038 <HAL_SPI_Transmit>
        for(x = w; x > 0; x--) {
 80006c6:	897b      	ldrh	r3, [r7, #10]
 80006c8:	3b01      	subs	r3, #1
 80006ca:	817b      	strh	r3, [r7, #10]
 80006cc:	897b      	ldrh	r3, [r7, #10]
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	d1f1      	bne.n	80006b6 <DAL_SPI_ILI9341_FillRectangle+0x9e>
    for(y = h; y > 0; y--) {
 80006d2:	893b      	ldrh	r3, [r7, #8]
 80006d4:	3b01      	subs	r3, #1
 80006d6:	813b      	strh	r3, [r7, #8]
 80006d8:	893b      	ldrh	r3, [r7, #8]
 80006da:	2b00      	cmp	r3, #0
 80006dc:	d1e8      	bne.n	80006b0 <DAL_SPI_ILI9341_FillRectangle+0x98>

        }
    }

    DAL_SPI_ILI9341_Unselect();
 80006de:	f7ff fe25 	bl	800032c <DAL_SPI_ILI9341_Unselect>
 80006e2:	e000      	b.n	80006e6 <DAL_SPI_ILI9341_FillRectangle+0xce>
    if((x >= ILI9341_WIDTH) || (y >= ILI9341_HEIGHT)) return;
 80006e4:	bf00      	nop
}
 80006e6:	3718      	adds	r7, #24
 80006e8:	46bd      	mov	sp, r7
 80006ea:	bd80      	pop	{r7, pc}
 80006ec:	58020400 	.word	0x58020400

080006f0 <DAL_SPI_ILI9341_FillScreen>:

void DAL_SPI_ILI9341_FillScreen(SPI_HandleTypeDef *hspi1, uint16_t color) {
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b084      	sub	sp, #16
 80006f4:	af02      	add	r7, sp, #8
 80006f6:	6078      	str	r0, [r7, #4]
 80006f8:	460b      	mov	r3, r1
 80006fa:	807b      	strh	r3, [r7, #2]
	DAL_SPI_ILI9341_FillRectangle(hspi1, 0, 0, ILI9341_WIDTH, ILI9341_HEIGHT, color);
 80006fc:	887b      	ldrh	r3, [r7, #2]
 80006fe:	9301      	str	r3, [sp, #4]
 8000700:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 8000704:	9300      	str	r3, [sp, #0]
 8000706:	23f0      	movs	r3, #240	@ 0xf0
 8000708:	2200      	movs	r2, #0
 800070a:	2100      	movs	r1, #0
 800070c:	6878      	ldr	r0, [r7, #4]
 800070e:	f7ff ff83 	bl	8000618 <DAL_SPI_ILI9341_FillRectangle>
}
 8000712:	bf00      	nop
 8000714:	3708      	adds	r7, #8
 8000716:	46bd      	mov	sp, r7
 8000718:	bd80      	pop	{r7, pc}
	...

0800071c <DAL_SPI_ILI9341_init>:
//}
//


HAL_StatusTypeDef DAL_SPI_ILI9341_init(SPI_HandleTypeDef *hspi1)
{
 800071c:	b590      	push	{r4, r7, lr}
 800071e:	b09d      	sub	sp, #116	@ 0x74
 8000720:	af00      	add	r7, sp, #0
 8000722:	6078      	str	r0, [r7, #4]
    DAL_SPI_ILI9341_Select();
 8000724:	f7ff fdf6 	bl	8000314 <DAL_SPI_ILI9341_Select>
    DAL_SPI_ILI9341_Reset();
 8000728:	f7ff fe0c 	bl	8000344 <DAL_SPI_ILI9341_Reset>

    // SOFTWARE RESET
    DAL_SPI_ILI9341_WriteCommand(hspi1, 0x01);
 800072c:	2101      	movs	r1, #1
 800072e:	6878      	ldr	r0, [r7, #4]
 8000730:	f7ff fe1c 	bl	800036c <DAL_SPI_ILI9341_WriteCommand>
    HAL_Delay(1000);
 8000734:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000738:	f000 feae 	bl	8001498 <HAL_Delay>

     // POWER CONTROL A
    DAL_SPI_ILI9341_WriteCommand(hspi1, 0xCB);
 800073c:	21cb      	movs	r1, #203	@ 0xcb
 800073e:	6878      	ldr	r0, [r7, #4]
 8000740:	f7ff fe14 	bl	800036c <DAL_SPI_ILI9341_WriteCommand>

    uint8_t data1[] = { 0x39, 0x2C, 0x00, 0x34, 0x02 };
 8000744:	4a9c      	ldr	r2, [pc, #624]	@ (80009b8 <DAL_SPI_ILI9341_init+0x29c>)
 8000746:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 800074a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800074e:	6018      	str	r0, [r3, #0]
 8000750:	3304      	adds	r3, #4
 8000752:	7019      	strb	r1, [r3, #0]
    DAL_SPI_ILI9341_WriteData(hspi1, data1, sizeof(data1));
 8000754:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8000758:	2205      	movs	r2, #5
 800075a:	4619      	mov	r1, r3
 800075c:	6878      	ldr	r0, [r7, #4]
 800075e:	f7ff fe1d 	bl	800039c <DAL_SPI_ILI9341_WriteData>

     // POWER CONTROL B
    DAL_SPI_ILI9341_WriteCommand(hspi1, 0xCF);
 8000762:	21cf      	movs	r1, #207	@ 0xcf
 8000764:	6878      	ldr	r0, [r7, #4]
 8000766:	f7ff fe01 	bl	800036c <DAL_SPI_ILI9341_WriteCommand>

    uint8_t data2[] = { 0x00, 0xC1, 0x30 };
 800076a:	4a94      	ldr	r2, [pc, #592]	@ (80009bc <DAL_SPI_ILI9341_init+0x2a0>)
 800076c:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000770:	6812      	ldr	r2, [r2, #0]
 8000772:	4611      	mov	r1, r2
 8000774:	8019      	strh	r1, [r3, #0]
 8000776:	3302      	adds	r3, #2
 8000778:	0c12      	lsrs	r2, r2, #16
 800077a:	701a      	strb	r2, [r3, #0]
    DAL_SPI_ILI9341_WriteData(hspi1, data2, sizeof(data2));
 800077c:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000780:	2203      	movs	r2, #3
 8000782:	4619      	mov	r1, r3
 8000784:	6878      	ldr	r0, [r7, #4]
 8000786:	f7ff fe09 	bl	800039c <DAL_SPI_ILI9341_WriteData>

     // DRIVER TIMING CONTROL A
    DAL_SPI_ILI9341_WriteCommand(hspi1,0xE8);
 800078a:	21e8      	movs	r1, #232	@ 0xe8
 800078c:	6878      	ldr	r0, [r7, #4]
 800078e:	f7ff fded 	bl	800036c <DAL_SPI_ILI9341_WriteCommand>
    uint8_t data3[] = { 0x85, 0x00, 0x78 };
 8000792:	4a8b      	ldr	r2, [pc, #556]	@ (80009c0 <DAL_SPI_ILI9341_init+0x2a4>)
 8000794:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8000798:	6812      	ldr	r2, [r2, #0]
 800079a:	4611      	mov	r1, r2
 800079c:	8019      	strh	r1, [r3, #0]
 800079e:	3302      	adds	r3, #2
 80007a0:	0c12      	lsrs	r2, r2, #16
 80007a2:	701a      	strb	r2, [r3, #0]
    DAL_SPI_ILI9341_WriteData(hspi1,data3, sizeof(data3));
 80007a4:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 80007a8:	2203      	movs	r2, #3
 80007aa:	4619      	mov	r1, r3
 80007ac:	6878      	ldr	r0, [r7, #4]
 80007ae:	f7ff fdf5 	bl	800039c <DAL_SPI_ILI9341_WriteData>

     // DRIVER TIMING CONTROL B
     DAL_SPI_ILI9341_WriteCommand(hspi1,0xEA);
 80007b2:	21ea      	movs	r1, #234	@ 0xea
 80007b4:	6878      	ldr	r0, [r7, #4]
 80007b6:	f7ff fdd9 	bl	800036c <DAL_SPI_ILI9341_WriteCommand>

	 uint8_t data4[] = { 0x00, 0x00 };
 80007ba:	2300      	movs	r3, #0
 80007bc:	f8a7 305c 	strh.w	r3, [r7, #92]	@ 0x5c
	 DAL_SPI_ILI9341_WriteData(hspi1,data4, sizeof(data4));
 80007c0:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80007c4:	2202      	movs	r2, #2
 80007c6:	4619      	mov	r1, r3
 80007c8:	6878      	ldr	r0, [r7, #4]
 80007ca:	f7ff fde7 	bl	800039c <DAL_SPI_ILI9341_WriteData>


     // POWER ON SEQUENCE CONTROL
     DAL_SPI_ILI9341_WriteCommand(hspi1,0xED);
 80007ce:	21ed      	movs	r1, #237	@ 0xed
 80007d0:	6878      	ldr	r0, [r7, #4]
 80007d2:	f7ff fdcb 	bl	800036c <DAL_SPI_ILI9341_WriteCommand>

	 uint8_t data5[] = { 0x64, 0x03, 0x12, 0x81 };
 80007d6:	4b7b      	ldr	r3, [pc, #492]	@ (80009c4 <DAL_SPI_ILI9341_init+0x2a8>)
 80007d8:	65bb      	str	r3, [r7, #88]	@ 0x58
	 DAL_SPI_ILI9341_WriteData(hspi1,data5, sizeof(data5));
 80007da:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80007de:	2204      	movs	r2, #4
 80007e0:	4619      	mov	r1, r3
 80007e2:	6878      	ldr	r0, [r7, #4]
 80007e4:	f7ff fdda 	bl	800039c <DAL_SPI_ILI9341_WriteData>


     // PUMP RATIO CONTROL
     DAL_SPI_ILI9341_WriteCommand(hspi1,0xF7);
 80007e8:	21f7      	movs	r1, #247	@ 0xf7
 80007ea:	6878      	ldr	r0, [r7, #4]
 80007ec:	f7ff fdbe 	bl	800036c <DAL_SPI_ILI9341_WriteCommand>

	 uint8_t data6[] = { 0x20 };
 80007f0:	2320      	movs	r3, #32
 80007f2:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
	 DAL_SPI_ILI9341_WriteData(hspi1,data6, sizeof(data6));
 80007f6:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80007fa:	2201      	movs	r2, #1
 80007fc:	4619      	mov	r1, r3
 80007fe:	6878      	ldr	r0, [r7, #4]
 8000800:	f7ff fdcc 	bl	800039c <DAL_SPI_ILI9341_WriteData>


     // POWER CONTROL,VRH[5:0]
     DAL_SPI_ILI9341_WriteCommand(hspi1,0xC0);
 8000804:	21c0      	movs	r1, #192	@ 0xc0
 8000806:	6878      	ldr	r0, [r7, #4]
 8000808:	f7ff fdb0 	bl	800036c <DAL_SPI_ILI9341_WriteCommand>

	 uint8_t data7[] = { 0x23 };
 800080c:	2323      	movs	r3, #35	@ 0x23
 800080e:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
	 DAL_SPI_ILI9341_WriteData(hspi1,data7, sizeof(data7));
 8000812:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8000816:	2201      	movs	r2, #1
 8000818:	4619      	mov	r1, r3
 800081a:	6878      	ldr	r0, [r7, #4]
 800081c:	f7ff fdbe 	bl	800039c <DAL_SPI_ILI9341_WriteData>


     // POWER CONTROL,SAP[2:0];BT[3:0]
     DAL_SPI_ILI9341_WriteCommand(hspi1,0xC1);
 8000820:	21c1      	movs	r1, #193	@ 0xc1
 8000822:	6878      	ldr	r0, [r7, #4]
 8000824:	f7ff fda2 	bl	800036c <DAL_SPI_ILI9341_WriteCommand>

	 uint8_t data8[] = { 0x10 };
 8000828:	2310      	movs	r3, #16
 800082a:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
	 DAL_SPI_ILI9341_WriteData(hspi1,data8, sizeof(data8));
 800082e:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8000832:	2201      	movs	r2, #1
 8000834:	4619      	mov	r1, r3
 8000836:	6878      	ldr	r0, [r7, #4]
 8000838:	f7ff fdb0 	bl	800039c <DAL_SPI_ILI9341_WriteData>


     // VCM CONTROL
     DAL_SPI_ILI9341_WriteCommand(hspi1,0xC5);
 800083c:	21c5      	movs	r1, #197	@ 0xc5
 800083e:	6878      	ldr	r0, [r7, #4]
 8000840:	f7ff fd94 	bl	800036c <DAL_SPI_ILI9341_WriteCommand>

	 uint8_t data9[] = { 0x3E, 0x28 };
 8000844:	f642 033e 	movw	r3, #10302	@ 0x283e
 8000848:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
	 DAL_SPI_ILI9341_WriteData(hspi1,data9, sizeof(data9));
 800084c:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8000850:	2202      	movs	r2, #2
 8000852:	4619      	mov	r1, r3
 8000854:	6878      	ldr	r0, [r7, #4]
 8000856:	f7ff fda1 	bl	800039c <DAL_SPI_ILI9341_WriteData>


     // VCM CONTROL 2
     DAL_SPI_ILI9341_WriteCommand(hspi1,0xC7);
 800085a:	21c7      	movs	r1, #199	@ 0xc7
 800085c:	6878      	ldr	r0, [r7, #4]
 800085e:	f7ff fd85 	bl	800036c <DAL_SPI_ILI9341_WriteCommand>

	 uint8_t data10[] = { 0x86 };
 8000862:	2386      	movs	r3, #134	@ 0x86
 8000864:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
	 DAL_SPI_ILI9341_WriteData(hspi1,data10, sizeof(data10));
 8000868:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 800086c:	2201      	movs	r2, #1
 800086e:	4619      	mov	r1, r3
 8000870:	6878      	ldr	r0, [r7, #4]
 8000872:	f7ff fd93 	bl	800039c <DAL_SPI_ILI9341_WriteData>


     // MEMORY ACCESS CONTROL
     DAL_SPI_ILI9341_WriteCommand(hspi1,0x36);
 8000876:	2136      	movs	r1, #54	@ 0x36
 8000878:	6878      	ldr	r0, [r7, #4]
 800087a:	f7ff fd77 	bl	800036c <DAL_SPI_ILI9341_WriteCommand>

	 uint8_t data11[] = { 0x48 };
 800087e:	2348      	movs	r3, #72	@ 0x48
 8000880:	f887 3040 	strb.w	r3, [r7, #64]	@ 0x40
	 DAL_SPI_ILI9341_WriteData(hspi1,data11, sizeof(data11));
 8000884:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000888:	2201      	movs	r2, #1
 800088a:	4619      	mov	r1, r3
 800088c:	6878      	ldr	r0, [r7, #4]
 800088e:	f7ff fd85 	bl	800039c <DAL_SPI_ILI9341_WriteData>


     // PIXEL FORMAT
     DAL_SPI_ILI9341_WriteCommand(hspi1,0x3A);
 8000892:	213a      	movs	r1, #58	@ 0x3a
 8000894:	6878      	ldr	r0, [r7, #4]
 8000896:	f7ff fd69 	bl	800036c <DAL_SPI_ILI9341_WriteCommand>

	 uint8_t data12[] = { 0x55 };
 800089a:	2355      	movs	r3, #85	@ 0x55
 800089c:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
	 DAL_SPI_ILI9341_WriteData(hspi1,data12, sizeof(data12));
 80008a0:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80008a4:	2201      	movs	r2, #1
 80008a6:	4619      	mov	r1, r3
 80008a8:	6878      	ldr	r0, [r7, #4]
 80008aa:	f7ff fd77 	bl	800039c <DAL_SPI_ILI9341_WriteData>


     // FRAME RATIO CONTROL, STANDARD RGB COLOR
     DAL_SPI_ILI9341_WriteCommand(hspi1,0xB1);
 80008ae:	21b1      	movs	r1, #177	@ 0xb1
 80008b0:	6878      	ldr	r0, [r7, #4]
 80008b2:	f7ff fd5b 	bl	800036c <DAL_SPI_ILI9341_WriteCommand>

	 uint8_t data13[] = { 0x00, 0x18 };
 80008b6:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 80008ba:	873b      	strh	r3, [r7, #56]	@ 0x38
	 DAL_SPI_ILI9341_WriteData(hspi1,data13, sizeof(data13));
 80008bc:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80008c0:	2202      	movs	r2, #2
 80008c2:	4619      	mov	r1, r3
 80008c4:	6878      	ldr	r0, [r7, #4]
 80008c6:	f7ff fd69 	bl	800039c <DAL_SPI_ILI9341_WriteData>


     // DISPLAY FUNCTION CONTROL
     DAL_SPI_ILI9341_WriteCommand(hspi1,0xB6);
 80008ca:	21b6      	movs	r1, #182	@ 0xb6
 80008cc:	6878      	ldr	r0, [r7, #4]
 80008ce:	f7ff fd4d 	bl	800036c <DAL_SPI_ILI9341_WriteCommand>

	 uint8_t data14[] = { 0x08, 0x82, 0x27 };
 80008d2:	4a3d      	ldr	r2, [pc, #244]	@ (80009c8 <DAL_SPI_ILI9341_init+0x2ac>)
 80008d4:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80008d8:	6812      	ldr	r2, [r2, #0]
 80008da:	4611      	mov	r1, r2
 80008dc:	8019      	strh	r1, [r3, #0]
 80008de:	3302      	adds	r3, #2
 80008e0:	0c12      	lsrs	r2, r2, #16
 80008e2:	701a      	strb	r2, [r3, #0]
	 DAL_SPI_ILI9341_WriteData(hspi1,data14, sizeof(data14));
 80008e4:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80008e8:	2203      	movs	r2, #3
 80008ea:	4619      	mov	r1, r3
 80008ec:	6878      	ldr	r0, [r7, #4]
 80008ee:	f7ff fd55 	bl	800039c <DAL_SPI_ILI9341_WriteData>


     // 3GAMMA FUNCTION DISABLE
     DAL_SPI_ILI9341_WriteCommand(hspi1,0xF2);
 80008f2:	21f2      	movs	r1, #242	@ 0xf2
 80008f4:	6878      	ldr	r0, [r7, #4]
 80008f6:	f7ff fd39 	bl	800036c <DAL_SPI_ILI9341_WriteCommand>

	 uint8_t data15[] = { 0x00 };
 80008fa:	2300      	movs	r3, #0
 80008fc:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
	 DAL_SPI_ILI9341_WriteData(hspi1,data15, sizeof(data15));
 8000900:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000904:	2201      	movs	r2, #1
 8000906:	4619      	mov	r1, r3
 8000908:	6878      	ldr	r0, [r7, #4]
 800090a:	f7ff fd47 	bl	800039c <DAL_SPI_ILI9341_WriteData>


     // GAMMA CURVE SELECTED
     DAL_SPI_ILI9341_WriteCommand(hspi1,0x26);
 800090e:	2126      	movs	r1, #38	@ 0x26
 8000910:	6878      	ldr	r0, [r7, #4]
 8000912:	f7ff fd2b 	bl	800036c <DAL_SPI_ILI9341_WriteCommand>

	 uint8_t data16[] = { 0x01 };
 8000916:	2301      	movs	r3, #1
 8000918:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
	 DAL_SPI_ILI9341_WriteData(hspi1,data16, sizeof(data16));
 800091c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000920:	2201      	movs	r2, #1
 8000922:	4619      	mov	r1, r3
 8000924:	6878      	ldr	r0, [r7, #4]
 8000926:	f7ff fd39 	bl	800039c <DAL_SPI_ILI9341_WriteData>


     // POSITIVE GAMMA CORRECTION
     DAL_SPI_ILI9341_WriteCommand(hspi1,0xE0);
 800092a:	21e0      	movs	r1, #224	@ 0xe0
 800092c:	6878      	ldr	r0, [r7, #4]
 800092e:	f7ff fd1d 	bl	800036c <DAL_SPI_ILI9341_WriteCommand>

	 uint8_t data17[] = { 0x0F, 0x31, 0x2B, 0x0C, 0x0E, 0x08, 0x4E, 0xF1,0x37, 0x07, 0x10, 0x03, 0x0E, 0x09, 0x00 };
 8000932:	4b26      	ldr	r3, [pc, #152]	@ (80009cc <DAL_SPI_ILI9341_init+0x2b0>)
 8000934:	f107 041c 	add.w	r4, r7, #28
 8000938:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800093a:	c407      	stmia	r4!, {r0, r1, r2}
 800093c:	8023      	strh	r3, [r4, #0]
 800093e:	3402      	adds	r4, #2
 8000940:	0c1b      	lsrs	r3, r3, #16
 8000942:	7023      	strb	r3, [r4, #0]
	 DAL_SPI_ILI9341_WriteData(hspi1,data17, sizeof(data17));
 8000944:	f107 031c 	add.w	r3, r7, #28
 8000948:	220f      	movs	r2, #15
 800094a:	4619      	mov	r1, r3
 800094c:	6878      	ldr	r0, [r7, #4]
 800094e:	f7ff fd25 	bl	800039c <DAL_SPI_ILI9341_WriteData>


     // NEGATIVE GAMMA CORRECTION
     DAL_SPI_ILI9341_WriteCommand(hspi1,0xE1);
 8000952:	21e1      	movs	r1, #225	@ 0xe1
 8000954:	6878      	ldr	r0, [r7, #4]
 8000956:	f7ff fd09 	bl	800036c <DAL_SPI_ILI9341_WriteCommand>

	 uint8_t data18[] = { 0x00, 0x0E, 0x14, 0x03, 0x11, 0x07, 0x31, 0xC1,0x48, 0x08, 0x0F, 0x0C, 0x31, 0x36, 0x0F };
 800095a:	4b1d      	ldr	r3, [pc, #116]	@ (80009d0 <DAL_SPI_ILI9341_init+0x2b4>)
 800095c:	f107 040c 	add.w	r4, r7, #12
 8000960:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000962:	c407      	stmia	r4!, {r0, r1, r2}
 8000964:	8023      	strh	r3, [r4, #0]
 8000966:	3402      	adds	r4, #2
 8000968:	0c1b      	lsrs	r3, r3, #16
 800096a:	7023      	strb	r3, [r4, #0]
	 DAL_SPI_ILI9341_WriteData(hspi1,data18, sizeof(data18));
 800096c:	f107 030c 	add.w	r3, r7, #12
 8000970:	220f      	movs	r2, #15
 8000972:	4619      	mov	r1, r3
 8000974:	6878      	ldr	r0, [r7, #4]
 8000976:	f7ff fd11 	bl	800039c <DAL_SPI_ILI9341_WriteData>


     // EXIT SLEEP
     DAL_SPI_ILI9341_WriteCommand(hspi1,0x11);
 800097a:	2111      	movs	r1, #17
 800097c:	6878      	ldr	r0, [r7, #4]
 800097e:	f7ff fcf5 	bl	800036c <DAL_SPI_ILI9341_WriteCommand>
     HAL_Delay(120);
 8000982:	2078      	movs	r0, #120	@ 0x78
 8000984:	f000 fd88 	bl	8001498 <HAL_Delay>

     // TURN ON DISPLAY
     DAL_SPI_ILI9341_WriteCommand(hspi1,0x29);
 8000988:	2129      	movs	r1, #41	@ 0x29
 800098a:	6878      	ldr	r0, [r7, #4]
 800098c:	f7ff fcee 	bl	800036c <DAL_SPI_ILI9341_WriteCommand>

     // MADCTL
     DAL_SPI_ILI9341_WriteCommand(hspi1,0x36);
 8000990:	2136      	movs	r1, #54	@ 0x36
 8000992:	6878      	ldr	r0, [r7, #4]
 8000994:	f7ff fcea 	bl	800036c <DAL_SPI_ILI9341_WriteCommand>
	 uint8_t data19[] = { ILI9341_ROTATION };
 8000998:	2348      	movs	r3, #72	@ 0x48
 800099a:	723b      	strb	r3, [r7, #8]
	 DAL_SPI_ILI9341_WriteData(hspi1,data19, sizeof(data19));
 800099c:	f107 0308 	add.w	r3, r7, #8
 80009a0:	2201      	movs	r2, #1
 80009a2:	4619      	mov	r1, r3
 80009a4:	6878      	ldr	r0, [r7, #4]
 80009a6:	f7ff fcf9 	bl	800039c <DAL_SPI_ILI9341_WriteData>


     DAL_SPI_ILI9341_Unselect();
 80009aa:	f7ff fcbf 	bl	800032c <DAL_SPI_ILI9341_Unselect>

     return HAL_OK;
 80009ae:	2300      	movs	r3, #0
}
 80009b0:	4618      	mov	r0, r3
 80009b2:	3774      	adds	r7, #116	@ 0x74
 80009b4:	46bd      	mov	sp, r7
 80009b6:	bd90      	pop	{r4, r7, pc}
 80009b8:	08006c94 	.word	0x08006c94
 80009bc:	08006c9c 	.word	0x08006c9c
 80009c0:	08006ca0 	.word	0x08006ca0
 80009c4:	81120364 	.word	0x81120364
 80009c8:	08006ca4 	.word	0x08006ca4
 80009cc:	08006ca8 	.word	0x08006ca8
 80009d0:	08006cb8 	.word	0x08006cb8

080009d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009d4:	b5b0      	push	{r4, r5, r7, lr}
 80009d6:	b08e      	sub	sp, #56	@ 0x38
 80009d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 80009da:	f000 fa29 	bl	8000e30 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009de:	f000 fcc9 	bl	8001374 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009e2:	f000 f837 	bl	8000a54 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009e6:	f000 f947 	bl	8000c78 <MX_GPIO_Init>
  MX_I2C1_Init();
 80009ea:	f000 f8af 	bl	8000b4c <MX_I2C1_Init>
  MX_SPI1_Init();
 80009ee:	f000 f8ed 	bl	8000bcc <MX_SPI1_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of TouchTask */
  osThreadDef(TouchTask, StartTouchTask, osPriorityNormal, 0, 512);
 80009f2:	4b14      	ldr	r3, [pc, #80]	@ (8000a44 <main+0x70>)
 80009f4:	f107 041c 	add.w	r4, r7, #28
 80009f8:	461d      	mov	r5, r3
 80009fa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80009fc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80009fe:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000a02:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  TouchTaskHandle = osThreadCreate(osThread(TouchTask), NULL);
 8000a06:	f107 031c 	add.w	r3, r7, #28
 8000a0a:	2100      	movs	r1, #0
 8000a0c:	4618      	mov	r0, r3
 8000a0e:	f004 fe09 	bl	8005624 <osThreadCreate>
 8000a12:	4603      	mov	r3, r0
 8000a14:	4a0c      	ldr	r2, [pc, #48]	@ (8000a48 <main+0x74>)
 8000a16:	6013      	str	r3, [r2, #0]

  /* definition and creation of TFTTask */
  osThreadDef(TFTTask, StartTFTTask, osPriorityIdle, 0, 512);
 8000a18:	4b0c      	ldr	r3, [pc, #48]	@ (8000a4c <main+0x78>)
 8000a1a:	463c      	mov	r4, r7
 8000a1c:	461d      	mov	r5, r3
 8000a1e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a20:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a22:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000a26:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  TFTTaskHandle = osThreadCreate(osThread(TFTTask), NULL);
 8000a2a:	463b      	mov	r3, r7
 8000a2c:	2100      	movs	r1, #0
 8000a2e:	4618      	mov	r0, r3
 8000a30:	f004 fdf8 	bl	8005624 <osThreadCreate>
 8000a34:	4603      	mov	r3, r0
 8000a36:	4a06      	ldr	r2, [pc, #24]	@ (8000a50 <main+0x7c>)
 8000a38:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000a3a:	f004 fdec 	bl	8005616 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000a3e:	bf00      	nop
 8000a40:	e7fd      	b.n	8000a3e <main+0x6a>
 8000a42:	bf00      	nop
 8000a44:	08006cd4 	.word	0x08006cd4
 8000a48:	24000370 	.word	0x24000370
 8000a4c:	08006cf8 	.word	0x08006cf8
 8000a50:	24000374 	.word	0x24000374

08000a54 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b09c      	sub	sp, #112	@ 0x70
 8000a58:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a5a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a5e:	224c      	movs	r2, #76	@ 0x4c
 8000a60:	2100      	movs	r1, #0
 8000a62:	4618      	mov	r0, r3
 8000a64:	f006 f8de 	bl	8006c24 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a68:	1d3b      	adds	r3, r7, #4
 8000a6a:	2220      	movs	r2, #32
 8000a6c:	2100      	movs	r1, #0
 8000a6e:	4618      	mov	r0, r3
 8000a70:	f006 f8d8 	bl	8006c24 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000a74:	2002      	movs	r0, #2
 8000a76:	f001 fe89 	bl	800278c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	603b      	str	r3, [r7, #0]
 8000a7e:	4b31      	ldr	r3, [pc, #196]	@ (8000b44 <SystemClock_Config+0xf0>)
 8000a80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000a82:	4a30      	ldr	r2, [pc, #192]	@ (8000b44 <SystemClock_Config+0xf0>)
 8000a84:	f023 0301 	bic.w	r3, r3, #1
 8000a88:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8000a8a:	4b2e      	ldr	r3, [pc, #184]	@ (8000b44 <SystemClock_Config+0xf0>)
 8000a8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000a8e:	f003 0301 	and.w	r3, r3, #1
 8000a92:	603b      	str	r3, [r7, #0]
 8000a94:	4b2c      	ldr	r3, [pc, #176]	@ (8000b48 <SystemClock_Config+0xf4>)
 8000a96:	699b      	ldr	r3, [r3, #24]
 8000a98:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000a9c:	4a2a      	ldr	r2, [pc, #168]	@ (8000b48 <SystemClock_Config+0xf4>)
 8000a9e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000aa2:	6193      	str	r3, [r2, #24]
 8000aa4:	4b28      	ldr	r3, [pc, #160]	@ (8000b48 <SystemClock_Config+0xf4>)
 8000aa6:	699b      	ldr	r3, [r3, #24]
 8000aa8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000aac:	603b      	str	r3, [r7, #0]
 8000aae:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000ab0:	bf00      	nop
 8000ab2:	4b25      	ldr	r3, [pc, #148]	@ (8000b48 <SystemClock_Config+0xf4>)
 8000ab4:	699b      	ldr	r3, [r3, #24]
 8000ab6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000aba:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000abe:	d1f8      	bne.n	8000ab2 <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000ac0:	2302      	movs	r3, #2
 8000ac2:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000ac4:	2301      	movs	r3, #1
 8000ac6:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ac8:	2340      	movs	r3, #64	@ 0x40
 8000aca:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000acc:	2302      	movs	r3, #2
 8000ace:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000ad4:	2304      	movs	r3, #4
 8000ad6:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000ad8:	230a      	movs	r3, #10
 8000ada:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000adc:	2302      	movs	r3, #2
 8000ade:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000ae0:	2302      	movs	r3, #2
 8000ae2:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000ae4:	2302      	movs	r3, #2
 8000ae6:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000ae8:	230c      	movs	r3, #12
 8000aea:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOMEDIUM;
 8000aec:	2302      	movs	r3, #2
 8000aee:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000af0:	2300      	movs	r3, #0
 8000af2:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000af4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000af8:	4618      	mov	r0, r3
 8000afa:	f001 fe81 	bl	8002800 <HAL_RCC_OscConfig>
 8000afe:	4603      	mov	r3, r0
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	d001      	beq.n	8000b08 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000b04:	f000 f9f0 	bl	8000ee8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b08:	233f      	movs	r3, #63	@ 0x3f
 8000b0a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000b10:	2300      	movs	r3, #0
 8000b12:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000b14:	2300      	movs	r3, #0
 8000b16:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000b18:	2300      	movs	r3, #0
 8000b1a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000b1c:	2340      	movs	r3, #64	@ 0x40
 8000b1e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8000b20:	2300      	movs	r3, #0
 8000b22:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000b24:	2300      	movs	r3, #0
 8000b26:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000b28:	1d3b      	adds	r3, r7, #4
 8000b2a:	2101      	movs	r1, #1
 8000b2c:	4618      	mov	r0, r3
 8000b2e:	f002 fac1 	bl	80030b4 <HAL_RCC_ClockConfig>
 8000b32:	4603      	mov	r3, r0
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	d001      	beq.n	8000b3c <SystemClock_Config+0xe8>
  {
    Error_Handler();
 8000b38:	f000 f9d6 	bl	8000ee8 <Error_Handler>
  }
}
 8000b3c:	bf00      	nop
 8000b3e:	3770      	adds	r7, #112	@ 0x70
 8000b40:	46bd      	mov	sp, r7
 8000b42:	bd80      	pop	{r7, pc}
 8000b44:	58000400 	.word	0x58000400
 8000b48:	58024800 	.word	0x58024800

08000b4c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000b50:	4b1b      	ldr	r3, [pc, #108]	@ (8000bc0 <MX_I2C1_Init+0x74>)
 8000b52:	4a1c      	ldr	r2, [pc, #112]	@ (8000bc4 <MX_I2C1_Init+0x78>)
 8000b54:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00707CBB;
 8000b56:	4b1a      	ldr	r3, [pc, #104]	@ (8000bc0 <MX_I2C1_Init+0x74>)
 8000b58:	4a1b      	ldr	r2, [pc, #108]	@ (8000bc8 <MX_I2C1_Init+0x7c>)
 8000b5a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000b5c:	4b18      	ldr	r3, [pc, #96]	@ (8000bc0 <MX_I2C1_Init+0x74>)
 8000b5e:	2200      	movs	r2, #0
 8000b60:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000b62:	4b17      	ldr	r3, [pc, #92]	@ (8000bc0 <MX_I2C1_Init+0x74>)
 8000b64:	2201      	movs	r2, #1
 8000b66:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000b68:	4b15      	ldr	r3, [pc, #84]	@ (8000bc0 <MX_I2C1_Init+0x74>)
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000b6e:	4b14      	ldr	r3, [pc, #80]	@ (8000bc0 <MX_I2C1_Init+0x74>)
 8000b70:	2200      	movs	r2, #0
 8000b72:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000b74:	4b12      	ldr	r3, [pc, #72]	@ (8000bc0 <MX_I2C1_Init+0x74>)
 8000b76:	2200      	movs	r2, #0
 8000b78:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000b7a:	4b11      	ldr	r3, [pc, #68]	@ (8000bc0 <MX_I2C1_Init+0x74>)
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000b80:	4b0f      	ldr	r3, [pc, #60]	@ (8000bc0 <MX_I2C1_Init+0x74>)
 8000b82:	2200      	movs	r2, #0
 8000b84:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000b86:	480e      	ldr	r0, [pc, #56]	@ (8000bc0 <MX_I2C1_Init+0x74>)
 8000b88:	f000 ffdc 	bl	8001b44 <HAL_I2C_Init>
 8000b8c:	4603      	mov	r3, r0
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d001      	beq.n	8000b96 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000b92:	f000 f9a9 	bl	8000ee8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000b96:	2100      	movs	r1, #0
 8000b98:	4809      	ldr	r0, [pc, #36]	@ (8000bc0 <MX_I2C1_Init+0x74>)
 8000b9a:	f001 fd5f 	bl	800265c <HAL_I2CEx_ConfigAnalogFilter>
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d001      	beq.n	8000ba8 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000ba4:	f000 f9a0 	bl	8000ee8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000ba8:	2100      	movs	r1, #0
 8000baa:	4805      	ldr	r0, [pc, #20]	@ (8000bc0 <MX_I2C1_Init+0x74>)
 8000bac:	f001 fda1 	bl	80026f2 <HAL_I2CEx_ConfigDigitalFilter>
 8000bb0:	4603      	mov	r3, r0
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d001      	beq.n	8000bba <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000bb6:	f000 f997 	bl	8000ee8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000bba:	bf00      	nop
 8000bbc:	bd80      	pop	{r7, pc}
 8000bbe:	bf00      	nop
 8000bc0:	2400028c 	.word	0x2400028c
 8000bc4:	40005400 	.word	0x40005400
 8000bc8:	00707cbb 	.word	0x00707cbb

08000bcc <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000bd0:	4b27      	ldr	r3, [pc, #156]	@ (8000c70 <MX_SPI1_Init+0xa4>)
 8000bd2:	4a28      	ldr	r2, [pc, #160]	@ (8000c74 <MX_SPI1_Init+0xa8>)
 8000bd4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000bd6:	4b26      	ldr	r3, [pc, #152]	@ (8000c70 <MX_SPI1_Init+0xa4>)
 8000bd8:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8000bdc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000bde:	4b24      	ldr	r3, [pc, #144]	@ (8000c70 <MX_SPI1_Init+0xa4>)
 8000be0:	2200      	movs	r2, #0
 8000be2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8000be4:	4b22      	ldr	r3, [pc, #136]	@ (8000c70 <MX_SPI1_Init+0xa4>)
 8000be6:	2203      	movs	r2, #3
 8000be8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000bea:	4b21      	ldr	r3, [pc, #132]	@ (8000c70 <MX_SPI1_Init+0xa4>)
 8000bec:	2200      	movs	r2, #0
 8000bee:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000bf0:	4b1f      	ldr	r3, [pc, #124]	@ (8000c70 <MX_SPI1_Init+0xa4>)
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000bf6:	4b1e      	ldr	r3, [pc, #120]	@ (8000c70 <MX_SPI1_Init+0xa4>)
 8000bf8:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8000bfc:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000bfe:	4b1c      	ldr	r3, [pc, #112]	@ (8000c70 <MX_SPI1_Init+0xa4>)
 8000c00:	2200      	movs	r2, #0
 8000c02:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000c04:	4b1a      	ldr	r3, [pc, #104]	@ (8000c70 <MX_SPI1_Init+0xa4>)
 8000c06:	2200      	movs	r2, #0
 8000c08:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000c0a:	4b19      	ldr	r3, [pc, #100]	@ (8000c70 <MX_SPI1_Init+0xa4>)
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000c10:	4b17      	ldr	r3, [pc, #92]	@ (8000c70 <MX_SPI1_Init+0xa4>)
 8000c12:	2200      	movs	r2, #0
 8000c14:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8000c16:	4b16      	ldr	r3, [pc, #88]	@ (8000c70 <MX_SPI1_Init+0xa4>)
 8000c18:	2200      	movs	r2, #0
 8000c1a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000c1c:	4b14      	ldr	r3, [pc, #80]	@ (8000c70 <MX_SPI1_Init+0xa4>)
 8000c1e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000c22:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000c24:	4b12      	ldr	r3, [pc, #72]	@ (8000c70 <MX_SPI1_Init+0xa4>)
 8000c26:	2200      	movs	r2, #0
 8000c28:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000c2a:	4b11      	ldr	r3, [pc, #68]	@ (8000c70 <MX_SPI1_Init+0xa4>)
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000c30:	4b0f      	ldr	r3, [pc, #60]	@ (8000c70 <MX_SPI1_Init+0xa4>)
 8000c32:	2200      	movs	r2, #0
 8000c34:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000c36:	4b0e      	ldr	r3, [pc, #56]	@ (8000c70 <MX_SPI1_Init+0xa4>)
 8000c38:	2200      	movs	r2, #0
 8000c3a:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000c3c:	4b0c      	ldr	r3, [pc, #48]	@ (8000c70 <MX_SPI1_Init+0xa4>)
 8000c3e:	2200      	movs	r2, #0
 8000c40:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000c42:	4b0b      	ldr	r3, [pc, #44]	@ (8000c70 <MX_SPI1_Init+0xa4>)
 8000c44:	2200      	movs	r2, #0
 8000c46:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000c48:	4b09      	ldr	r3, [pc, #36]	@ (8000c70 <MX_SPI1_Init+0xa4>)
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000c4e:	4b08      	ldr	r3, [pc, #32]	@ (8000c70 <MX_SPI1_Init+0xa4>)
 8000c50:	2200      	movs	r2, #0
 8000c52:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000c54:	4b06      	ldr	r3, [pc, #24]	@ (8000c70 <MX_SPI1_Init+0xa4>)
 8000c56:	2200      	movs	r2, #0
 8000c58:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000c5a:	4805      	ldr	r0, [pc, #20]	@ (8000c70 <MX_SPI1_Init+0xa4>)
 8000c5c:	f004 f8c8 	bl	8004df0 <HAL_SPI_Init>
 8000c60:	4603      	mov	r3, r0
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d001      	beq.n	8000c6a <MX_SPI1_Init+0x9e>
  {
    Error_Handler();
 8000c66:	f000 f93f 	bl	8000ee8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000c6a:	bf00      	nop
 8000c6c:	bd80      	pop	{r7, pc}
 8000c6e:	bf00      	nop
 8000c70:	240002e4 	.word	0x240002e4
 8000c74:	40013000 	.word	0x40013000

08000c78 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b088      	sub	sp, #32
 8000c7c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c7e:	f107 030c 	add.w	r3, r7, #12
 8000c82:	2200      	movs	r2, #0
 8000c84:	601a      	str	r2, [r3, #0]
 8000c86:	605a      	str	r2, [r3, #4]
 8000c88:	609a      	str	r2, [r3, #8]
 8000c8a:	60da      	str	r2, [r3, #12]
 8000c8c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c8e:	4b1a      	ldr	r3, [pc, #104]	@ (8000cf8 <MX_GPIO_Init+0x80>)
 8000c90:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c94:	4a18      	ldr	r2, [pc, #96]	@ (8000cf8 <MX_GPIO_Init+0x80>)
 8000c96:	f043 0301 	orr.w	r3, r3, #1
 8000c9a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000c9e:	4b16      	ldr	r3, [pc, #88]	@ (8000cf8 <MX_GPIO_Init+0x80>)
 8000ca0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ca4:	f003 0301 	and.w	r3, r3, #1
 8000ca8:	60bb      	str	r3, [r7, #8]
 8000caa:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cac:	4b12      	ldr	r3, [pc, #72]	@ (8000cf8 <MX_GPIO_Init+0x80>)
 8000cae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000cb2:	4a11      	ldr	r2, [pc, #68]	@ (8000cf8 <MX_GPIO_Init+0x80>)
 8000cb4:	f043 0302 	orr.w	r3, r3, #2
 8000cb8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000cbc:	4b0e      	ldr	r3, [pc, #56]	@ (8000cf8 <MX_GPIO_Init+0x80>)
 8000cbe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000cc2:	f003 0302 	and.w	r3, r3, #2
 8000cc6:	607b      	str	r3, [r7, #4]
 8000cc8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2, GPIO_PIN_RESET);
 8000cca:	2200      	movs	r2, #0
 8000ccc:	2107      	movs	r1, #7
 8000cce:	480b      	ldr	r0, [pc, #44]	@ (8000cfc <MX_GPIO_Init+0x84>)
 8000cd0:	f000 ff1e 	bl	8001b10 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB0 PB1 PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8000cd4:	2307      	movs	r3, #7
 8000cd6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cd8:	2301      	movs	r3, #1
 8000cda:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cdc:	2300      	movs	r3, #0
 8000cde:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ce4:	f107 030c 	add.w	r3, r7, #12
 8000ce8:	4619      	mov	r1, r3
 8000cea:	4804      	ldr	r0, [pc, #16]	@ (8000cfc <MX_GPIO_Init+0x84>)
 8000cec:	f000 fd60 	bl	80017b0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000cf0:	bf00      	nop
 8000cf2:	3720      	adds	r7, #32
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	bd80      	pop	{r7, pc}
 8000cf8:	58024400 	.word	0x58024400
 8000cfc:	58020400 	.word	0x58020400

08000d00 <StartTouchTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartTouchTask */
void StartTouchTask(void const * argument)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b084      	sub	sp, #16
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	HAL_StatusTypeDef Hal_status = HAL_OK;
 8000d08:	2300      	movs	r3, #0
 8000d0a:	73fb      	strb	r3, [r7, #15]

	Hal_status = DAL_I2C_stmpe811_init(&hi2c1);
 8000d0c:	4811      	ldr	r0, [pc, #68]	@ (8000d54 <StartTouchTask+0x54>)
 8000d0e:	f000 fa07 	bl	8001120 <DAL_I2C_stmpe811_init>
 8000d12:	4603      	mov	r3, r0
 8000d14:	73fb      	strb	r3, [r7, #15]
	if(Hal_status == HAL_ERROR)
 8000d16:	7bfb      	ldrb	r3, [r7, #15]
 8000d18:	2b01      	cmp	r3, #1
 8000d1a:	d104      	bne.n	8000d26 <StartTouchTask+0x26>
	{
		osThreadSuspend(TouchTaskHandle);
 8000d1c:	4b0e      	ldr	r3, [pc, #56]	@ (8000d58 <StartTouchTask+0x58>)
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	4618      	mov	r0, r3
 8000d22:	f004 fcdf 	bl	80056e4 <osThreadSuspend>
	}
	/* Infinite loop */
	for(;;)
	{
		DAL_I2C_stmpe811_read(&hi2c1, &stmpe811_struct);
 8000d26:	490d      	ldr	r1, [pc, #52]	@ (8000d5c <StartTouchTask+0x5c>)
 8000d28:	480a      	ldr	r0, [pc, #40]	@ (8000d54 <StartTouchTask+0x54>)
 8000d2a:	f000 fa37 	bl	800119c <DAL_I2C_stmpe811_read>
		osDelay(1);//to create difference between
 8000d2e:	2001      	movs	r0, #1
 8000d30:	f004 fcc4 	bl	80056bc <osDelay>
		if((stmpe811_struct.x != 0) && (stmpe811_struct.y != 0))
 8000d34:	4b09      	ldr	r3, [pc, #36]	@ (8000d5c <StartTouchTask+0x5c>)
 8000d36:	881b      	ldrh	r3, [r3, #0]
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	d007      	beq.n	8000d4c <StartTouchTask+0x4c>
 8000d3c:	4b07      	ldr	r3, [pc, #28]	@ (8000d5c <StartTouchTask+0x5c>)
 8000d3e:	885b      	ldrh	r3, [r3, #2]
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d003      	beq.n	8000d4c <StartTouchTask+0x4c>
		{
			touch_flag = 1;
 8000d44:	4b06      	ldr	r3, [pc, #24]	@ (8000d60 <StartTouchTask+0x60>)
 8000d46:	2201      	movs	r2, #1
 8000d48:	701a      	strb	r2, [r3, #0]
 8000d4a:	e002      	b.n	8000d52 <StartTouchTask+0x52>
		}
		else
		{
			touch_flag = 0;
 8000d4c:	4b04      	ldr	r3, [pc, #16]	@ (8000d60 <StartTouchTask+0x60>)
 8000d4e:	2200      	movs	r2, #0
 8000d50:	701a      	strb	r2, [r3, #0]
		DAL_I2C_stmpe811_read(&hi2c1, &stmpe811_struct);
 8000d52:	e7e8      	b.n	8000d26 <StartTouchTask+0x26>
 8000d54:	2400028c 	.word	0x2400028c
 8000d58:	24000370 	.word	0x24000370
 8000d5c:	240002e0 	.word	0x240002e0
 8000d60:	2400036c 	.word	0x2400036c

08000d64 <StartTFTTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTFTTask */
void StartTFTTask(void const * argument)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b088      	sub	sp, #32
 8000d68:	af04      	add	r7, sp, #16
 8000d6a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTFTTask */
	HAL_StatusTypeDef Hal_status = HAL_OK;
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	737b      	strb	r3, [r7, #13]
	uint8_t touch_flag_prev = 0;
 8000d70:	2300      	movs	r3, #0
 8000d72:	73fb      	strb	r3, [r7, #15]
	uint8_t single_print = 0;
 8000d74:	2300      	movs	r3, #0
 8000d76:	73bb      	strb	r3, [r7, #14]

	Hal_status = DAL_SPI_ILI9341_init(&hspi1);
 8000d78:	4827      	ldr	r0, [pc, #156]	@ (8000e18 <StartTFTTask+0xb4>)
 8000d7a:	f7ff fccf 	bl	800071c <DAL_SPI_ILI9341_init>
 8000d7e:	4603      	mov	r3, r0
 8000d80:	737b      	strb	r3, [r7, #13]
	if(Hal_status == HAL_ERROR)
 8000d82:	7b7b      	ldrb	r3, [r7, #13]
 8000d84:	2b01      	cmp	r3, #1
 8000d86:	d104      	bne.n	8000d92 <StartTFTTask+0x2e>
	{
		osThreadSuspend(TFTTaskHandle);
 8000d88:	4b24      	ldr	r3, [pc, #144]	@ (8000e1c <StartTFTTask+0xb8>)
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	4618      	mov	r0, r3
 8000d8e:	f004 fca9 	bl	80056e4 <osThreadSuspend>
	}
  /* Infinite loop */
  for(;;)
  {
	  DAL_SPI_ILI9341_FillScreen(&hspi1, ILI9341_BLACK);
 8000d92:	2100      	movs	r1, #0
 8000d94:	4820      	ldr	r0, [pc, #128]	@ (8000e18 <StartTFTTask+0xb4>)
 8000d96:	f7ff fcab 	bl	80006f0 <DAL_SPI_ILI9341_FillScreen>
	  if((touch_flag == touch_flag_prev) && (single_print == 0))
 8000d9a:	4b21      	ldr	r3, [pc, #132]	@ (8000e20 <StartTFTTask+0xbc>)
 8000d9c:	781b      	ldrb	r3, [r3, #0]
 8000d9e:	7bfa      	ldrb	r2, [r7, #15]
 8000da0:	429a      	cmp	r2, r3
 8000da2:	d116      	bne.n	8000dd2 <StartTFTTask+0x6e>
 8000da4:	7bbb      	ldrb	r3, [r7, #14]
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d113      	bne.n	8000dd2 <StartTFTTask+0x6e>
	  {
		  DAL_SPI_ILI9341_WriteString(&hspi1, 0, 0,"STMPE811 Not Pressed", Font_7x10, ILI9341_RED,ILI9341_BLACK);
 8000daa:	2300      	movs	r3, #0
 8000dac:	9303      	str	r3, [sp, #12]
 8000dae:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8000db2:	9302      	str	r3, [sp, #8]
 8000db4:	4a1b      	ldr	r2, [pc, #108]	@ (8000e24 <StartTFTTask+0xc0>)
 8000db6:	466b      	mov	r3, sp
 8000db8:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000dbc:	e883 0003 	stmia.w	r3, {r0, r1}
 8000dc0:	4b19      	ldr	r3, [pc, #100]	@ (8000e28 <StartTFTTask+0xc4>)
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	2100      	movs	r1, #0
 8000dc6:	4814      	ldr	r0, [pc, #80]	@ (8000e18 <StartTFTTask+0xb4>)
 8000dc8:	f7ff fbd5 	bl	8000576 <DAL_SPI_ILI9341_WriteString>
		  single_print = 1;
 8000dcc:	2301      	movs	r3, #1
 8000dce:	73bb      	strb	r3, [r7, #14]
 8000dd0:	e020      	b.n	8000e14 <StartTFTTask+0xb0>
	  }
	  else if((touch_flag != touch_flag_prev) && (single_print == 1))
 8000dd2:	4b13      	ldr	r3, [pc, #76]	@ (8000e20 <StartTFTTask+0xbc>)
 8000dd4:	781b      	ldrb	r3, [r3, #0]
 8000dd6:	7bfa      	ldrb	r2, [r7, #15]
 8000dd8:	429a      	cmp	r2, r3
 8000dda:	d0da      	beq.n	8000d92 <StartTFTTask+0x2e>
 8000ddc:	7bbb      	ldrb	r3, [r7, #14]
 8000dde:	2b01      	cmp	r3, #1
 8000de0:	d1d7      	bne.n	8000d92 <StartTFTTask+0x2e>
	  {
		  DAL_SPI_ILI9341_WriteString(&hspi1, 0, 0,"STMPE811 Pressed", Font_7x10, ILI9341_RED,ILI9341_BLACK);
 8000de2:	2300      	movs	r3, #0
 8000de4:	9303      	str	r3, [sp, #12]
 8000de6:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8000dea:	9302      	str	r3, [sp, #8]
 8000dec:	4a0d      	ldr	r2, [pc, #52]	@ (8000e24 <StartTFTTask+0xc0>)
 8000dee:	466b      	mov	r3, sp
 8000df0:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000df4:	e883 0003 	stmia.w	r3, {r0, r1}
 8000df8:	4b0c      	ldr	r3, [pc, #48]	@ (8000e2c <StartTFTTask+0xc8>)
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	2100      	movs	r1, #0
 8000dfe:	4806      	ldr	r0, [pc, #24]	@ (8000e18 <StartTFTTask+0xb4>)
 8000e00:	f7ff fbb9 	bl	8000576 <DAL_SPI_ILI9341_WriteString>
		  touch_flag_prev = touch_flag;
 8000e04:	4b06      	ldr	r3, [pc, #24]	@ (8000e20 <StartTFTTask+0xbc>)
 8000e06:	781b      	ldrb	r3, [r3, #0]
 8000e08:	73fb      	strb	r3, [r7, #15]
		  single_print = 0;
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	73bb      	strb	r3, [r7, #14]
		  osDelay(1);
 8000e0e:	2001      	movs	r0, #1
 8000e10:	f004 fc54 	bl	80056bc <osDelay>
	  DAL_SPI_ILI9341_FillScreen(&hspi1, ILI9341_BLACK);
 8000e14:	e7bd      	b.n	8000d92 <StartTFTTask+0x2e>
 8000e16:	bf00      	nop
 8000e18:	240002e4 	.word	0x240002e4
 8000e1c:	24000374 	.word	0x24000374
 8000e20:	2400036c 	.word	0x2400036c
 8000e24:	24000000 	.word	0x24000000
 8000e28:	08006d14 	.word	0x08006d14
 8000e2c:	08006d2c 	.word	0x08006d2c

08000e30 <MPU_Config>:
}

 /* MPU Configuration */

void MPU_Config(void)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b084      	sub	sp, #16
 8000e34:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000e36:	463b      	mov	r3, r7
 8000e38:	2200      	movs	r2, #0
 8000e3a:	601a      	str	r2, [r3, #0]
 8000e3c:	605a      	str	r2, [r3, #4]
 8000e3e:	609a      	str	r2, [r3, #8]
 8000e40:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8000e42:	f000 fc3d 	bl	80016c0 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000e46:	2301      	movs	r3, #1
 8000e48:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8000e4e:	2300      	movs	r3, #0
 8000e50:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8000e52:	231f      	movs	r3, #31
 8000e54:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8000e56:	2387      	movs	r3, #135	@ 0x87
 8000e58:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8000e5e:	2300      	movs	r3, #0
 8000e60:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8000e62:	2301      	movs	r3, #1
 8000e64:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8000e66:	2301      	movs	r3, #1
 8000e68:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8000e6e:	2300      	movs	r3, #0
 8000e70:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000e72:	463b      	mov	r3, r7
 8000e74:	4618      	mov	r0, r3
 8000e76:	f000 fc5b 	bl	8001730 <HAL_MPU_ConfigRegion>

  /** Memory region for the touch data buffer (allow read/write access) **/
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000e7a:	2301      	movs	r3, #1
 8000e7c:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 8000e7e:	2301      	movs	r3, #1
 8000e80:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = (uint32_t)&stmpe811_struct;  // Base address of touch buffer
 8000e82:	4b17      	ldr	r3, [pc, #92]	@ (8000ee0 <MPU_Config+0xb0>)
 8000e84:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_32B;  // Size of touch buffer (adjust as needed)
 8000e86:	2304      	movs	r3, #4
 8000e88:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;  // Allow full access
 8000e8a:	2303      	movs	r3, #3
 8000e8c:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8000e8e:	2301      	movs	r3, #1
 8000e90:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8000e92:	2301      	movs	r3, #1
 8000e94:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
 8000e96:	2301      	movs	r3, #1
 8000e98:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
 8000e9a:	2301      	movs	r3, #1
 8000e9c:	73fb      	strb	r3, [r7, #15]
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000e9e:	463b      	mov	r3, r7
 8000ea0:	4618      	mov	r0, r3
 8000ea2:	f000 fc45 	bl	8001730 <HAL_MPU_ConfigRegion>

  /** Memory region for the tft data buffer (allow read/write access) **/
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000ea6:	2301      	movs	r3, #1
 8000ea8:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER2;
 8000eaa:	2302      	movs	r3, #2
 8000eac:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = (uint32_t)&ili9341_struct;  // Base address of tft buffer
 8000eae:	4b0d      	ldr	r3, [pc, #52]	@ (8000ee4 <MPU_Config+0xb4>)
 8000eb0:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_32B;  // Size of tft buffer (adjust as needed)
 8000eb2:	2304      	movs	r3, #4
 8000eb4:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;  // Allow full access
 8000eb6:	2303      	movs	r3, #3
 8000eb8:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8000eba:	2301      	movs	r3, #1
 8000ebc:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8000ebe:	2301      	movs	r3, #1
 8000ec0:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
 8000ec2:	2301      	movs	r3, #1
 8000ec4:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
 8000ec6:	2301      	movs	r3, #1
 8000ec8:	73fb      	strb	r3, [r7, #15]
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000eca:	463b      	mov	r3, r7
 8000ecc:	4618      	mov	r0, r3
 8000ece:	f000 fc2f 	bl	8001730 <HAL_MPU_ConfigRegion>


  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000ed2:	2004      	movs	r0, #4
 8000ed4:	f000 fc0c 	bl	80016f0 <HAL_MPU_Enable>

}
 8000ed8:	bf00      	nop
 8000eda:	3710      	adds	r7, #16
 8000edc:	46bd      	mov	sp, r7
 8000ede:	bd80      	pop	{r7, pc}
 8000ee0:	240002e0 	.word	0x240002e0
 8000ee4:	240002e4 	.word	0x240002e4

08000ee8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ee8:	b480      	push	{r7}
 8000eea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000eec:	b672      	cpsid	i
}
 8000eee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ef0:	bf00      	nop
 8000ef2:	e7fd      	b.n	8000ef0 <Error_Handler+0x8>

08000ef4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b082      	sub	sp, #8
 8000ef8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000efa:	4b0c      	ldr	r3, [pc, #48]	@ (8000f2c <HAL_MspInit+0x38>)
 8000efc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000f00:	4a0a      	ldr	r2, [pc, #40]	@ (8000f2c <HAL_MspInit+0x38>)
 8000f02:	f043 0302 	orr.w	r3, r3, #2
 8000f06:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000f0a:	4b08      	ldr	r3, [pc, #32]	@ (8000f2c <HAL_MspInit+0x38>)
 8000f0c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000f10:	f003 0302 	and.w	r3, r3, #2
 8000f14:	607b      	str	r3, [r7, #4]
 8000f16:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000f18:	2200      	movs	r2, #0
 8000f1a:	210f      	movs	r1, #15
 8000f1c:	f06f 0001 	mvn.w	r0, #1
 8000f20:	f000 fba7 	bl	8001672 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f24:	bf00      	nop
 8000f26:	3708      	adds	r7, #8
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	bd80      	pop	{r7, pc}
 8000f2c:	58024400 	.word	0x58024400

08000f30 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b0ba      	sub	sp, #232	@ 0xe8
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f38:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	601a      	str	r2, [r3, #0]
 8000f40:	605a      	str	r2, [r3, #4]
 8000f42:	609a      	str	r2, [r3, #8]
 8000f44:	60da      	str	r2, [r3, #12]
 8000f46:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000f48:	f107 0310 	add.w	r3, r7, #16
 8000f4c:	22c0      	movs	r2, #192	@ 0xc0
 8000f4e:	2100      	movs	r1, #0
 8000f50:	4618      	mov	r0, r3
 8000f52:	f005 fe67 	bl	8006c24 <memset>
  if(hi2c->Instance==I2C1)
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	4a26      	ldr	r2, [pc, #152]	@ (8000ff4 <HAL_I2C_MspInit+0xc4>)
 8000f5c:	4293      	cmp	r3, r2
 8000f5e:	d145      	bne.n	8000fec <HAL_I2C_MspInit+0xbc>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000f60:	f04f 0208 	mov.w	r2, #8
 8000f64:	f04f 0300 	mov.w	r3, #0
 8000f68:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f72:	f107 0310 	add.w	r3, r7, #16
 8000f76:	4618      	mov	r0, r3
 8000f78:	f002 fbcc 	bl	8003714 <HAL_RCCEx_PeriphCLKConfig>
 8000f7c:	4603      	mov	r3, r0
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d001      	beq.n	8000f86 <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 8000f82:	f7ff ffb1 	bl	8000ee8 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f86:	4b1c      	ldr	r3, [pc, #112]	@ (8000ff8 <HAL_I2C_MspInit+0xc8>)
 8000f88:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f8c:	4a1a      	ldr	r2, [pc, #104]	@ (8000ff8 <HAL_I2C_MspInit+0xc8>)
 8000f8e:	f043 0302 	orr.w	r3, r3, #2
 8000f92:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000f96:	4b18      	ldr	r3, [pc, #96]	@ (8000ff8 <HAL_I2C_MspInit+0xc8>)
 8000f98:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f9c:	f003 0302 	and.w	r3, r3, #2
 8000fa0:	60fb      	str	r3, [r7, #12]
 8000fa2:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000fa4:	23c0      	movs	r3, #192	@ 0xc0
 8000fa6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000faa:	2312      	movs	r3, #18
 8000fac:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000fbc:	2304      	movs	r3, #4
 8000fbe:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fc2:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000fc6:	4619      	mov	r1, r3
 8000fc8:	480c      	ldr	r0, [pc, #48]	@ (8000ffc <HAL_I2C_MspInit+0xcc>)
 8000fca:	f000 fbf1 	bl	80017b0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000fce:	4b0a      	ldr	r3, [pc, #40]	@ (8000ff8 <HAL_I2C_MspInit+0xc8>)
 8000fd0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000fd4:	4a08      	ldr	r2, [pc, #32]	@ (8000ff8 <HAL_I2C_MspInit+0xc8>)
 8000fd6:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000fda:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8000fde:	4b06      	ldr	r3, [pc, #24]	@ (8000ff8 <HAL_I2C_MspInit+0xc8>)
 8000fe0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000fe4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000fe8:	60bb      	str	r3, [r7, #8]
 8000fea:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000fec:	bf00      	nop
 8000fee:	37e8      	adds	r7, #232	@ 0xe8
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	bd80      	pop	{r7, pc}
 8000ff4:	40005400 	.word	0x40005400
 8000ff8:	58024400 	.word	0x58024400
 8000ffc:	58020400 	.word	0x58020400

08001000 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	b0ba      	sub	sp, #232	@ 0xe8
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001008:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800100c:	2200      	movs	r2, #0
 800100e:	601a      	str	r2, [r3, #0]
 8001010:	605a      	str	r2, [r3, #4]
 8001012:	609a      	str	r2, [r3, #8]
 8001014:	60da      	str	r2, [r3, #12]
 8001016:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001018:	f107 0310 	add.w	r3, r7, #16
 800101c:	22c0      	movs	r2, #192	@ 0xc0
 800101e:	2100      	movs	r1, #0
 8001020:	4618      	mov	r0, r3
 8001022:	f005 fdff 	bl	8006c24 <memset>
  if(hspi->Instance==SPI1)
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	4a26      	ldr	r2, [pc, #152]	@ (80010c4 <HAL_SPI_MspInit+0xc4>)
 800102c:	4293      	cmp	r3, r2
 800102e:	d144      	bne.n	80010ba <HAL_SPI_MspInit+0xba>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8001030:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001034:	f04f 0300 	mov.w	r3, #0
 8001038:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 800103c:	2300      	movs	r3, #0
 800103e:	673b      	str	r3, [r7, #112]	@ 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001040:	f107 0310 	add.w	r3, r7, #16
 8001044:	4618      	mov	r0, r3
 8001046:	f002 fb65 	bl	8003714 <HAL_RCCEx_PeriphCLKConfig>
 800104a:	4603      	mov	r3, r0
 800104c:	2b00      	cmp	r3, #0
 800104e:	d001      	beq.n	8001054 <HAL_SPI_MspInit+0x54>
    {
      Error_Handler();
 8001050:	f7ff ff4a 	bl	8000ee8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001054:	4b1c      	ldr	r3, [pc, #112]	@ (80010c8 <HAL_SPI_MspInit+0xc8>)
 8001056:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800105a:	4a1b      	ldr	r2, [pc, #108]	@ (80010c8 <HAL_SPI_MspInit+0xc8>)
 800105c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001060:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001064:	4b18      	ldr	r3, [pc, #96]	@ (80010c8 <HAL_SPI_MspInit+0xc8>)
 8001066:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800106a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800106e:	60fb      	str	r3, [r7, #12]
 8001070:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001072:	4b15      	ldr	r3, [pc, #84]	@ (80010c8 <HAL_SPI_MspInit+0xc8>)
 8001074:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001078:	4a13      	ldr	r2, [pc, #76]	@ (80010c8 <HAL_SPI_MspInit+0xc8>)
 800107a:	f043 0301 	orr.w	r3, r3, #1
 800107e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001082:	4b11      	ldr	r3, [pc, #68]	@ (80010c8 <HAL_SPI_MspInit+0xc8>)
 8001084:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001088:	f003 0301 	and.w	r3, r3, #1
 800108c:	60bb      	str	r3, [r7, #8]
 800108e:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001090:	23e0      	movs	r3, #224	@ 0xe0
 8001092:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001096:	2302      	movs	r3, #2
 8001098:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800109c:	2300      	movs	r3, #0
 800109e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010a2:	2300      	movs	r3, #0
 80010a4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80010a8:	2305      	movs	r3, #5
 80010aa:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010ae:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80010b2:	4619      	mov	r1, r3
 80010b4:	4805      	ldr	r0, [pc, #20]	@ (80010cc <HAL_SPI_MspInit+0xcc>)
 80010b6:	f000 fb7b 	bl	80017b0 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 80010ba:	bf00      	nop
 80010bc:	37e8      	adds	r7, #232	@ 0xe8
 80010be:	46bd      	mov	sp, r7
 80010c0:	bd80      	pop	{r7, pc}
 80010c2:	bf00      	nop
 80010c4:	40013000 	.word	0x40013000
 80010c8:	58024400 	.word	0x58024400
 80010cc:	58020000 	.word	0x58020000

080010d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010d0:	b480      	push	{r7}
 80010d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80010d4:	bf00      	nop
 80010d6:	e7fd      	b.n	80010d4 <NMI_Handler+0x4>

080010d8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010d8:	b480      	push	{r7}
 80010da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010dc:	bf00      	nop
 80010de:	e7fd      	b.n	80010dc <HardFault_Handler+0x4>

080010e0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80010e0:	b480      	push	{r7}
 80010e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80010e4:	bf00      	nop
 80010e6:	e7fd      	b.n	80010e4 <MemManage_Handler+0x4>

080010e8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80010e8:	b480      	push	{r7}
 80010ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80010ec:	bf00      	nop
 80010ee:	e7fd      	b.n	80010ec <BusFault_Handler+0x4>

080010f0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80010f0:	b480      	push	{r7}
 80010f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80010f4:	bf00      	nop
 80010f6:	e7fd      	b.n	80010f4 <UsageFault_Handler+0x4>

080010f8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80010f8:	b480      	push	{r7}
 80010fa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80010fc:	bf00      	nop
 80010fe:	46bd      	mov	sp, r7
 8001100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001104:	4770      	bx	lr

08001106 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001106:	b580      	push	{r7, lr}
 8001108:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800110a:	f000 f9a5 	bl	8001458 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 800110e:	f005 f905 	bl	800631c <xTaskGetSchedulerState>
 8001112:	4603      	mov	r3, r0
 8001114:	2b01      	cmp	r3, #1
 8001116:	d001      	beq.n	800111c <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8001118:	f005 fb46 	bl	80067a8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800111c:	bf00      	nop
 800111e:	bd80      	pop	{r7, pc}

08001120 <DAL_I2C_stmpe811_init>:
 */

#include "stmpe811.h"

HAL_StatusTypeDef DAL_I2C_stmpe811_init(I2C_HandleTypeDef *hi2c1)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b088      	sub	sp, #32
 8001124:	af04      	add	r7, sp, #16
 8001126:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef HAL_status = HAL_OK;
 8001128:	2300      	movs	r3, #0
 800112a:	73fb      	strb	r3, [r7, #15]
	uint8_t data;

	// Read Chip ID to verify communication
	HAL_I2C_Mem_Read(hi2c1, STMPE811_I2C_ADDRESS, STMPE811_CHIP_ID_REG, 1, &data, 1, HAL_MAX_DELAY);
 800112c:	f04f 33ff 	mov.w	r3, #4294967295
 8001130:	9302      	str	r3, [sp, #8]
 8001132:	2301      	movs	r3, #1
 8001134:	9301      	str	r3, [sp, #4]
 8001136:	f107 030e 	add.w	r3, r7, #14
 800113a:	9300      	str	r3, [sp, #0]
 800113c:	2301      	movs	r3, #1
 800113e:	2200      	movs	r2, #0
 8001140:	2182      	movs	r1, #130	@ 0x82
 8001142:	6878      	ldr	r0, [r7, #4]
 8001144:	f000 feae 	bl	8001ea4 <HAL_I2C_Mem_Read>
	if (data != STMPE811_DEVICE_ID) {
		// Error handling, chip ID mismatch
		HAL_status = HAL_ERROR;
 8001148:	2301      	movs	r3, #1
 800114a:	73fb      	strb	r3, [r7, #15]
	}

	// Reset the STMPE811
	data = STMPE811_DEVICE_SOFT_RESET; // Reset command
 800114c:	2302      	movs	r3, #2
 800114e:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Mem_Write(hi2c1, STMPE811_I2C_ADDRESS, STMPE811_SYS_CTRL1_REG, 1, &data, 1, HAL_MAX_DELAY);
 8001150:	f04f 33ff 	mov.w	r3, #4294967295
 8001154:	9302      	str	r3, [sp, #8]
 8001156:	2301      	movs	r3, #1
 8001158:	9301      	str	r3, [sp, #4]
 800115a:	f107 030e 	add.w	r3, r7, #14
 800115e:	9300      	str	r3, [sp, #0]
 8001160:	2301      	movs	r3, #1
 8001162:	2203      	movs	r2, #3
 8001164:	2182      	movs	r1, #130	@ 0x82
 8001166:	6878      	ldr	r0, [r7, #4]
 8001168:	f000 fd88 	bl	8001c7c <HAL_I2C_Mem_Write>

	// Wait for reset to complete
	HAL_Delay(10);
 800116c:	200a      	movs	r0, #10
 800116e:	f000 f993 	bl	8001498 <HAL_Delay>

	// Enable TSC (Touch Screen Controller)
	data = STMPE811_TSC_CTRL_EN | (STMPE811_TSC_CTRL_XY_EN<<1);
 8001172:	2303      	movs	r3, #3
 8001174:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Mem_Write(hi2c1, STMPE811_I2C_ADDRESS, STMPE811_TSC_CTRL_REG, 1, &data, 1, HAL_MAX_DELAY);
 8001176:	f04f 33ff 	mov.w	r3, #4294967295
 800117a:	9302      	str	r3, [sp, #8]
 800117c:	2301      	movs	r3, #1
 800117e:	9301      	str	r3, [sp, #4]
 8001180:	f107 030e 	add.w	r3, r7, #14
 8001184:	9300      	str	r3, [sp, #0]
 8001186:	2301      	movs	r3, #1
 8001188:	2240      	movs	r2, #64	@ 0x40
 800118a:	2182      	movs	r1, #130	@ 0x82
 800118c:	6878      	ldr	r0, [r7, #4]
 800118e:	f000 fd75 	bl	8001c7c <HAL_I2C_Mem_Write>

	return HAL_status;
 8001192:	7bfb      	ldrb	r3, [r7, #15]
}
 8001194:	4618      	mov	r0, r3
 8001196:	3710      	adds	r7, #16
 8001198:	46bd      	mov	sp, r7
 800119a:	bd80      	pop	{r7, pc}

0800119c <DAL_I2C_stmpe811_read>:
void DAL_I2C_stmpe811_read(I2C_HandleTypeDef *hi2c1, stmpe811 *stmpe811_struct)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b088      	sub	sp, #32
 80011a0:	af04      	add	r7, sp, #16
 80011a2:	6078      	str	r0, [r7, #4]
 80011a4:	6039      	str	r1, [r7, #0]
	uint8_t read_data[2];
    // Read X coordinate
    HAL_I2C_Mem_Read(hi2c1, STMPE811_I2C_ADDRESS, STMPE811_TSC_DATA_X_REG, 1, read_data, 2, HAL_MAX_DELAY);
 80011a6:	f04f 33ff 	mov.w	r3, #4294967295
 80011aa:	9302      	str	r3, [sp, #8]
 80011ac:	2302      	movs	r3, #2
 80011ae:	9301      	str	r3, [sp, #4]
 80011b0:	f107 030c 	add.w	r3, r7, #12
 80011b4:	9300      	str	r3, [sp, #0]
 80011b6:	2301      	movs	r3, #1
 80011b8:	224d      	movs	r2, #77	@ 0x4d
 80011ba:	2182      	movs	r1, #130	@ 0x82
 80011bc:	6878      	ldr	r0, [r7, #4]
 80011be:	f000 fe71 	bl	8001ea4 <HAL_I2C_Mem_Read>
    stmpe811_struct->x = (read_data[0] << 8) | read_data[1];
 80011c2:	7b3b      	ldrb	r3, [r7, #12]
 80011c4:	021b      	lsls	r3, r3, #8
 80011c6:	b21a      	sxth	r2, r3
 80011c8:	7b7b      	ldrb	r3, [r7, #13]
 80011ca:	b21b      	sxth	r3, r3
 80011cc:	4313      	orrs	r3, r2
 80011ce:	b21b      	sxth	r3, r3
 80011d0:	b29a      	uxth	r2, r3
 80011d2:	683b      	ldr	r3, [r7, #0]
 80011d4:	801a      	strh	r2, [r3, #0]

    // Read Y coordinate
    HAL_I2C_Mem_Read(hi2c1, STMPE811_I2C_ADDRESS, STMPE811_TSC_DATA_Y_REG, 1, read_data, 2, HAL_MAX_DELAY);
 80011d6:	f04f 33ff 	mov.w	r3, #4294967295
 80011da:	9302      	str	r3, [sp, #8]
 80011dc:	2302      	movs	r3, #2
 80011de:	9301      	str	r3, [sp, #4]
 80011e0:	f107 030c 	add.w	r3, r7, #12
 80011e4:	9300      	str	r3, [sp, #0]
 80011e6:	2301      	movs	r3, #1
 80011e8:	224f      	movs	r2, #79	@ 0x4f
 80011ea:	2182      	movs	r1, #130	@ 0x82
 80011ec:	6878      	ldr	r0, [r7, #4]
 80011ee:	f000 fe59 	bl	8001ea4 <HAL_I2C_Mem_Read>
    stmpe811_struct->y = (read_data[0] << 8) | read_data[1];
 80011f2:	7b3b      	ldrb	r3, [r7, #12]
 80011f4:	021b      	lsls	r3, r3, #8
 80011f6:	b21a      	sxth	r2, r3
 80011f8:	7b7b      	ldrb	r3, [r7, #13]
 80011fa:	b21b      	sxth	r3, r3
 80011fc:	4313      	orrs	r3, r2
 80011fe:	b21b      	sxth	r3, r3
 8001200:	b29a      	uxth	r2, r3
 8001202:	683b      	ldr	r3, [r7, #0]
 8001204:	805a      	strh	r2, [r3, #2]
}
 8001206:	bf00      	nop
 8001208:	3710      	adds	r7, #16
 800120a:	46bd      	mov	sp, r7
 800120c:	bd80      	pop	{r7, pc}
	...

08001210 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001210:	b480      	push	{r7}
 8001212:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001214:	4b37      	ldr	r3, [pc, #220]	@ (80012f4 <SystemInit+0xe4>)
 8001216:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800121a:	4a36      	ldr	r2, [pc, #216]	@ (80012f4 <SystemInit+0xe4>)
 800121c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001220:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001224:	4b34      	ldr	r3, [pc, #208]	@ (80012f8 <SystemInit+0xe8>)
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	f003 030f 	and.w	r3, r3, #15
 800122c:	2b06      	cmp	r3, #6
 800122e:	d807      	bhi.n	8001240 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001230:	4b31      	ldr	r3, [pc, #196]	@ (80012f8 <SystemInit+0xe8>)
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	f023 030f 	bic.w	r3, r3, #15
 8001238:	4a2f      	ldr	r2, [pc, #188]	@ (80012f8 <SystemInit+0xe8>)
 800123a:	f043 0307 	orr.w	r3, r3, #7
 800123e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001240:	4b2e      	ldr	r3, [pc, #184]	@ (80012fc <SystemInit+0xec>)
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	4a2d      	ldr	r2, [pc, #180]	@ (80012fc <SystemInit+0xec>)
 8001246:	f043 0301 	orr.w	r3, r3, #1
 800124a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800124c:	4b2b      	ldr	r3, [pc, #172]	@ (80012fc <SystemInit+0xec>)
 800124e:	2200      	movs	r2, #0
 8001250:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001252:	4b2a      	ldr	r3, [pc, #168]	@ (80012fc <SystemInit+0xec>)
 8001254:	681a      	ldr	r2, [r3, #0]
 8001256:	4929      	ldr	r1, [pc, #164]	@ (80012fc <SystemInit+0xec>)
 8001258:	4b29      	ldr	r3, [pc, #164]	@ (8001300 <SystemInit+0xf0>)
 800125a:	4013      	ands	r3, r2
 800125c:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800125e:	4b26      	ldr	r3, [pc, #152]	@ (80012f8 <SystemInit+0xe8>)
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	f003 0308 	and.w	r3, r3, #8
 8001266:	2b00      	cmp	r3, #0
 8001268:	d007      	beq.n	800127a <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800126a:	4b23      	ldr	r3, [pc, #140]	@ (80012f8 <SystemInit+0xe8>)
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	f023 030f 	bic.w	r3, r3, #15
 8001272:	4a21      	ldr	r2, [pc, #132]	@ (80012f8 <SystemInit+0xe8>)
 8001274:	f043 0307 	orr.w	r3, r3, #7
 8001278:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800127a:	4b20      	ldr	r3, [pc, #128]	@ (80012fc <SystemInit+0xec>)
 800127c:	2200      	movs	r2, #0
 800127e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001280:	4b1e      	ldr	r3, [pc, #120]	@ (80012fc <SystemInit+0xec>)
 8001282:	2200      	movs	r2, #0
 8001284:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8001286:	4b1d      	ldr	r3, [pc, #116]	@ (80012fc <SystemInit+0xec>)
 8001288:	2200      	movs	r2, #0
 800128a:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800128c:	4b1b      	ldr	r3, [pc, #108]	@ (80012fc <SystemInit+0xec>)
 800128e:	4a1d      	ldr	r2, [pc, #116]	@ (8001304 <SystemInit+0xf4>)
 8001290:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001292:	4b1a      	ldr	r3, [pc, #104]	@ (80012fc <SystemInit+0xec>)
 8001294:	4a1c      	ldr	r2, [pc, #112]	@ (8001308 <SystemInit+0xf8>)
 8001296:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001298:	4b18      	ldr	r3, [pc, #96]	@ (80012fc <SystemInit+0xec>)
 800129a:	4a1c      	ldr	r2, [pc, #112]	@ (800130c <SystemInit+0xfc>)
 800129c:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800129e:	4b17      	ldr	r3, [pc, #92]	@ (80012fc <SystemInit+0xec>)
 80012a0:	2200      	movs	r2, #0
 80012a2:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80012a4:	4b15      	ldr	r3, [pc, #84]	@ (80012fc <SystemInit+0xec>)
 80012a6:	4a19      	ldr	r2, [pc, #100]	@ (800130c <SystemInit+0xfc>)
 80012a8:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80012aa:	4b14      	ldr	r3, [pc, #80]	@ (80012fc <SystemInit+0xec>)
 80012ac:	2200      	movs	r2, #0
 80012ae:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80012b0:	4b12      	ldr	r3, [pc, #72]	@ (80012fc <SystemInit+0xec>)
 80012b2:	4a16      	ldr	r2, [pc, #88]	@ (800130c <SystemInit+0xfc>)
 80012b4:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80012b6:	4b11      	ldr	r3, [pc, #68]	@ (80012fc <SystemInit+0xec>)
 80012b8:	2200      	movs	r2, #0
 80012ba:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80012bc:	4b0f      	ldr	r3, [pc, #60]	@ (80012fc <SystemInit+0xec>)
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	4a0e      	ldr	r2, [pc, #56]	@ (80012fc <SystemInit+0xec>)
 80012c2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80012c6:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80012c8:	4b0c      	ldr	r3, [pc, #48]	@ (80012fc <SystemInit+0xec>)
 80012ca:	2200      	movs	r2, #0
 80012cc:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80012ce:	4b10      	ldr	r3, [pc, #64]	@ (8001310 <SystemInit+0x100>)
 80012d0:	681a      	ldr	r2, [r3, #0]
 80012d2:	4b10      	ldr	r3, [pc, #64]	@ (8001314 <SystemInit+0x104>)
 80012d4:	4013      	ands	r3, r2
 80012d6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80012da:	d202      	bcs.n	80012e2 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80012dc:	4b0e      	ldr	r3, [pc, #56]	@ (8001318 <SystemInit+0x108>)
 80012de:	2201      	movs	r2, #1
 80012e0:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80012e2:	4b0e      	ldr	r3, [pc, #56]	@ (800131c <SystemInit+0x10c>)
 80012e4:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 80012e8:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80012ea:	bf00      	nop
 80012ec:	46bd      	mov	sp, r7
 80012ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f2:	4770      	bx	lr
 80012f4:	e000ed00 	.word	0xe000ed00
 80012f8:	52002000 	.word	0x52002000
 80012fc:	58024400 	.word	0x58024400
 8001300:	eaf6ed7f 	.word	0xeaf6ed7f
 8001304:	02020200 	.word	0x02020200
 8001308:	01ff0000 	.word	0x01ff0000
 800130c:	01010280 	.word	0x01010280
 8001310:	5c001000 	.word	0x5c001000
 8001314:	ffff0000 	.word	0xffff0000
 8001318:	51008108 	.word	0x51008108
 800131c:	52004000 	.word	0x52004000

08001320 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001320:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001358 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001324:	f7ff ff74 	bl	8001210 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001328:	480c      	ldr	r0, [pc, #48]	@ (800135c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800132a:	490d      	ldr	r1, [pc, #52]	@ (8001360 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800132c:	4a0d      	ldr	r2, [pc, #52]	@ (8001364 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800132e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001330:	e002      	b.n	8001338 <LoopCopyDataInit>

08001332 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001332:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001334:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001336:	3304      	adds	r3, #4

08001338 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001338:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800133a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800133c:	d3f9      	bcc.n	8001332 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800133e:	4a0a      	ldr	r2, [pc, #40]	@ (8001368 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001340:	4c0a      	ldr	r4, [pc, #40]	@ (800136c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001342:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001344:	e001      	b.n	800134a <LoopFillZerobss>

08001346 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001346:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001348:	3204      	adds	r2, #4

0800134a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800134a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800134c:	d3fb      	bcc.n	8001346 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800134e:	f005 fc71 	bl	8006c34 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001352:	f7ff fb3f 	bl	80009d4 <main>
  bx  lr
 8001356:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001358:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 800135c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001360:	2400001c 	.word	0x2400001c
  ldr r2, =_sidata
 8001364:	080074cc 	.word	0x080074cc
  ldr r2, =_sbss
 8001368:	2400001c 	.word	0x2400001c
  ldr r4, =_ebss
 800136c:	240040d0 	.word	0x240040d0

08001370 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001370:	e7fe      	b.n	8001370 <ADC3_IRQHandler>
	...

08001374 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	b082      	sub	sp, #8
 8001378:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800137a:	2003      	movs	r0, #3
 800137c:	f000 f96e 	bl	800165c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001380:	f002 f84e 	bl	8003420 <HAL_RCC_GetSysClockFreq>
 8001384:	4602      	mov	r2, r0
 8001386:	4b15      	ldr	r3, [pc, #84]	@ (80013dc <HAL_Init+0x68>)
 8001388:	699b      	ldr	r3, [r3, #24]
 800138a:	0a1b      	lsrs	r3, r3, #8
 800138c:	f003 030f 	and.w	r3, r3, #15
 8001390:	4913      	ldr	r1, [pc, #76]	@ (80013e0 <HAL_Init+0x6c>)
 8001392:	5ccb      	ldrb	r3, [r1, r3]
 8001394:	f003 031f 	and.w	r3, r3, #31
 8001398:	fa22 f303 	lsr.w	r3, r2, r3
 800139c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800139e:	4b0f      	ldr	r3, [pc, #60]	@ (80013dc <HAL_Init+0x68>)
 80013a0:	699b      	ldr	r3, [r3, #24]
 80013a2:	f003 030f 	and.w	r3, r3, #15
 80013a6:	4a0e      	ldr	r2, [pc, #56]	@ (80013e0 <HAL_Init+0x6c>)
 80013a8:	5cd3      	ldrb	r3, [r2, r3]
 80013aa:	f003 031f 	and.w	r3, r3, #31
 80013ae:	687a      	ldr	r2, [r7, #4]
 80013b0:	fa22 f303 	lsr.w	r3, r2, r3
 80013b4:	4a0b      	ldr	r2, [pc, #44]	@ (80013e4 <HAL_Init+0x70>)
 80013b6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80013b8:	4a0b      	ldr	r2, [pc, #44]	@ (80013e8 <HAL_Init+0x74>)
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80013be:	200f      	movs	r0, #15
 80013c0:	f000 f814 	bl	80013ec <HAL_InitTick>
 80013c4:	4603      	mov	r3, r0
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d001      	beq.n	80013ce <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80013ca:	2301      	movs	r3, #1
 80013cc:	e002      	b.n	80013d4 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80013ce:	f7ff fd91 	bl	8000ef4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80013d2:	2300      	movs	r3, #0
}
 80013d4:	4618      	mov	r0, r3
 80013d6:	3708      	adds	r7, #8
 80013d8:	46bd      	mov	sp, r7
 80013da:	bd80      	pop	{r7, pc}
 80013dc:	58024400 	.word	0x58024400
 80013e0:	080074b4 	.word	0x080074b4
 80013e4:	2400000c 	.word	0x2400000c
 80013e8:	24000008 	.word	0x24000008

080013ec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b082      	sub	sp, #8
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80013f4:	4b15      	ldr	r3, [pc, #84]	@ (800144c <HAL_InitTick+0x60>)
 80013f6:	781b      	ldrb	r3, [r3, #0]
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d101      	bne.n	8001400 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80013fc:	2301      	movs	r3, #1
 80013fe:	e021      	b.n	8001444 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001400:	4b13      	ldr	r3, [pc, #76]	@ (8001450 <HAL_InitTick+0x64>)
 8001402:	681a      	ldr	r2, [r3, #0]
 8001404:	4b11      	ldr	r3, [pc, #68]	@ (800144c <HAL_InitTick+0x60>)
 8001406:	781b      	ldrb	r3, [r3, #0]
 8001408:	4619      	mov	r1, r3
 800140a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800140e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001412:	fbb2 f3f3 	udiv	r3, r2, r3
 8001416:	4618      	mov	r0, r3
 8001418:	f000 f945 	bl	80016a6 <HAL_SYSTICK_Config>
 800141c:	4603      	mov	r3, r0
 800141e:	2b00      	cmp	r3, #0
 8001420:	d001      	beq.n	8001426 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001422:	2301      	movs	r3, #1
 8001424:	e00e      	b.n	8001444 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	2b0f      	cmp	r3, #15
 800142a:	d80a      	bhi.n	8001442 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800142c:	2200      	movs	r2, #0
 800142e:	6879      	ldr	r1, [r7, #4]
 8001430:	f04f 30ff 	mov.w	r0, #4294967295
 8001434:	f000 f91d 	bl	8001672 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001438:	4a06      	ldr	r2, [pc, #24]	@ (8001454 <HAL_InitTick+0x68>)
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800143e:	2300      	movs	r3, #0
 8001440:	e000      	b.n	8001444 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001442:	2301      	movs	r3, #1
}
 8001444:	4618      	mov	r0, r3
 8001446:	3708      	adds	r7, #8
 8001448:	46bd      	mov	sp, r7
 800144a:	bd80      	pop	{r7, pc}
 800144c:	24000014 	.word	0x24000014
 8001450:	24000008 	.word	0x24000008
 8001454:	24000010 	.word	0x24000010

08001458 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001458:	b480      	push	{r7}
 800145a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800145c:	4b06      	ldr	r3, [pc, #24]	@ (8001478 <HAL_IncTick+0x20>)
 800145e:	781b      	ldrb	r3, [r3, #0]
 8001460:	461a      	mov	r2, r3
 8001462:	4b06      	ldr	r3, [pc, #24]	@ (800147c <HAL_IncTick+0x24>)
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	4413      	add	r3, r2
 8001468:	4a04      	ldr	r2, [pc, #16]	@ (800147c <HAL_IncTick+0x24>)
 800146a:	6013      	str	r3, [r2, #0]
}
 800146c:	bf00      	nop
 800146e:	46bd      	mov	sp, r7
 8001470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001474:	4770      	bx	lr
 8001476:	bf00      	nop
 8001478:	24000014 	.word	0x24000014
 800147c:	24000378 	.word	0x24000378

08001480 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001480:	b480      	push	{r7}
 8001482:	af00      	add	r7, sp, #0
  return uwTick;
 8001484:	4b03      	ldr	r3, [pc, #12]	@ (8001494 <HAL_GetTick+0x14>)
 8001486:	681b      	ldr	r3, [r3, #0]
}
 8001488:	4618      	mov	r0, r3
 800148a:	46bd      	mov	sp, r7
 800148c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001490:	4770      	bx	lr
 8001492:	bf00      	nop
 8001494:	24000378 	.word	0x24000378

08001498 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	b084      	sub	sp, #16
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80014a0:	f7ff ffee 	bl	8001480 <HAL_GetTick>
 80014a4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80014aa:	68fb      	ldr	r3, [r7, #12]
 80014ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80014b0:	d005      	beq.n	80014be <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80014b2:	4b0a      	ldr	r3, [pc, #40]	@ (80014dc <HAL_Delay+0x44>)
 80014b4:	781b      	ldrb	r3, [r3, #0]
 80014b6:	461a      	mov	r2, r3
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	4413      	add	r3, r2
 80014bc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80014be:	bf00      	nop
 80014c0:	f7ff ffde 	bl	8001480 <HAL_GetTick>
 80014c4:	4602      	mov	r2, r0
 80014c6:	68bb      	ldr	r3, [r7, #8]
 80014c8:	1ad3      	subs	r3, r2, r3
 80014ca:	68fa      	ldr	r2, [r7, #12]
 80014cc:	429a      	cmp	r2, r3
 80014ce:	d8f7      	bhi.n	80014c0 <HAL_Delay+0x28>
  {
  }
}
 80014d0:	bf00      	nop
 80014d2:	bf00      	nop
 80014d4:	3710      	adds	r7, #16
 80014d6:	46bd      	mov	sp, r7
 80014d8:	bd80      	pop	{r7, pc}
 80014da:	bf00      	nop
 80014dc:	24000014 	.word	0x24000014

080014e0 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80014e0:	b480      	push	{r7}
 80014e2:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80014e4:	4b03      	ldr	r3, [pc, #12]	@ (80014f4 <HAL_GetREVID+0x14>)
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	0c1b      	lsrs	r3, r3, #16
}
 80014ea:	4618      	mov	r0, r3
 80014ec:	46bd      	mov	sp, r7
 80014ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f2:	4770      	bx	lr
 80014f4:	5c001000 	.word	0x5c001000

080014f8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014f8:	b480      	push	{r7}
 80014fa:	b085      	sub	sp, #20
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	f003 0307 	and.w	r3, r3, #7
 8001506:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001508:	4b0b      	ldr	r3, [pc, #44]	@ (8001538 <__NVIC_SetPriorityGrouping+0x40>)
 800150a:	68db      	ldr	r3, [r3, #12]
 800150c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800150e:	68ba      	ldr	r2, [r7, #8]
 8001510:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001514:	4013      	ands	r3, r2
 8001516:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800151c:	68bb      	ldr	r3, [r7, #8]
 800151e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001520:	4b06      	ldr	r3, [pc, #24]	@ (800153c <__NVIC_SetPriorityGrouping+0x44>)
 8001522:	4313      	orrs	r3, r2
 8001524:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001526:	4a04      	ldr	r2, [pc, #16]	@ (8001538 <__NVIC_SetPriorityGrouping+0x40>)
 8001528:	68bb      	ldr	r3, [r7, #8]
 800152a:	60d3      	str	r3, [r2, #12]
}
 800152c:	bf00      	nop
 800152e:	3714      	adds	r7, #20
 8001530:	46bd      	mov	sp, r7
 8001532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001536:	4770      	bx	lr
 8001538:	e000ed00 	.word	0xe000ed00
 800153c:	05fa0000 	.word	0x05fa0000

08001540 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001540:	b480      	push	{r7}
 8001542:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001544:	4b04      	ldr	r3, [pc, #16]	@ (8001558 <__NVIC_GetPriorityGrouping+0x18>)
 8001546:	68db      	ldr	r3, [r3, #12]
 8001548:	0a1b      	lsrs	r3, r3, #8
 800154a:	f003 0307 	and.w	r3, r3, #7
}
 800154e:	4618      	mov	r0, r3
 8001550:	46bd      	mov	sp, r7
 8001552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001556:	4770      	bx	lr
 8001558:	e000ed00 	.word	0xe000ed00

0800155c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800155c:	b480      	push	{r7}
 800155e:	b083      	sub	sp, #12
 8001560:	af00      	add	r7, sp, #0
 8001562:	4603      	mov	r3, r0
 8001564:	6039      	str	r1, [r7, #0]
 8001566:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001568:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800156c:	2b00      	cmp	r3, #0
 800156e:	db0a      	blt.n	8001586 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001570:	683b      	ldr	r3, [r7, #0]
 8001572:	b2da      	uxtb	r2, r3
 8001574:	490c      	ldr	r1, [pc, #48]	@ (80015a8 <__NVIC_SetPriority+0x4c>)
 8001576:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800157a:	0112      	lsls	r2, r2, #4
 800157c:	b2d2      	uxtb	r2, r2
 800157e:	440b      	add	r3, r1
 8001580:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001584:	e00a      	b.n	800159c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001586:	683b      	ldr	r3, [r7, #0]
 8001588:	b2da      	uxtb	r2, r3
 800158a:	4908      	ldr	r1, [pc, #32]	@ (80015ac <__NVIC_SetPriority+0x50>)
 800158c:	88fb      	ldrh	r3, [r7, #6]
 800158e:	f003 030f 	and.w	r3, r3, #15
 8001592:	3b04      	subs	r3, #4
 8001594:	0112      	lsls	r2, r2, #4
 8001596:	b2d2      	uxtb	r2, r2
 8001598:	440b      	add	r3, r1
 800159a:	761a      	strb	r2, [r3, #24]
}
 800159c:	bf00      	nop
 800159e:	370c      	adds	r7, #12
 80015a0:	46bd      	mov	sp, r7
 80015a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a6:	4770      	bx	lr
 80015a8:	e000e100 	.word	0xe000e100
 80015ac:	e000ed00 	.word	0xe000ed00

080015b0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015b0:	b480      	push	{r7}
 80015b2:	b089      	sub	sp, #36	@ 0x24
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	60f8      	str	r0, [r7, #12]
 80015b8:	60b9      	str	r1, [r7, #8]
 80015ba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	f003 0307 	and.w	r3, r3, #7
 80015c2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80015c4:	69fb      	ldr	r3, [r7, #28]
 80015c6:	f1c3 0307 	rsb	r3, r3, #7
 80015ca:	2b04      	cmp	r3, #4
 80015cc:	bf28      	it	cs
 80015ce:	2304      	movcs	r3, #4
 80015d0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80015d2:	69fb      	ldr	r3, [r7, #28]
 80015d4:	3304      	adds	r3, #4
 80015d6:	2b06      	cmp	r3, #6
 80015d8:	d902      	bls.n	80015e0 <NVIC_EncodePriority+0x30>
 80015da:	69fb      	ldr	r3, [r7, #28]
 80015dc:	3b03      	subs	r3, #3
 80015de:	e000      	b.n	80015e2 <NVIC_EncodePriority+0x32>
 80015e0:	2300      	movs	r3, #0
 80015e2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015e4:	f04f 32ff 	mov.w	r2, #4294967295
 80015e8:	69bb      	ldr	r3, [r7, #24]
 80015ea:	fa02 f303 	lsl.w	r3, r2, r3
 80015ee:	43da      	mvns	r2, r3
 80015f0:	68bb      	ldr	r3, [r7, #8]
 80015f2:	401a      	ands	r2, r3
 80015f4:	697b      	ldr	r3, [r7, #20]
 80015f6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80015f8:	f04f 31ff 	mov.w	r1, #4294967295
 80015fc:	697b      	ldr	r3, [r7, #20]
 80015fe:	fa01 f303 	lsl.w	r3, r1, r3
 8001602:	43d9      	mvns	r1, r3
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001608:	4313      	orrs	r3, r2
         );
}
 800160a:	4618      	mov	r0, r3
 800160c:	3724      	adds	r7, #36	@ 0x24
 800160e:	46bd      	mov	sp, r7
 8001610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001614:	4770      	bx	lr
	...

08001618 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	b082      	sub	sp, #8
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	3b01      	subs	r3, #1
 8001624:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001628:	d301      	bcc.n	800162e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800162a:	2301      	movs	r3, #1
 800162c:	e00f      	b.n	800164e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800162e:	4a0a      	ldr	r2, [pc, #40]	@ (8001658 <SysTick_Config+0x40>)
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	3b01      	subs	r3, #1
 8001634:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001636:	210f      	movs	r1, #15
 8001638:	f04f 30ff 	mov.w	r0, #4294967295
 800163c:	f7ff ff8e 	bl	800155c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001640:	4b05      	ldr	r3, [pc, #20]	@ (8001658 <SysTick_Config+0x40>)
 8001642:	2200      	movs	r2, #0
 8001644:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001646:	4b04      	ldr	r3, [pc, #16]	@ (8001658 <SysTick_Config+0x40>)
 8001648:	2207      	movs	r2, #7
 800164a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800164c:	2300      	movs	r3, #0
}
 800164e:	4618      	mov	r0, r3
 8001650:	3708      	adds	r7, #8
 8001652:	46bd      	mov	sp, r7
 8001654:	bd80      	pop	{r7, pc}
 8001656:	bf00      	nop
 8001658:	e000e010 	.word	0xe000e010

0800165c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	b082      	sub	sp, #8
 8001660:	af00      	add	r7, sp, #0
 8001662:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001664:	6878      	ldr	r0, [r7, #4]
 8001666:	f7ff ff47 	bl	80014f8 <__NVIC_SetPriorityGrouping>
}
 800166a:	bf00      	nop
 800166c:	3708      	adds	r7, #8
 800166e:	46bd      	mov	sp, r7
 8001670:	bd80      	pop	{r7, pc}

08001672 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001672:	b580      	push	{r7, lr}
 8001674:	b086      	sub	sp, #24
 8001676:	af00      	add	r7, sp, #0
 8001678:	4603      	mov	r3, r0
 800167a:	60b9      	str	r1, [r7, #8]
 800167c:	607a      	str	r2, [r7, #4]
 800167e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001680:	f7ff ff5e 	bl	8001540 <__NVIC_GetPriorityGrouping>
 8001684:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001686:	687a      	ldr	r2, [r7, #4]
 8001688:	68b9      	ldr	r1, [r7, #8]
 800168a:	6978      	ldr	r0, [r7, #20]
 800168c:	f7ff ff90 	bl	80015b0 <NVIC_EncodePriority>
 8001690:	4602      	mov	r2, r0
 8001692:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001696:	4611      	mov	r1, r2
 8001698:	4618      	mov	r0, r3
 800169a:	f7ff ff5f 	bl	800155c <__NVIC_SetPriority>
}
 800169e:	bf00      	nop
 80016a0:	3718      	adds	r7, #24
 80016a2:	46bd      	mov	sp, r7
 80016a4:	bd80      	pop	{r7, pc}

080016a6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80016a6:	b580      	push	{r7, lr}
 80016a8:	b082      	sub	sp, #8
 80016aa:	af00      	add	r7, sp, #0
 80016ac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80016ae:	6878      	ldr	r0, [r7, #4]
 80016b0:	f7ff ffb2 	bl	8001618 <SysTick_Config>
 80016b4:	4603      	mov	r3, r0
}
 80016b6:	4618      	mov	r0, r3
 80016b8:	3708      	adds	r7, #8
 80016ba:	46bd      	mov	sp, r7
 80016bc:	bd80      	pop	{r7, pc}
	...

080016c0 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 80016c0:	b480      	push	{r7}
 80016c2:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 80016c4:	f3bf 8f5f 	dmb	sy
}
 80016c8:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 80016ca:	4b07      	ldr	r3, [pc, #28]	@ (80016e8 <HAL_MPU_Disable+0x28>)
 80016cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016ce:	4a06      	ldr	r2, [pc, #24]	@ (80016e8 <HAL_MPU_Disable+0x28>)
 80016d0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80016d4:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 80016d6:	4b05      	ldr	r3, [pc, #20]	@ (80016ec <HAL_MPU_Disable+0x2c>)
 80016d8:	2200      	movs	r2, #0
 80016da:	605a      	str	r2, [r3, #4]
}
 80016dc:	bf00      	nop
 80016de:	46bd      	mov	sp, r7
 80016e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e4:	4770      	bx	lr
 80016e6:	bf00      	nop
 80016e8:	e000ed00 	.word	0xe000ed00
 80016ec:	e000ed90 	.word	0xe000ed90

080016f0 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 80016f0:	b480      	push	{r7}
 80016f2:	b083      	sub	sp, #12
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 80016f8:	4a0b      	ldr	r2, [pc, #44]	@ (8001728 <HAL_MPU_Enable+0x38>)
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	f043 0301 	orr.w	r3, r3, #1
 8001700:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8001702:	4b0a      	ldr	r3, [pc, #40]	@ (800172c <HAL_MPU_Enable+0x3c>)
 8001704:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001706:	4a09      	ldr	r2, [pc, #36]	@ (800172c <HAL_MPU_Enable+0x3c>)
 8001708:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800170c:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 800170e:	f3bf 8f4f 	dsb	sy
}
 8001712:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001714:	f3bf 8f6f 	isb	sy
}
 8001718:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 800171a:	bf00      	nop
 800171c:	370c      	adds	r7, #12
 800171e:	46bd      	mov	sp, r7
 8001720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001724:	4770      	bx	lr
 8001726:	bf00      	nop
 8001728:	e000ed90 	.word	0xe000ed90
 800172c:	e000ed00 	.word	0xe000ed00

08001730 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8001730:	b480      	push	{r7}
 8001732:	b083      	sub	sp, #12
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	785a      	ldrb	r2, [r3, #1]
 800173c:	4b1b      	ldr	r3, [pc, #108]	@ (80017ac <HAL_MPU_ConfigRegion+0x7c>)
 800173e:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8001740:	4b1a      	ldr	r3, [pc, #104]	@ (80017ac <HAL_MPU_ConfigRegion+0x7c>)
 8001742:	691b      	ldr	r3, [r3, #16]
 8001744:	4a19      	ldr	r2, [pc, #100]	@ (80017ac <HAL_MPU_ConfigRegion+0x7c>)
 8001746:	f023 0301 	bic.w	r3, r3, #1
 800174a:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 800174c:	4a17      	ldr	r2, [pc, #92]	@ (80017ac <HAL_MPU_ConfigRegion+0x7c>)
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	685b      	ldr	r3, [r3, #4]
 8001752:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	7b1b      	ldrb	r3, [r3, #12]
 8001758:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	7adb      	ldrb	r3, [r3, #11]
 800175e:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001760:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	7a9b      	ldrb	r3, [r3, #10]
 8001766:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001768:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	7b5b      	ldrb	r3, [r3, #13]
 800176e:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001770:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	7b9b      	ldrb	r3, [r3, #14]
 8001776:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001778:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	7bdb      	ldrb	r3, [r3, #15]
 800177e:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001780:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	7a5b      	ldrb	r3, [r3, #9]
 8001786:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001788:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	7a1b      	ldrb	r3, [r3, #8]
 800178e:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001790:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8001792:	687a      	ldr	r2, [r7, #4]
 8001794:	7812      	ldrb	r2, [r2, #0]
 8001796:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001798:	4a04      	ldr	r2, [pc, #16]	@ (80017ac <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800179a:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800179c:	6113      	str	r3, [r2, #16]
}
 800179e:	bf00      	nop
 80017a0:	370c      	adds	r7, #12
 80017a2:	46bd      	mov	sp, r7
 80017a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a8:	4770      	bx	lr
 80017aa:	bf00      	nop
 80017ac:	e000ed90 	.word	0xe000ed90

080017b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80017b0:	b480      	push	{r7}
 80017b2:	b089      	sub	sp, #36	@ 0x24
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	6078      	str	r0, [r7, #4]
 80017b8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80017ba:	2300      	movs	r3, #0
 80017bc:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80017be:	4b89      	ldr	r3, [pc, #548]	@ (80019e4 <HAL_GPIO_Init+0x234>)
 80017c0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80017c2:	e194      	b.n	8001aee <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80017c4:	683b      	ldr	r3, [r7, #0]
 80017c6:	681a      	ldr	r2, [r3, #0]
 80017c8:	2101      	movs	r1, #1
 80017ca:	69fb      	ldr	r3, [r7, #28]
 80017cc:	fa01 f303 	lsl.w	r3, r1, r3
 80017d0:	4013      	ands	r3, r2
 80017d2:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80017d4:	693b      	ldr	r3, [r7, #16]
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	f000 8186 	beq.w	8001ae8 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80017dc:	683b      	ldr	r3, [r7, #0]
 80017de:	685b      	ldr	r3, [r3, #4]
 80017e0:	f003 0303 	and.w	r3, r3, #3
 80017e4:	2b01      	cmp	r3, #1
 80017e6:	d005      	beq.n	80017f4 <HAL_GPIO_Init+0x44>
 80017e8:	683b      	ldr	r3, [r7, #0]
 80017ea:	685b      	ldr	r3, [r3, #4]
 80017ec:	f003 0303 	and.w	r3, r3, #3
 80017f0:	2b02      	cmp	r3, #2
 80017f2:	d130      	bne.n	8001856 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	689b      	ldr	r3, [r3, #8]
 80017f8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80017fa:	69fb      	ldr	r3, [r7, #28]
 80017fc:	005b      	lsls	r3, r3, #1
 80017fe:	2203      	movs	r2, #3
 8001800:	fa02 f303 	lsl.w	r3, r2, r3
 8001804:	43db      	mvns	r3, r3
 8001806:	69ba      	ldr	r2, [r7, #24]
 8001808:	4013      	ands	r3, r2
 800180a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800180c:	683b      	ldr	r3, [r7, #0]
 800180e:	68da      	ldr	r2, [r3, #12]
 8001810:	69fb      	ldr	r3, [r7, #28]
 8001812:	005b      	lsls	r3, r3, #1
 8001814:	fa02 f303 	lsl.w	r3, r2, r3
 8001818:	69ba      	ldr	r2, [r7, #24]
 800181a:	4313      	orrs	r3, r2
 800181c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	69ba      	ldr	r2, [r7, #24]
 8001822:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	685b      	ldr	r3, [r3, #4]
 8001828:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800182a:	2201      	movs	r2, #1
 800182c:	69fb      	ldr	r3, [r7, #28]
 800182e:	fa02 f303 	lsl.w	r3, r2, r3
 8001832:	43db      	mvns	r3, r3
 8001834:	69ba      	ldr	r2, [r7, #24]
 8001836:	4013      	ands	r3, r2
 8001838:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800183a:	683b      	ldr	r3, [r7, #0]
 800183c:	685b      	ldr	r3, [r3, #4]
 800183e:	091b      	lsrs	r3, r3, #4
 8001840:	f003 0201 	and.w	r2, r3, #1
 8001844:	69fb      	ldr	r3, [r7, #28]
 8001846:	fa02 f303 	lsl.w	r3, r2, r3
 800184a:	69ba      	ldr	r2, [r7, #24]
 800184c:	4313      	orrs	r3, r2
 800184e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	69ba      	ldr	r2, [r7, #24]
 8001854:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001856:	683b      	ldr	r3, [r7, #0]
 8001858:	685b      	ldr	r3, [r3, #4]
 800185a:	f003 0303 	and.w	r3, r3, #3
 800185e:	2b03      	cmp	r3, #3
 8001860:	d017      	beq.n	8001892 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	68db      	ldr	r3, [r3, #12]
 8001866:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001868:	69fb      	ldr	r3, [r7, #28]
 800186a:	005b      	lsls	r3, r3, #1
 800186c:	2203      	movs	r2, #3
 800186e:	fa02 f303 	lsl.w	r3, r2, r3
 8001872:	43db      	mvns	r3, r3
 8001874:	69ba      	ldr	r2, [r7, #24]
 8001876:	4013      	ands	r3, r2
 8001878:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800187a:	683b      	ldr	r3, [r7, #0]
 800187c:	689a      	ldr	r2, [r3, #8]
 800187e:	69fb      	ldr	r3, [r7, #28]
 8001880:	005b      	lsls	r3, r3, #1
 8001882:	fa02 f303 	lsl.w	r3, r2, r3
 8001886:	69ba      	ldr	r2, [r7, #24]
 8001888:	4313      	orrs	r3, r2
 800188a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	69ba      	ldr	r2, [r7, #24]
 8001890:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001892:	683b      	ldr	r3, [r7, #0]
 8001894:	685b      	ldr	r3, [r3, #4]
 8001896:	f003 0303 	and.w	r3, r3, #3
 800189a:	2b02      	cmp	r3, #2
 800189c:	d123      	bne.n	80018e6 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800189e:	69fb      	ldr	r3, [r7, #28]
 80018a0:	08da      	lsrs	r2, r3, #3
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	3208      	adds	r2, #8
 80018a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80018aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80018ac:	69fb      	ldr	r3, [r7, #28]
 80018ae:	f003 0307 	and.w	r3, r3, #7
 80018b2:	009b      	lsls	r3, r3, #2
 80018b4:	220f      	movs	r2, #15
 80018b6:	fa02 f303 	lsl.w	r3, r2, r3
 80018ba:	43db      	mvns	r3, r3
 80018bc:	69ba      	ldr	r2, [r7, #24]
 80018be:	4013      	ands	r3, r2
 80018c0:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80018c2:	683b      	ldr	r3, [r7, #0]
 80018c4:	691a      	ldr	r2, [r3, #16]
 80018c6:	69fb      	ldr	r3, [r7, #28]
 80018c8:	f003 0307 	and.w	r3, r3, #7
 80018cc:	009b      	lsls	r3, r3, #2
 80018ce:	fa02 f303 	lsl.w	r3, r2, r3
 80018d2:	69ba      	ldr	r2, [r7, #24]
 80018d4:	4313      	orrs	r3, r2
 80018d6:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80018d8:	69fb      	ldr	r3, [r7, #28]
 80018da:	08da      	lsrs	r2, r3, #3
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	3208      	adds	r2, #8
 80018e0:	69b9      	ldr	r1, [r7, #24]
 80018e2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80018ec:	69fb      	ldr	r3, [r7, #28]
 80018ee:	005b      	lsls	r3, r3, #1
 80018f0:	2203      	movs	r2, #3
 80018f2:	fa02 f303 	lsl.w	r3, r2, r3
 80018f6:	43db      	mvns	r3, r3
 80018f8:	69ba      	ldr	r2, [r7, #24]
 80018fa:	4013      	ands	r3, r2
 80018fc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80018fe:	683b      	ldr	r3, [r7, #0]
 8001900:	685b      	ldr	r3, [r3, #4]
 8001902:	f003 0203 	and.w	r2, r3, #3
 8001906:	69fb      	ldr	r3, [r7, #28]
 8001908:	005b      	lsls	r3, r3, #1
 800190a:	fa02 f303 	lsl.w	r3, r2, r3
 800190e:	69ba      	ldr	r2, [r7, #24]
 8001910:	4313      	orrs	r3, r2
 8001912:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	69ba      	ldr	r2, [r7, #24]
 8001918:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800191a:	683b      	ldr	r3, [r7, #0]
 800191c:	685b      	ldr	r3, [r3, #4]
 800191e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001922:	2b00      	cmp	r3, #0
 8001924:	f000 80e0 	beq.w	8001ae8 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001928:	4b2f      	ldr	r3, [pc, #188]	@ (80019e8 <HAL_GPIO_Init+0x238>)
 800192a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800192e:	4a2e      	ldr	r2, [pc, #184]	@ (80019e8 <HAL_GPIO_Init+0x238>)
 8001930:	f043 0302 	orr.w	r3, r3, #2
 8001934:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001938:	4b2b      	ldr	r3, [pc, #172]	@ (80019e8 <HAL_GPIO_Init+0x238>)
 800193a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800193e:	f003 0302 	and.w	r3, r3, #2
 8001942:	60fb      	str	r3, [r7, #12]
 8001944:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001946:	4a29      	ldr	r2, [pc, #164]	@ (80019ec <HAL_GPIO_Init+0x23c>)
 8001948:	69fb      	ldr	r3, [r7, #28]
 800194a:	089b      	lsrs	r3, r3, #2
 800194c:	3302      	adds	r3, #2
 800194e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001952:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001954:	69fb      	ldr	r3, [r7, #28]
 8001956:	f003 0303 	and.w	r3, r3, #3
 800195a:	009b      	lsls	r3, r3, #2
 800195c:	220f      	movs	r2, #15
 800195e:	fa02 f303 	lsl.w	r3, r2, r3
 8001962:	43db      	mvns	r3, r3
 8001964:	69ba      	ldr	r2, [r7, #24]
 8001966:	4013      	ands	r3, r2
 8001968:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	4a20      	ldr	r2, [pc, #128]	@ (80019f0 <HAL_GPIO_Init+0x240>)
 800196e:	4293      	cmp	r3, r2
 8001970:	d052      	beq.n	8001a18 <HAL_GPIO_Init+0x268>
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	4a1f      	ldr	r2, [pc, #124]	@ (80019f4 <HAL_GPIO_Init+0x244>)
 8001976:	4293      	cmp	r3, r2
 8001978:	d031      	beq.n	80019de <HAL_GPIO_Init+0x22e>
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	4a1e      	ldr	r2, [pc, #120]	@ (80019f8 <HAL_GPIO_Init+0x248>)
 800197e:	4293      	cmp	r3, r2
 8001980:	d02b      	beq.n	80019da <HAL_GPIO_Init+0x22a>
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	4a1d      	ldr	r2, [pc, #116]	@ (80019fc <HAL_GPIO_Init+0x24c>)
 8001986:	4293      	cmp	r3, r2
 8001988:	d025      	beq.n	80019d6 <HAL_GPIO_Init+0x226>
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	4a1c      	ldr	r2, [pc, #112]	@ (8001a00 <HAL_GPIO_Init+0x250>)
 800198e:	4293      	cmp	r3, r2
 8001990:	d01f      	beq.n	80019d2 <HAL_GPIO_Init+0x222>
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	4a1b      	ldr	r2, [pc, #108]	@ (8001a04 <HAL_GPIO_Init+0x254>)
 8001996:	4293      	cmp	r3, r2
 8001998:	d019      	beq.n	80019ce <HAL_GPIO_Init+0x21e>
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	4a1a      	ldr	r2, [pc, #104]	@ (8001a08 <HAL_GPIO_Init+0x258>)
 800199e:	4293      	cmp	r3, r2
 80019a0:	d013      	beq.n	80019ca <HAL_GPIO_Init+0x21a>
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	4a19      	ldr	r2, [pc, #100]	@ (8001a0c <HAL_GPIO_Init+0x25c>)
 80019a6:	4293      	cmp	r3, r2
 80019a8:	d00d      	beq.n	80019c6 <HAL_GPIO_Init+0x216>
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	4a18      	ldr	r2, [pc, #96]	@ (8001a10 <HAL_GPIO_Init+0x260>)
 80019ae:	4293      	cmp	r3, r2
 80019b0:	d007      	beq.n	80019c2 <HAL_GPIO_Init+0x212>
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	4a17      	ldr	r2, [pc, #92]	@ (8001a14 <HAL_GPIO_Init+0x264>)
 80019b6:	4293      	cmp	r3, r2
 80019b8:	d101      	bne.n	80019be <HAL_GPIO_Init+0x20e>
 80019ba:	2309      	movs	r3, #9
 80019bc:	e02d      	b.n	8001a1a <HAL_GPIO_Init+0x26a>
 80019be:	230a      	movs	r3, #10
 80019c0:	e02b      	b.n	8001a1a <HAL_GPIO_Init+0x26a>
 80019c2:	2308      	movs	r3, #8
 80019c4:	e029      	b.n	8001a1a <HAL_GPIO_Init+0x26a>
 80019c6:	2307      	movs	r3, #7
 80019c8:	e027      	b.n	8001a1a <HAL_GPIO_Init+0x26a>
 80019ca:	2306      	movs	r3, #6
 80019cc:	e025      	b.n	8001a1a <HAL_GPIO_Init+0x26a>
 80019ce:	2305      	movs	r3, #5
 80019d0:	e023      	b.n	8001a1a <HAL_GPIO_Init+0x26a>
 80019d2:	2304      	movs	r3, #4
 80019d4:	e021      	b.n	8001a1a <HAL_GPIO_Init+0x26a>
 80019d6:	2303      	movs	r3, #3
 80019d8:	e01f      	b.n	8001a1a <HAL_GPIO_Init+0x26a>
 80019da:	2302      	movs	r3, #2
 80019dc:	e01d      	b.n	8001a1a <HAL_GPIO_Init+0x26a>
 80019de:	2301      	movs	r3, #1
 80019e0:	e01b      	b.n	8001a1a <HAL_GPIO_Init+0x26a>
 80019e2:	bf00      	nop
 80019e4:	58000080 	.word	0x58000080
 80019e8:	58024400 	.word	0x58024400
 80019ec:	58000400 	.word	0x58000400
 80019f0:	58020000 	.word	0x58020000
 80019f4:	58020400 	.word	0x58020400
 80019f8:	58020800 	.word	0x58020800
 80019fc:	58020c00 	.word	0x58020c00
 8001a00:	58021000 	.word	0x58021000
 8001a04:	58021400 	.word	0x58021400
 8001a08:	58021800 	.word	0x58021800
 8001a0c:	58021c00 	.word	0x58021c00
 8001a10:	58022000 	.word	0x58022000
 8001a14:	58022400 	.word	0x58022400
 8001a18:	2300      	movs	r3, #0
 8001a1a:	69fa      	ldr	r2, [r7, #28]
 8001a1c:	f002 0203 	and.w	r2, r2, #3
 8001a20:	0092      	lsls	r2, r2, #2
 8001a22:	4093      	lsls	r3, r2
 8001a24:	69ba      	ldr	r2, [r7, #24]
 8001a26:	4313      	orrs	r3, r2
 8001a28:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001a2a:	4938      	ldr	r1, [pc, #224]	@ (8001b0c <HAL_GPIO_Init+0x35c>)
 8001a2c:	69fb      	ldr	r3, [r7, #28]
 8001a2e:	089b      	lsrs	r3, r3, #2
 8001a30:	3302      	adds	r3, #2
 8001a32:	69ba      	ldr	r2, [r7, #24]
 8001a34:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001a38:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001a40:	693b      	ldr	r3, [r7, #16]
 8001a42:	43db      	mvns	r3, r3
 8001a44:	69ba      	ldr	r2, [r7, #24]
 8001a46:	4013      	ands	r3, r2
 8001a48:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001a4a:	683b      	ldr	r3, [r7, #0]
 8001a4c:	685b      	ldr	r3, [r3, #4]
 8001a4e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d003      	beq.n	8001a5e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001a56:	69ba      	ldr	r2, [r7, #24]
 8001a58:	693b      	ldr	r3, [r7, #16]
 8001a5a:	4313      	orrs	r3, r2
 8001a5c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8001a5e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001a62:	69bb      	ldr	r3, [r7, #24]
 8001a64:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001a66:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001a6a:	685b      	ldr	r3, [r3, #4]
 8001a6c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001a6e:	693b      	ldr	r3, [r7, #16]
 8001a70:	43db      	mvns	r3, r3
 8001a72:	69ba      	ldr	r2, [r7, #24]
 8001a74:	4013      	ands	r3, r2
 8001a76:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001a78:	683b      	ldr	r3, [r7, #0]
 8001a7a:	685b      	ldr	r3, [r3, #4]
 8001a7c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d003      	beq.n	8001a8c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001a84:	69ba      	ldr	r2, [r7, #24]
 8001a86:	693b      	ldr	r3, [r7, #16]
 8001a88:	4313      	orrs	r3, r2
 8001a8a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8001a8c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001a90:	69bb      	ldr	r3, [r7, #24]
 8001a92:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8001a94:	697b      	ldr	r3, [r7, #20]
 8001a96:	685b      	ldr	r3, [r3, #4]
 8001a98:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001a9a:	693b      	ldr	r3, [r7, #16]
 8001a9c:	43db      	mvns	r3, r3
 8001a9e:	69ba      	ldr	r2, [r7, #24]
 8001aa0:	4013      	ands	r3, r2
 8001aa2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001aa4:	683b      	ldr	r3, [r7, #0]
 8001aa6:	685b      	ldr	r3, [r3, #4]
 8001aa8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d003      	beq.n	8001ab8 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8001ab0:	69ba      	ldr	r2, [r7, #24]
 8001ab2:	693b      	ldr	r3, [r7, #16]
 8001ab4:	4313      	orrs	r3, r2
 8001ab6:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8001ab8:	697b      	ldr	r3, [r7, #20]
 8001aba:	69ba      	ldr	r2, [r7, #24]
 8001abc:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8001abe:	697b      	ldr	r3, [r7, #20]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001ac4:	693b      	ldr	r3, [r7, #16]
 8001ac6:	43db      	mvns	r3, r3
 8001ac8:	69ba      	ldr	r2, [r7, #24]
 8001aca:	4013      	ands	r3, r2
 8001acc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001ace:	683b      	ldr	r3, [r7, #0]
 8001ad0:	685b      	ldr	r3, [r3, #4]
 8001ad2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d003      	beq.n	8001ae2 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8001ada:	69ba      	ldr	r2, [r7, #24]
 8001adc:	693b      	ldr	r3, [r7, #16]
 8001ade:	4313      	orrs	r3, r2
 8001ae0:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8001ae2:	697b      	ldr	r3, [r7, #20]
 8001ae4:	69ba      	ldr	r2, [r7, #24]
 8001ae6:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001ae8:	69fb      	ldr	r3, [r7, #28]
 8001aea:	3301      	adds	r3, #1
 8001aec:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001aee:	683b      	ldr	r3, [r7, #0]
 8001af0:	681a      	ldr	r2, [r3, #0]
 8001af2:	69fb      	ldr	r3, [r7, #28]
 8001af4:	fa22 f303 	lsr.w	r3, r2, r3
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	f47f ae63 	bne.w	80017c4 <HAL_GPIO_Init+0x14>
  }
}
 8001afe:	bf00      	nop
 8001b00:	bf00      	nop
 8001b02:	3724      	adds	r7, #36	@ 0x24
 8001b04:	46bd      	mov	sp, r7
 8001b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0a:	4770      	bx	lr
 8001b0c:	58000400 	.word	0x58000400

08001b10 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b10:	b480      	push	{r7}
 8001b12:	b083      	sub	sp, #12
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]
 8001b18:	460b      	mov	r3, r1
 8001b1a:	807b      	strh	r3, [r7, #2]
 8001b1c:	4613      	mov	r3, r2
 8001b1e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001b20:	787b      	ldrb	r3, [r7, #1]
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d003      	beq.n	8001b2e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001b26:	887a      	ldrh	r2, [r7, #2]
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8001b2c:	e003      	b.n	8001b36 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001b2e:	887b      	ldrh	r3, [r7, #2]
 8001b30:	041a      	lsls	r2, r3, #16
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	619a      	str	r2, [r3, #24]
}
 8001b36:	bf00      	nop
 8001b38:	370c      	adds	r7, #12
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b40:	4770      	bx	lr
	...

08001b44 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	b082      	sub	sp, #8
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d101      	bne.n	8001b56 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001b52:	2301      	movs	r3, #1
 8001b54:	e08b      	b.n	8001c6e <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001b5c:	b2db      	uxtb	r3, r3
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d106      	bne.n	8001b70 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	2200      	movs	r2, #0
 8001b66:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001b6a:	6878      	ldr	r0, [r7, #4]
 8001b6c:	f7ff f9e0 	bl	8000f30 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	2224      	movs	r2, #36	@ 0x24
 8001b74:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	681a      	ldr	r2, [r3, #0]
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	f022 0201 	bic.w	r2, r2, #1
 8001b86:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	685a      	ldr	r2, [r3, #4]
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001b94:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	689a      	ldr	r2, [r3, #8]
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001ba4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	68db      	ldr	r3, [r3, #12]
 8001baa:	2b01      	cmp	r3, #1
 8001bac:	d107      	bne.n	8001bbe <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	689a      	ldr	r2, [r3, #8]
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001bba:	609a      	str	r2, [r3, #8]
 8001bbc:	e006      	b.n	8001bcc <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	689a      	ldr	r2, [r3, #8]
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8001bca:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	68db      	ldr	r3, [r3, #12]
 8001bd0:	2b02      	cmp	r3, #2
 8001bd2:	d108      	bne.n	8001be6 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	685a      	ldr	r2, [r3, #4]
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001be2:	605a      	str	r2, [r3, #4]
 8001be4:	e007      	b.n	8001bf6 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	685a      	ldr	r2, [r3, #4]
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001bf4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	6859      	ldr	r1, [r3, #4]
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681a      	ldr	r2, [r3, #0]
 8001c00:	4b1d      	ldr	r3, [pc, #116]	@ (8001c78 <HAL_I2C_Init+0x134>)
 8001c02:	430b      	orrs	r3, r1
 8001c04:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	68da      	ldr	r2, [r3, #12]
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001c14:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	691a      	ldr	r2, [r3, #16]
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	695b      	ldr	r3, [r3, #20]
 8001c1e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	699b      	ldr	r3, [r3, #24]
 8001c26:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	430a      	orrs	r2, r1
 8001c2e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	69d9      	ldr	r1, [r3, #28]
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	6a1a      	ldr	r2, [r3, #32]
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	430a      	orrs	r2, r1
 8001c3e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	681a      	ldr	r2, [r3, #0]
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	f042 0201 	orr.w	r2, r2, #1
 8001c4e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	2200      	movs	r2, #0
 8001c54:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	2220      	movs	r2, #32
 8001c5a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	2200      	movs	r2, #0
 8001c62:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	2200      	movs	r2, #0
 8001c68:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8001c6c:	2300      	movs	r3, #0
}
 8001c6e:	4618      	mov	r0, r3
 8001c70:	3708      	adds	r7, #8
 8001c72:	46bd      	mov	sp, r7
 8001c74:	bd80      	pop	{r7, pc}
 8001c76:	bf00      	nop
 8001c78:	02008000 	.word	0x02008000

08001c7c <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	b088      	sub	sp, #32
 8001c80:	af02      	add	r7, sp, #8
 8001c82:	60f8      	str	r0, [r7, #12]
 8001c84:	4608      	mov	r0, r1
 8001c86:	4611      	mov	r1, r2
 8001c88:	461a      	mov	r2, r3
 8001c8a:	4603      	mov	r3, r0
 8001c8c:	817b      	strh	r3, [r7, #10]
 8001c8e:	460b      	mov	r3, r1
 8001c90:	813b      	strh	r3, [r7, #8]
 8001c92:	4613      	mov	r3, r2
 8001c94:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001c9c:	b2db      	uxtb	r3, r3
 8001c9e:	2b20      	cmp	r3, #32
 8001ca0:	f040 80f9 	bne.w	8001e96 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001ca4:	6a3b      	ldr	r3, [r7, #32]
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d002      	beq.n	8001cb0 <HAL_I2C_Mem_Write+0x34>
 8001caa:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d105      	bne.n	8001cbc <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001cb6:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8001cb8:	2301      	movs	r3, #1
 8001cba:	e0ed      	b.n	8001e98 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001cc2:	2b01      	cmp	r3, #1
 8001cc4:	d101      	bne.n	8001cca <HAL_I2C_Mem_Write+0x4e>
 8001cc6:	2302      	movs	r3, #2
 8001cc8:	e0e6      	b.n	8001e98 <HAL_I2C_Mem_Write+0x21c>
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	2201      	movs	r2, #1
 8001cce:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001cd2:	f7ff fbd5 	bl	8001480 <HAL_GetTick>
 8001cd6:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001cd8:	697b      	ldr	r3, [r7, #20]
 8001cda:	9300      	str	r3, [sp, #0]
 8001cdc:	2319      	movs	r3, #25
 8001cde:	2201      	movs	r2, #1
 8001ce0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001ce4:	68f8      	ldr	r0, [r7, #12]
 8001ce6:	f000 fac3 	bl	8002270 <I2C_WaitOnFlagUntilTimeout>
 8001cea:	4603      	mov	r3, r0
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d001      	beq.n	8001cf4 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8001cf0:	2301      	movs	r3, #1
 8001cf2:	e0d1      	b.n	8001e98 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	2221      	movs	r2, #33	@ 0x21
 8001cf8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	2240      	movs	r2, #64	@ 0x40
 8001d00:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	2200      	movs	r2, #0
 8001d08:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	6a3a      	ldr	r2, [r7, #32]
 8001d0e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8001d14:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	2200      	movs	r2, #0
 8001d1a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001d1c:	88f8      	ldrh	r0, [r7, #6]
 8001d1e:	893a      	ldrh	r2, [r7, #8]
 8001d20:	8979      	ldrh	r1, [r7, #10]
 8001d22:	697b      	ldr	r3, [r7, #20]
 8001d24:	9301      	str	r3, [sp, #4]
 8001d26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001d28:	9300      	str	r3, [sp, #0]
 8001d2a:	4603      	mov	r3, r0
 8001d2c:	68f8      	ldr	r0, [r7, #12]
 8001d2e:	f000 f9d3 	bl	80020d8 <I2C_RequestMemoryWrite>
 8001d32:	4603      	mov	r3, r0
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d005      	beq.n	8001d44 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8001d40:	2301      	movs	r3, #1
 8001d42:	e0a9      	b.n	8001e98 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001d48:	b29b      	uxth	r3, r3
 8001d4a:	2bff      	cmp	r3, #255	@ 0xff
 8001d4c:	d90e      	bls.n	8001d6c <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	22ff      	movs	r2, #255	@ 0xff
 8001d52:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001d58:	b2da      	uxtb	r2, r3
 8001d5a:	8979      	ldrh	r1, [r7, #10]
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	9300      	str	r3, [sp, #0]
 8001d60:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001d64:	68f8      	ldr	r0, [r7, #12]
 8001d66:	f000 fc47 	bl	80025f8 <I2C_TransferConfig>
 8001d6a:	e00f      	b.n	8001d8c <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001d70:	b29a      	uxth	r2, r3
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001d7a:	b2da      	uxtb	r2, r3
 8001d7c:	8979      	ldrh	r1, [r7, #10]
 8001d7e:	2300      	movs	r3, #0
 8001d80:	9300      	str	r3, [sp, #0]
 8001d82:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001d86:	68f8      	ldr	r0, [r7, #12]
 8001d88:	f000 fc36 	bl	80025f8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001d8c:	697a      	ldr	r2, [r7, #20]
 8001d8e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001d90:	68f8      	ldr	r0, [r7, #12]
 8001d92:	f000 fac6 	bl	8002322 <I2C_WaitOnTXISFlagUntilTimeout>
 8001d96:	4603      	mov	r3, r0
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d001      	beq.n	8001da0 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8001d9c:	2301      	movs	r3, #1
 8001d9e:	e07b      	b.n	8001e98 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001da4:	781a      	ldrb	r2, [r3, #0]
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001db0:	1c5a      	adds	r2, r3, #1
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001dba:	b29b      	uxth	r3, r3
 8001dbc:	3b01      	subs	r3, #1
 8001dbe:	b29a      	uxth	r2, r3
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001dc8:	3b01      	subs	r3, #1
 8001dca:	b29a      	uxth	r2, r3
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001dd4:	b29b      	uxth	r3, r3
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d034      	beq.n	8001e44 <HAL_I2C_Mem_Write+0x1c8>
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d130      	bne.n	8001e44 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001de2:	697b      	ldr	r3, [r7, #20]
 8001de4:	9300      	str	r3, [sp, #0]
 8001de6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001de8:	2200      	movs	r2, #0
 8001dea:	2180      	movs	r1, #128	@ 0x80
 8001dec:	68f8      	ldr	r0, [r7, #12]
 8001dee:	f000 fa3f 	bl	8002270 <I2C_WaitOnFlagUntilTimeout>
 8001df2:	4603      	mov	r3, r0
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d001      	beq.n	8001dfc <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8001df8:	2301      	movs	r3, #1
 8001dfa:	e04d      	b.n	8001e98 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001e00:	b29b      	uxth	r3, r3
 8001e02:	2bff      	cmp	r3, #255	@ 0xff
 8001e04:	d90e      	bls.n	8001e24 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	22ff      	movs	r2, #255	@ 0xff
 8001e0a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001e10:	b2da      	uxtb	r2, r3
 8001e12:	8979      	ldrh	r1, [r7, #10]
 8001e14:	2300      	movs	r3, #0
 8001e16:	9300      	str	r3, [sp, #0]
 8001e18:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001e1c:	68f8      	ldr	r0, [r7, #12]
 8001e1e:	f000 fbeb 	bl	80025f8 <I2C_TransferConfig>
 8001e22:	e00f      	b.n	8001e44 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001e28:	b29a      	uxth	r2, r3
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001e32:	b2da      	uxtb	r2, r3
 8001e34:	8979      	ldrh	r1, [r7, #10]
 8001e36:	2300      	movs	r3, #0
 8001e38:	9300      	str	r3, [sp, #0]
 8001e3a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001e3e:	68f8      	ldr	r0, [r7, #12]
 8001e40:	f000 fbda 	bl	80025f8 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001e48:	b29b      	uxth	r3, r3
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d19e      	bne.n	8001d8c <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001e4e:	697a      	ldr	r2, [r7, #20]
 8001e50:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001e52:	68f8      	ldr	r0, [r7, #12]
 8001e54:	f000 faac 	bl	80023b0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001e58:	4603      	mov	r3, r0
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d001      	beq.n	8001e62 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8001e5e:	2301      	movs	r3, #1
 8001e60:	e01a      	b.n	8001e98 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	2220      	movs	r2, #32
 8001e68:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	6859      	ldr	r1, [r3, #4]
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	681a      	ldr	r2, [r3, #0]
 8001e74:	4b0a      	ldr	r3, [pc, #40]	@ (8001ea0 <HAL_I2C_Mem_Write+0x224>)
 8001e76:	400b      	ands	r3, r1
 8001e78:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	2220      	movs	r2, #32
 8001e7e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	2200      	movs	r2, #0
 8001e86:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8001e92:	2300      	movs	r3, #0
 8001e94:	e000      	b.n	8001e98 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8001e96:	2302      	movs	r3, #2
  }
}
 8001e98:	4618      	mov	r0, r3
 8001e9a:	3718      	adds	r7, #24
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	bd80      	pop	{r7, pc}
 8001ea0:	fe00e800 	.word	0xfe00e800

08001ea4 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b088      	sub	sp, #32
 8001ea8:	af02      	add	r7, sp, #8
 8001eaa:	60f8      	str	r0, [r7, #12]
 8001eac:	4608      	mov	r0, r1
 8001eae:	4611      	mov	r1, r2
 8001eb0:	461a      	mov	r2, r3
 8001eb2:	4603      	mov	r3, r0
 8001eb4:	817b      	strh	r3, [r7, #10]
 8001eb6:	460b      	mov	r3, r1
 8001eb8:	813b      	strh	r3, [r7, #8]
 8001eba:	4613      	mov	r3, r2
 8001ebc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001ec4:	b2db      	uxtb	r3, r3
 8001ec6:	2b20      	cmp	r3, #32
 8001ec8:	f040 80fd 	bne.w	80020c6 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8001ecc:	6a3b      	ldr	r3, [r7, #32]
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d002      	beq.n	8001ed8 <HAL_I2C_Mem_Read+0x34>
 8001ed2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d105      	bne.n	8001ee4 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001ede:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8001ee0:	2301      	movs	r3, #1
 8001ee2:	e0f1      	b.n	80020c8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001eea:	2b01      	cmp	r3, #1
 8001eec:	d101      	bne.n	8001ef2 <HAL_I2C_Mem_Read+0x4e>
 8001eee:	2302      	movs	r3, #2
 8001ef0:	e0ea      	b.n	80020c8 <HAL_I2C_Mem_Read+0x224>
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	2201      	movs	r2, #1
 8001ef6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001efa:	f7ff fac1 	bl	8001480 <HAL_GetTick>
 8001efe:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001f00:	697b      	ldr	r3, [r7, #20]
 8001f02:	9300      	str	r3, [sp, #0]
 8001f04:	2319      	movs	r3, #25
 8001f06:	2201      	movs	r2, #1
 8001f08:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001f0c:	68f8      	ldr	r0, [r7, #12]
 8001f0e:	f000 f9af 	bl	8002270 <I2C_WaitOnFlagUntilTimeout>
 8001f12:	4603      	mov	r3, r0
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d001      	beq.n	8001f1c <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8001f18:	2301      	movs	r3, #1
 8001f1a:	e0d5      	b.n	80020c8 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	2222      	movs	r2, #34	@ 0x22
 8001f20:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	2240      	movs	r2, #64	@ 0x40
 8001f28:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	2200      	movs	r2, #0
 8001f30:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	6a3a      	ldr	r2, [r7, #32]
 8001f36:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8001f3c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	2200      	movs	r2, #0
 8001f42:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001f44:	88f8      	ldrh	r0, [r7, #6]
 8001f46:	893a      	ldrh	r2, [r7, #8]
 8001f48:	8979      	ldrh	r1, [r7, #10]
 8001f4a:	697b      	ldr	r3, [r7, #20]
 8001f4c:	9301      	str	r3, [sp, #4]
 8001f4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001f50:	9300      	str	r3, [sp, #0]
 8001f52:	4603      	mov	r3, r0
 8001f54:	68f8      	ldr	r0, [r7, #12]
 8001f56:	f000 f913 	bl	8002180 <I2C_RequestMemoryRead>
 8001f5a:	4603      	mov	r3, r0
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d005      	beq.n	8001f6c <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	2200      	movs	r2, #0
 8001f64:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8001f68:	2301      	movs	r3, #1
 8001f6a:	e0ad      	b.n	80020c8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001f70:	b29b      	uxth	r3, r3
 8001f72:	2bff      	cmp	r3, #255	@ 0xff
 8001f74:	d90e      	bls.n	8001f94 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	22ff      	movs	r2, #255	@ 0xff
 8001f7a:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001f80:	b2da      	uxtb	r2, r3
 8001f82:	8979      	ldrh	r1, [r7, #10]
 8001f84:	4b52      	ldr	r3, [pc, #328]	@ (80020d0 <HAL_I2C_Mem_Read+0x22c>)
 8001f86:	9300      	str	r3, [sp, #0]
 8001f88:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001f8c:	68f8      	ldr	r0, [r7, #12]
 8001f8e:	f000 fb33 	bl	80025f8 <I2C_TransferConfig>
 8001f92:	e00f      	b.n	8001fb4 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001f98:	b29a      	uxth	r2, r3
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001fa2:	b2da      	uxtb	r2, r3
 8001fa4:	8979      	ldrh	r1, [r7, #10]
 8001fa6:	4b4a      	ldr	r3, [pc, #296]	@ (80020d0 <HAL_I2C_Mem_Read+0x22c>)
 8001fa8:	9300      	str	r3, [sp, #0]
 8001faa:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001fae:	68f8      	ldr	r0, [r7, #12]
 8001fb0:	f000 fb22 	bl	80025f8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8001fb4:	697b      	ldr	r3, [r7, #20]
 8001fb6:	9300      	str	r3, [sp, #0]
 8001fb8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001fba:	2200      	movs	r2, #0
 8001fbc:	2104      	movs	r1, #4
 8001fbe:	68f8      	ldr	r0, [r7, #12]
 8001fc0:	f000 f956 	bl	8002270 <I2C_WaitOnFlagUntilTimeout>
 8001fc4:	4603      	mov	r3, r0
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d001      	beq.n	8001fce <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8001fca:	2301      	movs	r3, #1
 8001fcc:	e07c      	b.n	80020c8 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fd8:	b2d2      	uxtb	r2, r2
 8001fda:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fe0:	1c5a      	adds	r2, r3, #1
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001fea:	3b01      	subs	r3, #1
 8001fec:	b29a      	uxth	r2, r3
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001ff6:	b29b      	uxth	r3, r3
 8001ff8:	3b01      	subs	r3, #1
 8001ffa:	b29a      	uxth	r2, r3
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002004:	b29b      	uxth	r3, r3
 8002006:	2b00      	cmp	r3, #0
 8002008:	d034      	beq.n	8002074 <HAL_I2C_Mem_Read+0x1d0>
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800200e:	2b00      	cmp	r3, #0
 8002010:	d130      	bne.n	8002074 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002012:	697b      	ldr	r3, [r7, #20]
 8002014:	9300      	str	r3, [sp, #0]
 8002016:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002018:	2200      	movs	r2, #0
 800201a:	2180      	movs	r1, #128	@ 0x80
 800201c:	68f8      	ldr	r0, [r7, #12]
 800201e:	f000 f927 	bl	8002270 <I2C_WaitOnFlagUntilTimeout>
 8002022:	4603      	mov	r3, r0
 8002024:	2b00      	cmp	r3, #0
 8002026:	d001      	beq.n	800202c <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8002028:	2301      	movs	r3, #1
 800202a:	e04d      	b.n	80020c8 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002030:	b29b      	uxth	r3, r3
 8002032:	2bff      	cmp	r3, #255	@ 0xff
 8002034:	d90e      	bls.n	8002054 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	22ff      	movs	r2, #255	@ 0xff
 800203a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002040:	b2da      	uxtb	r2, r3
 8002042:	8979      	ldrh	r1, [r7, #10]
 8002044:	2300      	movs	r3, #0
 8002046:	9300      	str	r3, [sp, #0]
 8002048:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800204c:	68f8      	ldr	r0, [r7, #12]
 800204e:	f000 fad3 	bl	80025f8 <I2C_TransferConfig>
 8002052:	e00f      	b.n	8002074 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002058:	b29a      	uxth	r2, r3
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002062:	b2da      	uxtb	r2, r3
 8002064:	8979      	ldrh	r1, [r7, #10]
 8002066:	2300      	movs	r3, #0
 8002068:	9300      	str	r3, [sp, #0]
 800206a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800206e:	68f8      	ldr	r0, [r7, #12]
 8002070:	f000 fac2 	bl	80025f8 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002078:	b29b      	uxth	r3, r3
 800207a:	2b00      	cmp	r3, #0
 800207c:	d19a      	bne.n	8001fb4 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800207e:	697a      	ldr	r2, [r7, #20]
 8002080:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002082:	68f8      	ldr	r0, [r7, #12]
 8002084:	f000 f994 	bl	80023b0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002088:	4603      	mov	r3, r0
 800208a:	2b00      	cmp	r3, #0
 800208c:	d001      	beq.n	8002092 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800208e:	2301      	movs	r3, #1
 8002090:	e01a      	b.n	80020c8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	2220      	movs	r2, #32
 8002098:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	6859      	ldr	r1, [r3, #4]
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	681a      	ldr	r2, [r3, #0]
 80020a4:	4b0b      	ldr	r3, [pc, #44]	@ (80020d4 <HAL_I2C_Mem_Read+0x230>)
 80020a6:	400b      	ands	r3, r1
 80020a8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	2220      	movs	r2, #32
 80020ae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	2200      	movs	r2, #0
 80020b6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	2200      	movs	r2, #0
 80020be:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80020c2:	2300      	movs	r3, #0
 80020c4:	e000      	b.n	80020c8 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80020c6:	2302      	movs	r3, #2
  }
}
 80020c8:	4618      	mov	r0, r3
 80020ca:	3718      	adds	r7, #24
 80020cc:	46bd      	mov	sp, r7
 80020ce:	bd80      	pop	{r7, pc}
 80020d0:	80002400 	.word	0x80002400
 80020d4:	fe00e800 	.word	0xfe00e800

080020d8 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80020d8:	b580      	push	{r7, lr}
 80020da:	b086      	sub	sp, #24
 80020dc:	af02      	add	r7, sp, #8
 80020de:	60f8      	str	r0, [r7, #12]
 80020e0:	4608      	mov	r0, r1
 80020e2:	4611      	mov	r1, r2
 80020e4:	461a      	mov	r2, r3
 80020e6:	4603      	mov	r3, r0
 80020e8:	817b      	strh	r3, [r7, #10]
 80020ea:	460b      	mov	r3, r1
 80020ec:	813b      	strh	r3, [r7, #8]
 80020ee:	4613      	mov	r3, r2
 80020f0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80020f2:	88fb      	ldrh	r3, [r7, #6]
 80020f4:	b2da      	uxtb	r2, r3
 80020f6:	8979      	ldrh	r1, [r7, #10]
 80020f8:	4b20      	ldr	r3, [pc, #128]	@ (800217c <I2C_RequestMemoryWrite+0xa4>)
 80020fa:	9300      	str	r3, [sp, #0]
 80020fc:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002100:	68f8      	ldr	r0, [r7, #12]
 8002102:	f000 fa79 	bl	80025f8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002106:	69fa      	ldr	r2, [r7, #28]
 8002108:	69b9      	ldr	r1, [r7, #24]
 800210a:	68f8      	ldr	r0, [r7, #12]
 800210c:	f000 f909 	bl	8002322 <I2C_WaitOnTXISFlagUntilTimeout>
 8002110:	4603      	mov	r3, r0
 8002112:	2b00      	cmp	r3, #0
 8002114:	d001      	beq.n	800211a <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8002116:	2301      	movs	r3, #1
 8002118:	e02c      	b.n	8002174 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800211a:	88fb      	ldrh	r3, [r7, #6]
 800211c:	2b01      	cmp	r3, #1
 800211e:	d105      	bne.n	800212c <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002120:	893b      	ldrh	r3, [r7, #8]
 8002122:	b2da      	uxtb	r2, r3
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	629a      	str	r2, [r3, #40]	@ 0x28
 800212a:	e015      	b.n	8002158 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800212c:	893b      	ldrh	r3, [r7, #8]
 800212e:	0a1b      	lsrs	r3, r3, #8
 8002130:	b29b      	uxth	r3, r3
 8002132:	b2da      	uxtb	r2, r3
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800213a:	69fa      	ldr	r2, [r7, #28]
 800213c:	69b9      	ldr	r1, [r7, #24]
 800213e:	68f8      	ldr	r0, [r7, #12]
 8002140:	f000 f8ef 	bl	8002322 <I2C_WaitOnTXISFlagUntilTimeout>
 8002144:	4603      	mov	r3, r0
 8002146:	2b00      	cmp	r3, #0
 8002148:	d001      	beq.n	800214e <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800214a:	2301      	movs	r3, #1
 800214c:	e012      	b.n	8002174 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800214e:	893b      	ldrh	r3, [r7, #8]
 8002150:	b2da      	uxtb	r2, r3
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8002158:	69fb      	ldr	r3, [r7, #28]
 800215a:	9300      	str	r3, [sp, #0]
 800215c:	69bb      	ldr	r3, [r7, #24]
 800215e:	2200      	movs	r2, #0
 8002160:	2180      	movs	r1, #128	@ 0x80
 8002162:	68f8      	ldr	r0, [r7, #12]
 8002164:	f000 f884 	bl	8002270 <I2C_WaitOnFlagUntilTimeout>
 8002168:	4603      	mov	r3, r0
 800216a:	2b00      	cmp	r3, #0
 800216c:	d001      	beq.n	8002172 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800216e:	2301      	movs	r3, #1
 8002170:	e000      	b.n	8002174 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8002172:	2300      	movs	r3, #0
}
 8002174:	4618      	mov	r0, r3
 8002176:	3710      	adds	r7, #16
 8002178:	46bd      	mov	sp, r7
 800217a:	bd80      	pop	{r7, pc}
 800217c:	80002000 	.word	0x80002000

08002180 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8002180:	b580      	push	{r7, lr}
 8002182:	b086      	sub	sp, #24
 8002184:	af02      	add	r7, sp, #8
 8002186:	60f8      	str	r0, [r7, #12]
 8002188:	4608      	mov	r0, r1
 800218a:	4611      	mov	r1, r2
 800218c:	461a      	mov	r2, r3
 800218e:	4603      	mov	r3, r0
 8002190:	817b      	strh	r3, [r7, #10]
 8002192:	460b      	mov	r3, r1
 8002194:	813b      	strh	r3, [r7, #8]
 8002196:	4613      	mov	r3, r2
 8002198:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800219a:	88fb      	ldrh	r3, [r7, #6]
 800219c:	b2da      	uxtb	r2, r3
 800219e:	8979      	ldrh	r1, [r7, #10]
 80021a0:	4b20      	ldr	r3, [pc, #128]	@ (8002224 <I2C_RequestMemoryRead+0xa4>)
 80021a2:	9300      	str	r3, [sp, #0]
 80021a4:	2300      	movs	r3, #0
 80021a6:	68f8      	ldr	r0, [r7, #12]
 80021a8:	f000 fa26 	bl	80025f8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80021ac:	69fa      	ldr	r2, [r7, #28]
 80021ae:	69b9      	ldr	r1, [r7, #24]
 80021b0:	68f8      	ldr	r0, [r7, #12]
 80021b2:	f000 f8b6 	bl	8002322 <I2C_WaitOnTXISFlagUntilTimeout>
 80021b6:	4603      	mov	r3, r0
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d001      	beq.n	80021c0 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80021bc:	2301      	movs	r3, #1
 80021be:	e02c      	b.n	800221a <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80021c0:	88fb      	ldrh	r3, [r7, #6]
 80021c2:	2b01      	cmp	r3, #1
 80021c4:	d105      	bne.n	80021d2 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80021c6:	893b      	ldrh	r3, [r7, #8]
 80021c8:	b2da      	uxtb	r2, r3
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	629a      	str	r2, [r3, #40]	@ 0x28
 80021d0:	e015      	b.n	80021fe <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80021d2:	893b      	ldrh	r3, [r7, #8]
 80021d4:	0a1b      	lsrs	r3, r3, #8
 80021d6:	b29b      	uxth	r3, r3
 80021d8:	b2da      	uxtb	r2, r3
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80021e0:	69fa      	ldr	r2, [r7, #28]
 80021e2:	69b9      	ldr	r1, [r7, #24]
 80021e4:	68f8      	ldr	r0, [r7, #12]
 80021e6:	f000 f89c 	bl	8002322 <I2C_WaitOnTXISFlagUntilTimeout>
 80021ea:	4603      	mov	r3, r0
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d001      	beq.n	80021f4 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80021f0:	2301      	movs	r3, #1
 80021f2:	e012      	b.n	800221a <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80021f4:	893b      	ldrh	r3, [r7, #8]
 80021f6:	b2da      	uxtb	r2, r3
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80021fe:	69fb      	ldr	r3, [r7, #28]
 8002200:	9300      	str	r3, [sp, #0]
 8002202:	69bb      	ldr	r3, [r7, #24]
 8002204:	2200      	movs	r2, #0
 8002206:	2140      	movs	r1, #64	@ 0x40
 8002208:	68f8      	ldr	r0, [r7, #12]
 800220a:	f000 f831 	bl	8002270 <I2C_WaitOnFlagUntilTimeout>
 800220e:	4603      	mov	r3, r0
 8002210:	2b00      	cmp	r3, #0
 8002212:	d001      	beq.n	8002218 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8002214:	2301      	movs	r3, #1
 8002216:	e000      	b.n	800221a <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8002218:	2300      	movs	r3, #0
}
 800221a:	4618      	mov	r0, r3
 800221c:	3710      	adds	r7, #16
 800221e:	46bd      	mov	sp, r7
 8002220:	bd80      	pop	{r7, pc}
 8002222:	bf00      	nop
 8002224:	80002000 	.word	0x80002000

08002228 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002228:	b480      	push	{r7}
 800222a:	b083      	sub	sp, #12
 800222c:	af00      	add	r7, sp, #0
 800222e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	699b      	ldr	r3, [r3, #24]
 8002236:	f003 0302 	and.w	r3, r3, #2
 800223a:	2b02      	cmp	r3, #2
 800223c:	d103      	bne.n	8002246 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	2200      	movs	r2, #0
 8002244:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	699b      	ldr	r3, [r3, #24]
 800224c:	f003 0301 	and.w	r3, r3, #1
 8002250:	2b01      	cmp	r3, #1
 8002252:	d007      	beq.n	8002264 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	699a      	ldr	r2, [r3, #24]
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f042 0201 	orr.w	r2, r2, #1
 8002262:	619a      	str	r2, [r3, #24]
  }
}
 8002264:	bf00      	nop
 8002266:	370c      	adds	r7, #12
 8002268:	46bd      	mov	sp, r7
 800226a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226e:	4770      	bx	lr

08002270 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002270:	b580      	push	{r7, lr}
 8002272:	b084      	sub	sp, #16
 8002274:	af00      	add	r7, sp, #0
 8002276:	60f8      	str	r0, [r7, #12]
 8002278:	60b9      	str	r1, [r7, #8]
 800227a:	603b      	str	r3, [r7, #0]
 800227c:	4613      	mov	r3, r2
 800227e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002280:	e03b      	b.n	80022fa <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002282:	69ba      	ldr	r2, [r7, #24]
 8002284:	6839      	ldr	r1, [r7, #0]
 8002286:	68f8      	ldr	r0, [r7, #12]
 8002288:	f000 f8d6 	bl	8002438 <I2C_IsErrorOccurred>
 800228c:	4603      	mov	r3, r0
 800228e:	2b00      	cmp	r3, #0
 8002290:	d001      	beq.n	8002296 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8002292:	2301      	movs	r3, #1
 8002294:	e041      	b.n	800231a <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002296:	683b      	ldr	r3, [r7, #0]
 8002298:	f1b3 3fff 	cmp.w	r3, #4294967295
 800229c:	d02d      	beq.n	80022fa <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800229e:	f7ff f8ef 	bl	8001480 <HAL_GetTick>
 80022a2:	4602      	mov	r2, r0
 80022a4:	69bb      	ldr	r3, [r7, #24]
 80022a6:	1ad3      	subs	r3, r2, r3
 80022a8:	683a      	ldr	r2, [r7, #0]
 80022aa:	429a      	cmp	r2, r3
 80022ac:	d302      	bcc.n	80022b4 <I2C_WaitOnFlagUntilTimeout+0x44>
 80022ae:	683b      	ldr	r3, [r7, #0]
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d122      	bne.n	80022fa <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	699a      	ldr	r2, [r3, #24]
 80022ba:	68bb      	ldr	r3, [r7, #8]
 80022bc:	4013      	ands	r3, r2
 80022be:	68ba      	ldr	r2, [r7, #8]
 80022c0:	429a      	cmp	r2, r3
 80022c2:	bf0c      	ite	eq
 80022c4:	2301      	moveq	r3, #1
 80022c6:	2300      	movne	r3, #0
 80022c8:	b2db      	uxtb	r3, r3
 80022ca:	461a      	mov	r2, r3
 80022cc:	79fb      	ldrb	r3, [r7, #7]
 80022ce:	429a      	cmp	r2, r3
 80022d0:	d113      	bne.n	80022fa <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022d6:	f043 0220 	orr.w	r2, r3, #32
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	2220      	movs	r2, #32
 80022e2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	2200      	movs	r2, #0
 80022ea:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	2200      	movs	r2, #0
 80022f2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 80022f6:	2301      	movs	r3, #1
 80022f8:	e00f      	b.n	800231a <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	699a      	ldr	r2, [r3, #24]
 8002300:	68bb      	ldr	r3, [r7, #8]
 8002302:	4013      	ands	r3, r2
 8002304:	68ba      	ldr	r2, [r7, #8]
 8002306:	429a      	cmp	r2, r3
 8002308:	bf0c      	ite	eq
 800230a:	2301      	moveq	r3, #1
 800230c:	2300      	movne	r3, #0
 800230e:	b2db      	uxtb	r3, r3
 8002310:	461a      	mov	r2, r3
 8002312:	79fb      	ldrb	r3, [r7, #7]
 8002314:	429a      	cmp	r2, r3
 8002316:	d0b4      	beq.n	8002282 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002318:	2300      	movs	r3, #0
}
 800231a:	4618      	mov	r0, r3
 800231c:	3710      	adds	r7, #16
 800231e:	46bd      	mov	sp, r7
 8002320:	bd80      	pop	{r7, pc}

08002322 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002322:	b580      	push	{r7, lr}
 8002324:	b084      	sub	sp, #16
 8002326:	af00      	add	r7, sp, #0
 8002328:	60f8      	str	r0, [r7, #12]
 800232a:	60b9      	str	r1, [r7, #8]
 800232c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800232e:	e033      	b.n	8002398 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002330:	687a      	ldr	r2, [r7, #4]
 8002332:	68b9      	ldr	r1, [r7, #8]
 8002334:	68f8      	ldr	r0, [r7, #12]
 8002336:	f000 f87f 	bl	8002438 <I2C_IsErrorOccurred>
 800233a:	4603      	mov	r3, r0
 800233c:	2b00      	cmp	r3, #0
 800233e:	d001      	beq.n	8002344 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002340:	2301      	movs	r3, #1
 8002342:	e031      	b.n	80023a8 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002344:	68bb      	ldr	r3, [r7, #8]
 8002346:	f1b3 3fff 	cmp.w	r3, #4294967295
 800234a:	d025      	beq.n	8002398 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800234c:	f7ff f898 	bl	8001480 <HAL_GetTick>
 8002350:	4602      	mov	r2, r0
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	1ad3      	subs	r3, r2, r3
 8002356:	68ba      	ldr	r2, [r7, #8]
 8002358:	429a      	cmp	r2, r3
 800235a:	d302      	bcc.n	8002362 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800235c:	68bb      	ldr	r3, [r7, #8]
 800235e:	2b00      	cmp	r3, #0
 8002360:	d11a      	bne.n	8002398 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	699b      	ldr	r3, [r3, #24]
 8002368:	f003 0302 	and.w	r3, r3, #2
 800236c:	2b02      	cmp	r3, #2
 800236e:	d013      	beq.n	8002398 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002374:	f043 0220 	orr.w	r2, r3, #32
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	2220      	movs	r2, #32
 8002380:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	2200      	movs	r2, #0
 8002388:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	2200      	movs	r2, #0
 8002390:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8002394:	2301      	movs	r3, #1
 8002396:	e007      	b.n	80023a8 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	699b      	ldr	r3, [r3, #24]
 800239e:	f003 0302 	and.w	r3, r3, #2
 80023a2:	2b02      	cmp	r3, #2
 80023a4:	d1c4      	bne.n	8002330 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80023a6:	2300      	movs	r3, #0
}
 80023a8:	4618      	mov	r0, r3
 80023aa:	3710      	adds	r7, #16
 80023ac:	46bd      	mov	sp, r7
 80023ae:	bd80      	pop	{r7, pc}

080023b0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80023b0:	b580      	push	{r7, lr}
 80023b2:	b084      	sub	sp, #16
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	60f8      	str	r0, [r7, #12]
 80023b8:	60b9      	str	r1, [r7, #8]
 80023ba:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80023bc:	e02f      	b.n	800241e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80023be:	687a      	ldr	r2, [r7, #4]
 80023c0:	68b9      	ldr	r1, [r7, #8]
 80023c2:	68f8      	ldr	r0, [r7, #12]
 80023c4:	f000 f838 	bl	8002438 <I2C_IsErrorOccurred>
 80023c8:	4603      	mov	r3, r0
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d001      	beq.n	80023d2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80023ce:	2301      	movs	r3, #1
 80023d0:	e02d      	b.n	800242e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80023d2:	f7ff f855 	bl	8001480 <HAL_GetTick>
 80023d6:	4602      	mov	r2, r0
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	1ad3      	subs	r3, r2, r3
 80023dc:	68ba      	ldr	r2, [r7, #8]
 80023de:	429a      	cmp	r2, r3
 80023e0:	d302      	bcc.n	80023e8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80023e2:	68bb      	ldr	r3, [r7, #8]
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d11a      	bne.n	800241e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	699b      	ldr	r3, [r3, #24]
 80023ee:	f003 0320 	and.w	r3, r3, #32
 80023f2:	2b20      	cmp	r3, #32
 80023f4:	d013      	beq.n	800241e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023fa:	f043 0220 	orr.w	r2, r3, #32
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	2220      	movs	r2, #32
 8002406:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	2200      	movs	r2, #0
 800240e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	2200      	movs	r2, #0
 8002416:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 800241a:	2301      	movs	r3, #1
 800241c:	e007      	b.n	800242e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	699b      	ldr	r3, [r3, #24]
 8002424:	f003 0320 	and.w	r3, r3, #32
 8002428:	2b20      	cmp	r3, #32
 800242a:	d1c8      	bne.n	80023be <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800242c:	2300      	movs	r3, #0
}
 800242e:	4618      	mov	r0, r3
 8002430:	3710      	adds	r7, #16
 8002432:	46bd      	mov	sp, r7
 8002434:	bd80      	pop	{r7, pc}
	...

08002438 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002438:	b580      	push	{r7, lr}
 800243a:	b08a      	sub	sp, #40	@ 0x28
 800243c:	af00      	add	r7, sp, #0
 800243e:	60f8      	str	r0, [r7, #12]
 8002440:	60b9      	str	r1, [r7, #8]
 8002442:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002444:	2300      	movs	r3, #0
 8002446:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	699b      	ldr	r3, [r3, #24]
 8002450:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8002452:	2300      	movs	r3, #0
 8002454:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800245a:	69bb      	ldr	r3, [r7, #24]
 800245c:	f003 0310 	and.w	r3, r3, #16
 8002460:	2b00      	cmp	r3, #0
 8002462:	d068      	beq.n	8002536 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	2210      	movs	r2, #16
 800246a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800246c:	e049      	b.n	8002502 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800246e:	68bb      	ldr	r3, [r7, #8]
 8002470:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002474:	d045      	beq.n	8002502 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002476:	f7ff f803 	bl	8001480 <HAL_GetTick>
 800247a:	4602      	mov	r2, r0
 800247c:	69fb      	ldr	r3, [r7, #28]
 800247e:	1ad3      	subs	r3, r2, r3
 8002480:	68ba      	ldr	r2, [r7, #8]
 8002482:	429a      	cmp	r2, r3
 8002484:	d302      	bcc.n	800248c <I2C_IsErrorOccurred+0x54>
 8002486:	68bb      	ldr	r3, [r7, #8]
 8002488:	2b00      	cmp	r3, #0
 800248a:	d13a      	bne.n	8002502 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	685b      	ldr	r3, [r3, #4]
 8002492:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002496:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800249e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	699b      	ldr	r3, [r3, #24]
 80024a6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80024aa:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80024ae:	d121      	bne.n	80024f4 <I2C_IsErrorOccurred+0xbc>
 80024b0:	697b      	ldr	r3, [r7, #20]
 80024b2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80024b6:	d01d      	beq.n	80024f4 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80024b8:	7cfb      	ldrb	r3, [r7, #19]
 80024ba:	2b20      	cmp	r3, #32
 80024bc:	d01a      	beq.n	80024f4 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	685a      	ldr	r2, [r3, #4]
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80024cc:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80024ce:	f7fe ffd7 	bl	8001480 <HAL_GetTick>
 80024d2:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80024d4:	e00e      	b.n	80024f4 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80024d6:	f7fe ffd3 	bl	8001480 <HAL_GetTick>
 80024da:	4602      	mov	r2, r0
 80024dc:	69fb      	ldr	r3, [r7, #28]
 80024de:	1ad3      	subs	r3, r2, r3
 80024e0:	2b19      	cmp	r3, #25
 80024e2:	d907      	bls.n	80024f4 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80024e4:	6a3b      	ldr	r3, [r7, #32]
 80024e6:	f043 0320 	orr.w	r3, r3, #32
 80024ea:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80024ec:	2301      	movs	r3, #1
 80024ee:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 80024f2:	e006      	b.n	8002502 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	699b      	ldr	r3, [r3, #24]
 80024fa:	f003 0320 	and.w	r3, r3, #32
 80024fe:	2b20      	cmp	r3, #32
 8002500:	d1e9      	bne.n	80024d6 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	699b      	ldr	r3, [r3, #24]
 8002508:	f003 0320 	and.w	r3, r3, #32
 800250c:	2b20      	cmp	r3, #32
 800250e:	d003      	beq.n	8002518 <I2C_IsErrorOccurred+0xe0>
 8002510:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002514:	2b00      	cmp	r3, #0
 8002516:	d0aa      	beq.n	800246e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8002518:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800251c:	2b00      	cmp	r3, #0
 800251e:	d103      	bne.n	8002528 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	2220      	movs	r2, #32
 8002526:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8002528:	6a3b      	ldr	r3, [r7, #32]
 800252a:	f043 0304 	orr.w	r3, r3, #4
 800252e:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002530:	2301      	movs	r3, #1
 8002532:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	699b      	ldr	r3, [r3, #24]
 800253c:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800253e:	69bb      	ldr	r3, [r7, #24]
 8002540:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002544:	2b00      	cmp	r3, #0
 8002546:	d00b      	beq.n	8002560 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8002548:	6a3b      	ldr	r3, [r7, #32]
 800254a:	f043 0301 	orr.w	r3, r3, #1
 800254e:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002558:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800255a:	2301      	movs	r3, #1
 800255c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002560:	69bb      	ldr	r3, [r7, #24]
 8002562:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002566:	2b00      	cmp	r3, #0
 8002568:	d00b      	beq.n	8002582 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800256a:	6a3b      	ldr	r3, [r7, #32]
 800256c:	f043 0308 	orr.w	r3, r3, #8
 8002570:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800257a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800257c:	2301      	movs	r3, #1
 800257e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002582:	69bb      	ldr	r3, [r7, #24]
 8002584:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002588:	2b00      	cmp	r3, #0
 800258a:	d00b      	beq.n	80025a4 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800258c:	6a3b      	ldr	r3, [r7, #32]
 800258e:	f043 0302 	orr.w	r3, r3, #2
 8002592:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800259c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800259e:	2301      	movs	r3, #1
 80025a0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 80025a4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d01c      	beq.n	80025e6 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80025ac:	68f8      	ldr	r0, [r7, #12]
 80025ae:	f7ff fe3b 	bl	8002228 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	6859      	ldr	r1, [r3, #4]
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	681a      	ldr	r2, [r3, #0]
 80025bc:	4b0d      	ldr	r3, [pc, #52]	@ (80025f4 <I2C_IsErrorOccurred+0x1bc>)
 80025be:	400b      	ands	r3, r1
 80025c0:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80025c6:	6a3b      	ldr	r3, [r7, #32]
 80025c8:	431a      	orrs	r2, r3
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	2220      	movs	r2, #32
 80025d2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	2200      	movs	r2, #0
 80025da:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	2200      	movs	r2, #0
 80025e2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 80025e6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80025ea:	4618      	mov	r0, r3
 80025ec:	3728      	adds	r7, #40	@ 0x28
 80025ee:	46bd      	mov	sp, r7
 80025f0:	bd80      	pop	{r7, pc}
 80025f2:	bf00      	nop
 80025f4:	fe00e800 	.word	0xfe00e800

080025f8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80025f8:	b480      	push	{r7}
 80025fa:	b087      	sub	sp, #28
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	60f8      	str	r0, [r7, #12]
 8002600:	607b      	str	r3, [r7, #4]
 8002602:	460b      	mov	r3, r1
 8002604:	817b      	strh	r3, [r7, #10]
 8002606:	4613      	mov	r3, r2
 8002608:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800260a:	897b      	ldrh	r3, [r7, #10]
 800260c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002610:	7a7b      	ldrb	r3, [r7, #9]
 8002612:	041b      	lsls	r3, r3, #16
 8002614:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002618:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800261e:	6a3b      	ldr	r3, [r7, #32]
 8002620:	4313      	orrs	r3, r2
 8002622:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002626:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	685a      	ldr	r2, [r3, #4]
 800262e:	6a3b      	ldr	r3, [r7, #32]
 8002630:	0d5b      	lsrs	r3, r3, #21
 8002632:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8002636:	4b08      	ldr	r3, [pc, #32]	@ (8002658 <I2C_TransferConfig+0x60>)
 8002638:	430b      	orrs	r3, r1
 800263a:	43db      	mvns	r3, r3
 800263c:	ea02 0103 	and.w	r1, r2, r3
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	697a      	ldr	r2, [r7, #20]
 8002646:	430a      	orrs	r2, r1
 8002648:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800264a:	bf00      	nop
 800264c:	371c      	adds	r7, #28
 800264e:	46bd      	mov	sp, r7
 8002650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002654:	4770      	bx	lr
 8002656:	bf00      	nop
 8002658:	03ff63ff 	.word	0x03ff63ff

0800265c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800265c:	b480      	push	{r7}
 800265e:	b083      	sub	sp, #12
 8002660:	af00      	add	r7, sp, #0
 8002662:	6078      	str	r0, [r7, #4]
 8002664:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800266c:	b2db      	uxtb	r3, r3
 800266e:	2b20      	cmp	r3, #32
 8002670:	d138      	bne.n	80026e4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002678:	2b01      	cmp	r3, #1
 800267a:	d101      	bne.n	8002680 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800267c:	2302      	movs	r3, #2
 800267e:	e032      	b.n	80026e6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	2201      	movs	r2, #1
 8002684:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	2224      	movs	r2, #36	@ 0x24
 800268c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	681a      	ldr	r2, [r3, #0]
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f022 0201 	bic.w	r2, r2, #1
 800269e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	681a      	ldr	r2, [r3, #0]
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80026ae:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	6819      	ldr	r1, [r3, #0]
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	683a      	ldr	r2, [r7, #0]
 80026bc:	430a      	orrs	r2, r1
 80026be:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	681a      	ldr	r2, [r3, #0]
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f042 0201 	orr.w	r2, r2, #1
 80026ce:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	2220      	movs	r2, #32
 80026d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	2200      	movs	r2, #0
 80026dc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80026e0:	2300      	movs	r3, #0
 80026e2:	e000      	b.n	80026e6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80026e4:	2302      	movs	r3, #2
  }
}
 80026e6:	4618      	mov	r0, r3
 80026e8:	370c      	adds	r7, #12
 80026ea:	46bd      	mov	sp, r7
 80026ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f0:	4770      	bx	lr

080026f2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80026f2:	b480      	push	{r7}
 80026f4:	b085      	sub	sp, #20
 80026f6:	af00      	add	r7, sp, #0
 80026f8:	6078      	str	r0, [r7, #4]
 80026fa:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002702:	b2db      	uxtb	r3, r3
 8002704:	2b20      	cmp	r3, #32
 8002706:	d139      	bne.n	800277c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800270e:	2b01      	cmp	r3, #1
 8002710:	d101      	bne.n	8002716 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002712:	2302      	movs	r3, #2
 8002714:	e033      	b.n	800277e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	2201      	movs	r2, #1
 800271a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	2224      	movs	r2, #36	@ 0x24
 8002722:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	681a      	ldr	r2, [r3, #0]
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f022 0201 	bic.w	r2, r2, #1
 8002734:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002744:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002746:	683b      	ldr	r3, [r7, #0]
 8002748:	021b      	lsls	r3, r3, #8
 800274a:	68fa      	ldr	r2, [r7, #12]
 800274c:	4313      	orrs	r3, r2
 800274e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	68fa      	ldr	r2, [r7, #12]
 8002756:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	681a      	ldr	r2, [r3, #0]
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f042 0201 	orr.w	r2, r2, #1
 8002766:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	2220      	movs	r2, #32
 800276c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	2200      	movs	r2, #0
 8002774:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002778:	2300      	movs	r3, #0
 800277a:	e000      	b.n	800277e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800277c:	2302      	movs	r3, #2
  }
}
 800277e:	4618      	mov	r0, r3
 8002780:	3714      	adds	r7, #20
 8002782:	46bd      	mov	sp, r7
 8002784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002788:	4770      	bx	lr
	...

0800278c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800278c:	b580      	push	{r7, lr}
 800278e:	b084      	sub	sp, #16
 8002790:	af00      	add	r7, sp, #0
 8002792:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8002794:	4b19      	ldr	r3, [pc, #100]	@ (80027fc <HAL_PWREx_ConfigSupply+0x70>)
 8002796:	68db      	ldr	r3, [r3, #12]
 8002798:	f003 0304 	and.w	r3, r3, #4
 800279c:	2b04      	cmp	r3, #4
 800279e:	d00a      	beq.n	80027b6 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80027a0:	4b16      	ldr	r3, [pc, #88]	@ (80027fc <HAL_PWREx_ConfigSupply+0x70>)
 80027a2:	68db      	ldr	r3, [r3, #12]
 80027a4:	f003 0307 	and.w	r3, r3, #7
 80027a8:	687a      	ldr	r2, [r7, #4]
 80027aa:	429a      	cmp	r2, r3
 80027ac:	d001      	beq.n	80027b2 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80027ae:	2301      	movs	r3, #1
 80027b0:	e01f      	b.n	80027f2 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80027b2:	2300      	movs	r3, #0
 80027b4:	e01d      	b.n	80027f2 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80027b6:	4b11      	ldr	r3, [pc, #68]	@ (80027fc <HAL_PWREx_ConfigSupply+0x70>)
 80027b8:	68db      	ldr	r3, [r3, #12]
 80027ba:	f023 0207 	bic.w	r2, r3, #7
 80027be:	490f      	ldr	r1, [pc, #60]	@ (80027fc <HAL_PWREx_ConfigSupply+0x70>)
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	4313      	orrs	r3, r2
 80027c4:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80027c6:	f7fe fe5b 	bl	8001480 <HAL_GetTick>
 80027ca:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80027cc:	e009      	b.n	80027e2 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80027ce:	f7fe fe57 	bl	8001480 <HAL_GetTick>
 80027d2:	4602      	mov	r2, r0
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	1ad3      	subs	r3, r2, r3
 80027d8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80027dc:	d901      	bls.n	80027e2 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80027de:	2301      	movs	r3, #1
 80027e0:	e007      	b.n	80027f2 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80027e2:	4b06      	ldr	r3, [pc, #24]	@ (80027fc <HAL_PWREx_ConfigSupply+0x70>)
 80027e4:	685b      	ldr	r3, [r3, #4]
 80027e6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80027ea:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80027ee:	d1ee      	bne.n	80027ce <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80027f0:	2300      	movs	r3, #0
}
 80027f2:	4618      	mov	r0, r3
 80027f4:	3710      	adds	r7, #16
 80027f6:	46bd      	mov	sp, r7
 80027f8:	bd80      	pop	{r7, pc}
 80027fa:	bf00      	nop
 80027fc:	58024800 	.word	0x58024800

08002800 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002800:	b580      	push	{r7, lr}
 8002802:	b08c      	sub	sp, #48	@ 0x30
 8002804:	af00      	add	r7, sp, #0
 8002806:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	2b00      	cmp	r3, #0
 800280c:	d102      	bne.n	8002814 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800280e:	2301      	movs	r3, #1
 8002810:	f000 bc48 	b.w	80030a4 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f003 0301 	and.w	r3, r3, #1
 800281c:	2b00      	cmp	r3, #0
 800281e:	f000 8088 	beq.w	8002932 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002822:	4b99      	ldr	r3, [pc, #612]	@ (8002a88 <HAL_RCC_OscConfig+0x288>)
 8002824:	691b      	ldr	r3, [r3, #16]
 8002826:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800282a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800282c:	4b96      	ldr	r3, [pc, #600]	@ (8002a88 <HAL_RCC_OscConfig+0x288>)
 800282e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002830:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8002832:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002834:	2b10      	cmp	r3, #16
 8002836:	d007      	beq.n	8002848 <HAL_RCC_OscConfig+0x48>
 8002838:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800283a:	2b18      	cmp	r3, #24
 800283c:	d111      	bne.n	8002862 <HAL_RCC_OscConfig+0x62>
 800283e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002840:	f003 0303 	and.w	r3, r3, #3
 8002844:	2b02      	cmp	r3, #2
 8002846:	d10c      	bne.n	8002862 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002848:	4b8f      	ldr	r3, [pc, #572]	@ (8002a88 <HAL_RCC_OscConfig+0x288>)
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002850:	2b00      	cmp	r3, #0
 8002852:	d06d      	beq.n	8002930 <HAL_RCC_OscConfig+0x130>
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	685b      	ldr	r3, [r3, #4]
 8002858:	2b00      	cmp	r3, #0
 800285a:	d169      	bne.n	8002930 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800285c:	2301      	movs	r3, #1
 800285e:	f000 bc21 	b.w	80030a4 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	685b      	ldr	r3, [r3, #4]
 8002866:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800286a:	d106      	bne.n	800287a <HAL_RCC_OscConfig+0x7a>
 800286c:	4b86      	ldr	r3, [pc, #536]	@ (8002a88 <HAL_RCC_OscConfig+0x288>)
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	4a85      	ldr	r2, [pc, #532]	@ (8002a88 <HAL_RCC_OscConfig+0x288>)
 8002872:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002876:	6013      	str	r3, [r2, #0]
 8002878:	e02e      	b.n	80028d8 <HAL_RCC_OscConfig+0xd8>
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	685b      	ldr	r3, [r3, #4]
 800287e:	2b00      	cmp	r3, #0
 8002880:	d10c      	bne.n	800289c <HAL_RCC_OscConfig+0x9c>
 8002882:	4b81      	ldr	r3, [pc, #516]	@ (8002a88 <HAL_RCC_OscConfig+0x288>)
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	4a80      	ldr	r2, [pc, #512]	@ (8002a88 <HAL_RCC_OscConfig+0x288>)
 8002888:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800288c:	6013      	str	r3, [r2, #0]
 800288e:	4b7e      	ldr	r3, [pc, #504]	@ (8002a88 <HAL_RCC_OscConfig+0x288>)
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	4a7d      	ldr	r2, [pc, #500]	@ (8002a88 <HAL_RCC_OscConfig+0x288>)
 8002894:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002898:	6013      	str	r3, [r2, #0]
 800289a:	e01d      	b.n	80028d8 <HAL_RCC_OscConfig+0xd8>
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	685b      	ldr	r3, [r3, #4]
 80028a0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80028a4:	d10c      	bne.n	80028c0 <HAL_RCC_OscConfig+0xc0>
 80028a6:	4b78      	ldr	r3, [pc, #480]	@ (8002a88 <HAL_RCC_OscConfig+0x288>)
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	4a77      	ldr	r2, [pc, #476]	@ (8002a88 <HAL_RCC_OscConfig+0x288>)
 80028ac:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80028b0:	6013      	str	r3, [r2, #0]
 80028b2:	4b75      	ldr	r3, [pc, #468]	@ (8002a88 <HAL_RCC_OscConfig+0x288>)
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	4a74      	ldr	r2, [pc, #464]	@ (8002a88 <HAL_RCC_OscConfig+0x288>)
 80028b8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80028bc:	6013      	str	r3, [r2, #0]
 80028be:	e00b      	b.n	80028d8 <HAL_RCC_OscConfig+0xd8>
 80028c0:	4b71      	ldr	r3, [pc, #452]	@ (8002a88 <HAL_RCC_OscConfig+0x288>)
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	4a70      	ldr	r2, [pc, #448]	@ (8002a88 <HAL_RCC_OscConfig+0x288>)
 80028c6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80028ca:	6013      	str	r3, [r2, #0]
 80028cc:	4b6e      	ldr	r3, [pc, #440]	@ (8002a88 <HAL_RCC_OscConfig+0x288>)
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	4a6d      	ldr	r2, [pc, #436]	@ (8002a88 <HAL_RCC_OscConfig+0x288>)
 80028d2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80028d6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	685b      	ldr	r3, [r3, #4]
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d013      	beq.n	8002908 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028e0:	f7fe fdce 	bl	8001480 <HAL_GetTick>
 80028e4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80028e6:	e008      	b.n	80028fa <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80028e8:	f7fe fdca 	bl	8001480 <HAL_GetTick>
 80028ec:	4602      	mov	r2, r0
 80028ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028f0:	1ad3      	subs	r3, r2, r3
 80028f2:	2b64      	cmp	r3, #100	@ 0x64
 80028f4:	d901      	bls.n	80028fa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80028f6:	2303      	movs	r3, #3
 80028f8:	e3d4      	b.n	80030a4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80028fa:	4b63      	ldr	r3, [pc, #396]	@ (8002a88 <HAL_RCC_OscConfig+0x288>)
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002902:	2b00      	cmp	r3, #0
 8002904:	d0f0      	beq.n	80028e8 <HAL_RCC_OscConfig+0xe8>
 8002906:	e014      	b.n	8002932 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002908:	f7fe fdba 	bl	8001480 <HAL_GetTick>
 800290c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800290e:	e008      	b.n	8002922 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002910:	f7fe fdb6 	bl	8001480 <HAL_GetTick>
 8002914:	4602      	mov	r2, r0
 8002916:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002918:	1ad3      	subs	r3, r2, r3
 800291a:	2b64      	cmp	r3, #100	@ 0x64
 800291c:	d901      	bls.n	8002922 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800291e:	2303      	movs	r3, #3
 8002920:	e3c0      	b.n	80030a4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002922:	4b59      	ldr	r3, [pc, #356]	@ (8002a88 <HAL_RCC_OscConfig+0x288>)
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800292a:	2b00      	cmp	r3, #0
 800292c:	d1f0      	bne.n	8002910 <HAL_RCC_OscConfig+0x110>
 800292e:	e000      	b.n	8002932 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002930:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f003 0302 	and.w	r3, r3, #2
 800293a:	2b00      	cmp	r3, #0
 800293c:	f000 80ca 	beq.w	8002ad4 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002940:	4b51      	ldr	r3, [pc, #324]	@ (8002a88 <HAL_RCC_OscConfig+0x288>)
 8002942:	691b      	ldr	r3, [r3, #16]
 8002944:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002948:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800294a:	4b4f      	ldr	r3, [pc, #316]	@ (8002a88 <HAL_RCC_OscConfig+0x288>)
 800294c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800294e:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8002950:	6a3b      	ldr	r3, [r7, #32]
 8002952:	2b00      	cmp	r3, #0
 8002954:	d007      	beq.n	8002966 <HAL_RCC_OscConfig+0x166>
 8002956:	6a3b      	ldr	r3, [r7, #32]
 8002958:	2b18      	cmp	r3, #24
 800295a:	d156      	bne.n	8002a0a <HAL_RCC_OscConfig+0x20a>
 800295c:	69fb      	ldr	r3, [r7, #28]
 800295e:	f003 0303 	and.w	r3, r3, #3
 8002962:	2b00      	cmp	r3, #0
 8002964:	d151      	bne.n	8002a0a <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002966:	4b48      	ldr	r3, [pc, #288]	@ (8002a88 <HAL_RCC_OscConfig+0x288>)
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f003 0304 	and.w	r3, r3, #4
 800296e:	2b00      	cmp	r3, #0
 8002970:	d005      	beq.n	800297e <HAL_RCC_OscConfig+0x17e>
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	68db      	ldr	r3, [r3, #12]
 8002976:	2b00      	cmp	r3, #0
 8002978:	d101      	bne.n	800297e <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800297a:	2301      	movs	r3, #1
 800297c:	e392      	b.n	80030a4 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800297e:	4b42      	ldr	r3, [pc, #264]	@ (8002a88 <HAL_RCC_OscConfig+0x288>)
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f023 0219 	bic.w	r2, r3, #25
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	68db      	ldr	r3, [r3, #12]
 800298a:	493f      	ldr	r1, [pc, #252]	@ (8002a88 <HAL_RCC_OscConfig+0x288>)
 800298c:	4313      	orrs	r3, r2
 800298e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002990:	f7fe fd76 	bl	8001480 <HAL_GetTick>
 8002994:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002996:	e008      	b.n	80029aa <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002998:	f7fe fd72 	bl	8001480 <HAL_GetTick>
 800299c:	4602      	mov	r2, r0
 800299e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029a0:	1ad3      	subs	r3, r2, r3
 80029a2:	2b02      	cmp	r3, #2
 80029a4:	d901      	bls.n	80029aa <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80029a6:	2303      	movs	r3, #3
 80029a8:	e37c      	b.n	80030a4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80029aa:	4b37      	ldr	r3, [pc, #220]	@ (8002a88 <HAL_RCC_OscConfig+0x288>)
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f003 0304 	and.w	r3, r3, #4
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d0f0      	beq.n	8002998 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029b6:	f7fe fd93 	bl	80014e0 <HAL_GetREVID>
 80029ba:	4603      	mov	r3, r0
 80029bc:	f241 0203 	movw	r2, #4099	@ 0x1003
 80029c0:	4293      	cmp	r3, r2
 80029c2:	d817      	bhi.n	80029f4 <HAL_RCC_OscConfig+0x1f4>
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	691b      	ldr	r3, [r3, #16]
 80029c8:	2b40      	cmp	r3, #64	@ 0x40
 80029ca:	d108      	bne.n	80029de <HAL_RCC_OscConfig+0x1de>
 80029cc:	4b2e      	ldr	r3, [pc, #184]	@ (8002a88 <HAL_RCC_OscConfig+0x288>)
 80029ce:	685b      	ldr	r3, [r3, #4]
 80029d0:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 80029d4:	4a2c      	ldr	r2, [pc, #176]	@ (8002a88 <HAL_RCC_OscConfig+0x288>)
 80029d6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80029da:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80029dc:	e07a      	b.n	8002ad4 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029de:	4b2a      	ldr	r3, [pc, #168]	@ (8002a88 <HAL_RCC_OscConfig+0x288>)
 80029e0:	685b      	ldr	r3, [r3, #4]
 80029e2:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	691b      	ldr	r3, [r3, #16]
 80029ea:	031b      	lsls	r3, r3, #12
 80029ec:	4926      	ldr	r1, [pc, #152]	@ (8002a88 <HAL_RCC_OscConfig+0x288>)
 80029ee:	4313      	orrs	r3, r2
 80029f0:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80029f2:	e06f      	b.n	8002ad4 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029f4:	4b24      	ldr	r3, [pc, #144]	@ (8002a88 <HAL_RCC_OscConfig+0x288>)
 80029f6:	685b      	ldr	r3, [r3, #4]
 80029f8:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	691b      	ldr	r3, [r3, #16]
 8002a00:	061b      	lsls	r3, r3, #24
 8002a02:	4921      	ldr	r1, [pc, #132]	@ (8002a88 <HAL_RCC_OscConfig+0x288>)
 8002a04:	4313      	orrs	r3, r2
 8002a06:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002a08:	e064      	b.n	8002ad4 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	68db      	ldr	r3, [r3, #12]
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d047      	beq.n	8002aa2 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002a12:	4b1d      	ldr	r3, [pc, #116]	@ (8002a88 <HAL_RCC_OscConfig+0x288>)
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f023 0219 	bic.w	r2, r3, #25
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	68db      	ldr	r3, [r3, #12]
 8002a1e:	491a      	ldr	r1, [pc, #104]	@ (8002a88 <HAL_RCC_OscConfig+0x288>)
 8002a20:	4313      	orrs	r3, r2
 8002a22:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a24:	f7fe fd2c 	bl	8001480 <HAL_GetTick>
 8002a28:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002a2a:	e008      	b.n	8002a3e <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002a2c:	f7fe fd28 	bl	8001480 <HAL_GetTick>
 8002a30:	4602      	mov	r2, r0
 8002a32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a34:	1ad3      	subs	r3, r2, r3
 8002a36:	2b02      	cmp	r3, #2
 8002a38:	d901      	bls.n	8002a3e <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8002a3a:	2303      	movs	r3, #3
 8002a3c:	e332      	b.n	80030a4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002a3e:	4b12      	ldr	r3, [pc, #72]	@ (8002a88 <HAL_RCC_OscConfig+0x288>)
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f003 0304 	and.w	r3, r3, #4
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d0f0      	beq.n	8002a2c <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a4a:	f7fe fd49 	bl	80014e0 <HAL_GetREVID>
 8002a4e:	4603      	mov	r3, r0
 8002a50:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002a54:	4293      	cmp	r3, r2
 8002a56:	d819      	bhi.n	8002a8c <HAL_RCC_OscConfig+0x28c>
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	691b      	ldr	r3, [r3, #16]
 8002a5c:	2b40      	cmp	r3, #64	@ 0x40
 8002a5e:	d108      	bne.n	8002a72 <HAL_RCC_OscConfig+0x272>
 8002a60:	4b09      	ldr	r3, [pc, #36]	@ (8002a88 <HAL_RCC_OscConfig+0x288>)
 8002a62:	685b      	ldr	r3, [r3, #4]
 8002a64:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8002a68:	4a07      	ldr	r2, [pc, #28]	@ (8002a88 <HAL_RCC_OscConfig+0x288>)
 8002a6a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002a6e:	6053      	str	r3, [r2, #4]
 8002a70:	e030      	b.n	8002ad4 <HAL_RCC_OscConfig+0x2d4>
 8002a72:	4b05      	ldr	r3, [pc, #20]	@ (8002a88 <HAL_RCC_OscConfig+0x288>)
 8002a74:	685b      	ldr	r3, [r3, #4]
 8002a76:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	691b      	ldr	r3, [r3, #16]
 8002a7e:	031b      	lsls	r3, r3, #12
 8002a80:	4901      	ldr	r1, [pc, #4]	@ (8002a88 <HAL_RCC_OscConfig+0x288>)
 8002a82:	4313      	orrs	r3, r2
 8002a84:	604b      	str	r3, [r1, #4]
 8002a86:	e025      	b.n	8002ad4 <HAL_RCC_OscConfig+0x2d4>
 8002a88:	58024400 	.word	0x58024400
 8002a8c:	4b9a      	ldr	r3, [pc, #616]	@ (8002cf8 <HAL_RCC_OscConfig+0x4f8>)
 8002a8e:	685b      	ldr	r3, [r3, #4]
 8002a90:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	691b      	ldr	r3, [r3, #16]
 8002a98:	061b      	lsls	r3, r3, #24
 8002a9a:	4997      	ldr	r1, [pc, #604]	@ (8002cf8 <HAL_RCC_OscConfig+0x4f8>)
 8002a9c:	4313      	orrs	r3, r2
 8002a9e:	604b      	str	r3, [r1, #4]
 8002aa0:	e018      	b.n	8002ad4 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002aa2:	4b95      	ldr	r3, [pc, #596]	@ (8002cf8 <HAL_RCC_OscConfig+0x4f8>)
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	4a94      	ldr	r2, [pc, #592]	@ (8002cf8 <HAL_RCC_OscConfig+0x4f8>)
 8002aa8:	f023 0301 	bic.w	r3, r3, #1
 8002aac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002aae:	f7fe fce7 	bl	8001480 <HAL_GetTick>
 8002ab2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002ab4:	e008      	b.n	8002ac8 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ab6:	f7fe fce3 	bl	8001480 <HAL_GetTick>
 8002aba:	4602      	mov	r2, r0
 8002abc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002abe:	1ad3      	subs	r3, r2, r3
 8002ac0:	2b02      	cmp	r3, #2
 8002ac2:	d901      	bls.n	8002ac8 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8002ac4:	2303      	movs	r3, #3
 8002ac6:	e2ed      	b.n	80030a4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002ac8:	4b8b      	ldr	r3, [pc, #556]	@ (8002cf8 <HAL_RCC_OscConfig+0x4f8>)
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f003 0304 	and.w	r3, r3, #4
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d1f0      	bne.n	8002ab6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f003 0310 	and.w	r3, r3, #16
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	f000 80a9 	beq.w	8002c34 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002ae2:	4b85      	ldr	r3, [pc, #532]	@ (8002cf8 <HAL_RCC_OscConfig+0x4f8>)
 8002ae4:	691b      	ldr	r3, [r3, #16]
 8002ae6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002aea:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002aec:	4b82      	ldr	r3, [pc, #520]	@ (8002cf8 <HAL_RCC_OscConfig+0x4f8>)
 8002aee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002af0:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8002af2:	69bb      	ldr	r3, [r7, #24]
 8002af4:	2b08      	cmp	r3, #8
 8002af6:	d007      	beq.n	8002b08 <HAL_RCC_OscConfig+0x308>
 8002af8:	69bb      	ldr	r3, [r7, #24]
 8002afa:	2b18      	cmp	r3, #24
 8002afc:	d13a      	bne.n	8002b74 <HAL_RCC_OscConfig+0x374>
 8002afe:	697b      	ldr	r3, [r7, #20]
 8002b00:	f003 0303 	and.w	r3, r3, #3
 8002b04:	2b01      	cmp	r3, #1
 8002b06:	d135      	bne.n	8002b74 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002b08:	4b7b      	ldr	r3, [pc, #492]	@ (8002cf8 <HAL_RCC_OscConfig+0x4f8>)
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d005      	beq.n	8002b20 <HAL_RCC_OscConfig+0x320>
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	69db      	ldr	r3, [r3, #28]
 8002b18:	2b80      	cmp	r3, #128	@ 0x80
 8002b1a:	d001      	beq.n	8002b20 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8002b1c:	2301      	movs	r3, #1
 8002b1e:	e2c1      	b.n	80030a4 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002b20:	f7fe fcde 	bl	80014e0 <HAL_GetREVID>
 8002b24:	4603      	mov	r3, r0
 8002b26:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002b2a:	4293      	cmp	r3, r2
 8002b2c:	d817      	bhi.n	8002b5e <HAL_RCC_OscConfig+0x35e>
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	6a1b      	ldr	r3, [r3, #32]
 8002b32:	2b20      	cmp	r3, #32
 8002b34:	d108      	bne.n	8002b48 <HAL_RCC_OscConfig+0x348>
 8002b36:	4b70      	ldr	r3, [pc, #448]	@ (8002cf8 <HAL_RCC_OscConfig+0x4f8>)
 8002b38:	685b      	ldr	r3, [r3, #4]
 8002b3a:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8002b3e:	4a6e      	ldr	r2, [pc, #440]	@ (8002cf8 <HAL_RCC_OscConfig+0x4f8>)
 8002b40:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8002b44:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002b46:	e075      	b.n	8002c34 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002b48:	4b6b      	ldr	r3, [pc, #428]	@ (8002cf8 <HAL_RCC_OscConfig+0x4f8>)
 8002b4a:	685b      	ldr	r3, [r3, #4]
 8002b4c:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	6a1b      	ldr	r3, [r3, #32]
 8002b54:	069b      	lsls	r3, r3, #26
 8002b56:	4968      	ldr	r1, [pc, #416]	@ (8002cf8 <HAL_RCC_OscConfig+0x4f8>)
 8002b58:	4313      	orrs	r3, r2
 8002b5a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002b5c:	e06a      	b.n	8002c34 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002b5e:	4b66      	ldr	r3, [pc, #408]	@ (8002cf8 <HAL_RCC_OscConfig+0x4f8>)
 8002b60:	68db      	ldr	r3, [r3, #12]
 8002b62:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	6a1b      	ldr	r3, [r3, #32]
 8002b6a:	061b      	lsls	r3, r3, #24
 8002b6c:	4962      	ldr	r1, [pc, #392]	@ (8002cf8 <HAL_RCC_OscConfig+0x4f8>)
 8002b6e:	4313      	orrs	r3, r2
 8002b70:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002b72:	e05f      	b.n	8002c34 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	69db      	ldr	r3, [r3, #28]
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d042      	beq.n	8002c02 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8002b7c:	4b5e      	ldr	r3, [pc, #376]	@ (8002cf8 <HAL_RCC_OscConfig+0x4f8>)
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	4a5d      	ldr	r2, [pc, #372]	@ (8002cf8 <HAL_RCC_OscConfig+0x4f8>)
 8002b82:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002b86:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b88:	f7fe fc7a 	bl	8001480 <HAL_GetTick>
 8002b8c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002b8e:	e008      	b.n	8002ba2 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002b90:	f7fe fc76 	bl	8001480 <HAL_GetTick>
 8002b94:	4602      	mov	r2, r0
 8002b96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b98:	1ad3      	subs	r3, r2, r3
 8002b9a:	2b02      	cmp	r3, #2
 8002b9c:	d901      	bls.n	8002ba2 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8002b9e:	2303      	movs	r3, #3
 8002ba0:	e280      	b.n	80030a4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002ba2:	4b55      	ldr	r3, [pc, #340]	@ (8002cf8 <HAL_RCC_OscConfig+0x4f8>)
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d0f0      	beq.n	8002b90 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002bae:	f7fe fc97 	bl	80014e0 <HAL_GetREVID>
 8002bb2:	4603      	mov	r3, r0
 8002bb4:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002bb8:	4293      	cmp	r3, r2
 8002bba:	d817      	bhi.n	8002bec <HAL_RCC_OscConfig+0x3ec>
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	6a1b      	ldr	r3, [r3, #32]
 8002bc0:	2b20      	cmp	r3, #32
 8002bc2:	d108      	bne.n	8002bd6 <HAL_RCC_OscConfig+0x3d6>
 8002bc4:	4b4c      	ldr	r3, [pc, #304]	@ (8002cf8 <HAL_RCC_OscConfig+0x4f8>)
 8002bc6:	685b      	ldr	r3, [r3, #4]
 8002bc8:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8002bcc:	4a4a      	ldr	r2, [pc, #296]	@ (8002cf8 <HAL_RCC_OscConfig+0x4f8>)
 8002bce:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8002bd2:	6053      	str	r3, [r2, #4]
 8002bd4:	e02e      	b.n	8002c34 <HAL_RCC_OscConfig+0x434>
 8002bd6:	4b48      	ldr	r3, [pc, #288]	@ (8002cf8 <HAL_RCC_OscConfig+0x4f8>)
 8002bd8:	685b      	ldr	r3, [r3, #4]
 8002bda:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	6a1b      	ldr	r3, [r3, #32]
 8002be2:	069b      	lsls	r3, r3, #26
 8002be4:	4944      	ldr	r1, [pc, #272]	@ (8002cf8 <HAL_RCC_OscConfig+0x4f8>)
 8002be6:	4313      	orrs	r3, r2
 8002be8:	604b      	str	r3, [r1, #4]
 8002bea:	e023      	b.n	8002c34 <HAL_RCC_OscConfig+0x434>
 8002bec:	4b42      	ldr	r3, [pc, #264]	@ (8002cf8 <HAL_RCC_OscConfig+0x4f8>)
 8002bee:	68db      	ldr	r3, [r3, #12]
 8002bf0:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	6a1b      	ldr	r3, [r3, #32]
 8002bf8:	061b      	lsls	r3, r3, #24
 8002bfa:	493f      	ldr	r1, [pc, #252]	@ (8002cf8 <HAL_RCC_OscConfig+0x4f8>)
 8002bfc:	4313      	orrs	r3, r2
 8002bfe:	60cb      	str	r3, [r1, #12]
 8002c00:	e018      	b.n	8002c34 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8002c02:	4b3d      	ldr	r3, [pc, #244]	@ (8002cf8 <HAL_RCC_OscConfig+0x4f8>)
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	4a3c      	ldr	r2, [pc, #240]	@ (8002cf8 <HAL_RCC_OscConfig+0x4f8>)
 8002c08:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002c0c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c0e:	f7fe fc37 	bl	8001480 <HAL_GetTick>
 8002c12:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002c14:	e008      	b.n	8002c28 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002c16:	f7fe fc33 	bl	8001480 <HAL_GetTick>
 8002c1a:	4602      	mov	r2, r0
 8002c1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c1e:	1ad3      	subs	r3, r2, r3
 8002c20:	2b02      	cmp	r3, #2
 8002c22:	d901      	bls.n	8002c28 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002c24:	2303      	movs	r3, #3
 8002c26:	e23d      	b.n	80030a4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002c28:	4b33      	ldr	r3, [pc, #204]	@ (8002cf8 <HAL_RCC_OscConfig+0x4f8>)
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d1f0      	bne.n	8002c16 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f003 0308 	and.w	r3, r3, #8
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d036      	beq.n	8002cae <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	695b      	ldr	r3, [r3, #20]
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d019      	beq.n	8002c7c <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002c48:	4b2b      	ldr	r3, [pc, #172]	@ (8002cf8 <HAL_RCC_OscConfig+0x4f8>)
 8002c4a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002c4c:	4a2a      	ldr	r2, [pc, #168]	@ (8002cf8 <HAL_RCC_OscConfig+0x4f8>)
 8002c4e:	f043 0301 	orr.w	r3, r3, #1
 8002c52:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c54:	f7fe fc14 	bl	8001480 <HAL_GetTick>
 8002c58:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002c5a:	e008      	b.n	8002c6e <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c5c:	f7fe fc10 	bl	8001480 <HAL_GetTick>
 8002c60:	4602      	mov	r2, r0
 8002c62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c64:	1ad3      	subs	r3, r2, r3
 8002c66:	2b02      	cmp	r3, #2
 8002c68:	d901      	bls.n	8002c6e <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8002c6a:	2303      	movs	r3, #3
 8002c6c:	e21a      	b.n	80030a4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002c6e:	4b22      	ldr	r3, [pc, #136]	@ (8002cf8 <HAL_RCC_OscConfig+0x4f8>)
 8002c70:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002c72:	f003 0302 	and.w	r3, r3, #2
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d0f0      	beq.n	8002c5c <HAL_RCC_OscConfig+0x45c>
 8002c7a:	e018      	b.n	8002cae <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002c7c:	4b1e      	ldr	r3, [pc, #120]	@ (8002cf8 <HAL_RCC_OscConfig+0x4f8>)
 8002c7e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002c80:	4a1d      	ldr	r2, [pc, #116]	@ (8002cf8 <HAL_RCC_OscConfig+0x4f8>)
 8002c82:	f023 0301 	bic.w	r3, r3, #1
 8002c86:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c88:	f7fe fbfa 	bl	8001480 <HAL_GetTick>
 8002c8c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002c8e:	e008      	b.n	8002ca2 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c90:	f7fe fbf6 	bl	8001480 <HAL_GetTick>
 8002c94:	4602      	mov	r2, r0
 8002c96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c98:	1ad3      	subs	r3, r2, r3
 8002c9a:	2b02      	cmp	r3, #2
 8002c9c:	d901      	bls.n	8002ca2 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8002c9e:	2303      	movs	r3, #3
 8002ca0:	e200      	b.n	80030a4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002ca2:	4b15      	ldr	r3, [pc, #84]	@ (8002cf8 <HAL_RCC_OscConfig+0x4f8>)
 8002ca4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002ca6:	f003 0302 	and.w	r3, r3, #2
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d1f0      	bne.n	8002c90 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f003 0320 	and.w	r3, r3, #32
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d039      	beq.n	8002d2e <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	699b      	ldr	r3, [r3, #24]
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d01c      	beq.n	8002cfc <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002cc2:	4b0d      	ldr	r3, [pc, #52]	@ (8002cf8 <HAL_RCC_OscConfig+0x4f8>)
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	4a0c      	ldr	r2, [pc, #48]	@ (8002cf8 <HAL_RCC_OscConfig+0x4f8>)
 8002cc8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002ccc:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002cce:	f7fe fbd7 	bl	8001480 <HAL_GetTick>
 8002cd2:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002cd4:	e008      	b.n	8002ce8 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002cd6:	f7fe fbd3 	bl	8001480 <HAL_GetTick>
 8002cda:	4602      	mov	r2, r0
 8002cdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cde:	1ad3      	subs	r3, r2, r3
 8002ce0:	2b02      	cmp	r3, #2
 8002ce2:	d901      	bls.n	8002ce8 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8002ce4:	2303      	movs	r3, #3
 8002ce6:	e1dd      	b.n	80030a4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002ce8:	4b03      	ldr	r3, [pc, #12]	@ (8002cf8 <HAL_RCC_OscConfig+0x4f8>)
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d0f0      	beq.n	8002cd6 <HAL_RCC_OscConfig+0x4d6>
 8002cf4:	e01b      	b.n	8002d2e <HAL_RCC_OscConfig+0x52e>
 8002cf6:	bf00      	nop
 8002cf8:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002cfc:	4b9b      	ldr	r3, [pc, #620]	@ (8002f6c <HAL_RCC_OscConfig+0x76c>)
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	4a9a      	ldr	r2, [pc, #616]	@ (8002f6c <HAL_RCC_OscConfig+0x76c>)
 8002d02:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002d06:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002d08:	f7fe fbba 	bl	8001480 <HAL_GetTick>
 8002d0c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002d0e:	e008      	b.n	8002d22 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002d10:	f7fe fbb6 	bl	8001480 <HAL_GetTick>
 8002d14:	4602      	mov	r2, r0
 8002d16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d18:	1ad3      	subs	r3, r2, r3
 8002d1a:	2b02      	cmp	r3, #2
 8002d1c:	d901      	bls.n	8002d22 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8002d1e:	2303      	movs	r3, #3
 8002d20:	e1c0      	b.n	80030a4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002d22:	4b92      	ldr	r3, [pc, #584]	@ (8002f6c <HAL_RCC_OscConfig+0x76c>)
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d1f0      	bne.n	8002d10 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f003 0304 	and.w	r3, r3, #4
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	f000 8081 	beq.w	8002e3e <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002d3c:	4b8c      	ldr	r3, [pc, #560]	@ (8002f70 <HAL_RCC_OscConfig+0x770>)
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	4a8b      	ldr	r2, [pc, #556]	@ (8002f70 <HAL_RCC_OscConfig+0x770>)
 8002d42:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002d46:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002d48:	f7fe fb9a 	bl	8001480 <HAL_GetTick>
 8002d4c:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002d4e:	e008      	b.n	8002d62 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d50:	f7fe fb96 	bl	8001480 <HAL_GetTick>
 8002d54:	4602      	mov	r2, r0
 8002d56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d58:	1ad3      	subs	r3, r2, r3
 8002d5a:	2b64      	cmp	r3, #100	@ 0x64
 8002d5c:	d901      	bls.n	8002d62 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8002d5e:	2303      	movs	r3, #3
 8002d60:	e1a0      	b.n	80030a4 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002d62:	4b83      	ldr	r3, [pc, #524]	@ (8002f70 <HAL_RCC_OscConfig+0x770>)
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d0f0      	beq.n	8002d50 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	689b      	ldr	r3, [r3, #8]
 8002d72:	2b01      	cmp	r3, #1
 8002d74:	d106      	bne.n	8002d84 <HAL_RCC_OscConfig+0x584>
 8002d76:	4b7d      	ldr	r3, [pc, #500]	@ (8002f6c <HAL_RCC_OscConfig+0x76c>)
 8002d78:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d7a:	4a7c      	ldr	r2, [pc, #496]	@ (8002f6c <HAL_RCC_OscConfig+0x76c>)
 8002d7c:	f043 0301 	orr.w	r3, r3, #1
 8002d80:	6713      	str	r3, [r2, #112]	@ 0x70
 8002d82:	e02d      	b.n	8002de0 <HAL_RCC_OscConfig+0x5e0>
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	689b      	ldr	r3, [r3, #8]
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d10c      	bne.n	8002da6 <HAL_RCC_OscConfig+0x5a6>
 8002d8c:	4b77      	ldr	r3, [pc, #476]	@ (8002f6c <HAL_RCC_OscConfig+0x76c>)
 8002d8e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d90:	4a76      	ldr	r2, [pc, #472]	@ (8002f6c <HAL_RCC_OscConfig+0x76c>)
 8002d92:	f023 0301 	bic.w	r3, r3, #1
 8002d96:	6713      	str	r3, [r2, #112]	@ 0x70
 8002d98:	4b74      	ldr	r3, [pc, #464]	@ (8002f6c <HAL_RCC_OscConfig+0x76c>)
 8002d9a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d9c:	4a73      	ldr	r2, [pc, #460]	@ (8002f6c <HAL_RCC_OscConfig+0x76c>)
 8002d9e:	f023 0304 	bic.w	r3, r3, #4
 8002da2:	6713      	str	r3, [r2, #112]	@ 0x70
 8002da4:	e01c      	b.n	8002de0 <HAL_RCC_OscConfig+0x5e0>
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	689b      	ldr	r3, [r3, #8]
 8002daa:	2b05      	cmp	r3, #5
 8002dac:	d10c      	bne.n	8002dc8 <HAL_RCC_OscConfig+0x5c8>
 8002dae:	4b6f      	ldr	r3, [pc, #444]	@ (8002f6c <HAL_RCC_OscConfig+0x76c>)
 8002db0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002db2:	4a6e      	ldr	r2, [pc, #440]	@ (8002f6c <HAL_RCC_OscConfig+0x76c>)
 8002db4:	f043 0304 	orr.w	r3, r3, #4
 8002db8:	6713      	str	r3, [r2, #112]	@ 0x70
 8002dba:	4b6c      	ldr	r3, [pc, #432]	@ (8002f6c <HAL_RCC_OscConfig+0x76c>)
 8002dbc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002dbe:	4a6b      	ldr	r2, [pc, #428]	@ (8002f6c <HAL_RCC_OscConfig+0x76c>)
 8002dc0:	f043 0301 	orr.w	r3, r3, #1
 8002dc4:	6713      	str	r3, [r2, #112]	@ 0x70
 8002dc6:	e00b      	b.n	8002de0 <HAL_RCC_OscConfig+0x5e0>
 8002dc8:	4b68      	ldr	r3, [pc, #416]	@ (8002f6c <HAL_RCC_OscConfig+0x76c>)
 8002dca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002dcc:	4a67      	ldr	r2, [pc, #412]	@ (8002f6c <HAL_RCC_OscConfig+0x76c>)
 8002dce:	f023 0301 	bic.w	r3, r3, #1
 8002dd2:	6713      	str	r3, [r2, #112]	@ 0x70
 8002dd4:	4b65      	ldr	r3, [pc, #404]	@ (8002f6c <HAL_RCC_OscConfig+0x76c>)
 8002dd6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002dd8:	4a64      	ldr	r2, [pc, #400]	@ (8002f6c <HAL_RCC_OscConfig+0x76c>)
 8002dda:	f023 0304 	bic.w	r3, r3, #4
 8002dde:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	689b      	ldr	r3, [r3, #8]
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d015      	beq.n	8002e14 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002de8:	f7fe fb4a 	bl	8001480 <HAL_GetTick>
 8002dec:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002dee:	e00a      	b.n	8002e06 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002df0:	f7fe fb46 	bl	8001480 <HAL_GetTick>
 8002df4:	4602      	mov	r2, r0
 8002df6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002df8:	1ad3      	subs	r3, r2, r3
 8002dfa:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002dfe:	4293      	cmp	r3, r2
 8002e00:	d901      	bls.n	8002e06 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8002e02:	2303      	movs	r3, #3
 8002e04:	e14e      	b.n	80030a4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002e06:	4b59      	ldr	r3, [pc, #356]	@ (8002f6c <HAL_RCC_OscConfig+0x76c>)
 8002e08:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e0a:	f003 0302 	and.w	r3, r3, #2
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d0ee      	beq.n	8002df0 <HAL_RCC_OscConfig+0x5f0>
 8002e12:	e014      	b.n	8002e3e <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e14:	f7fe fb34 	bl	8001480 <HAL_GetTick>
 8002e18:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002e1a:	e00a      	b.n	8002e32 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e1c:	f7fe fb30 	bl	8001480 <HAL_GetTick>
 8002e20:	4602      	mov	r2, r0
 8002e22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e24:	1ad3      	subs	r3, r2, r3
 8002e26:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002e2a:	4293      	cmp	r3, r2
 8002e2c:	d901      	bls.n	8002e32 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8002e2e:	2303      	movs	r3, #3
 8002e30:	e138      	b.n	80030a4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002e32:	4b4e      	ldr	r3, [pc, #312]	@ (8002f6c <HAL_RCC_OscConfig+0x76c>)
 8002e34:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e36:	f003 0302 	and.w	r3, r3, #2
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d1ee      	bne.n	8002e1c <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	f000 812d 	beq.w	80030a2 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8002e48:	4b48      	ldr	r3, [pc, #288]	@ (8002f6c <HAL_RCC_OscConfig+0x76c>)
 8002e4a:	691b      	ldr	r3, [r3, #16]
 8002e4c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002e50:	2b18      	cmp	r3, #24
 8002e52:	f000 80bd 	beq.w	8002fd0 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e5a:	2b02      	cmp	r3, #2
 8002e5c:	f040 809e 	bne.w	8002f9c <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e60:	4b42      	ldr	r3, [pc, #264]	@ (8002f6c <HAL_RCC_OscConfig+0x76c>)
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	4a41      	ldr	r2, [pc, #260]	@ (8002f6c <HAL_RCC_OscConfig+0x76c>)
 8002e66:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002e6a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e6c:	f7fe fb08 	bl	8001480 <HAL_GetTick>
 8002e70:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002e72:	e008      	b.n	8002e86 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e74:	f7fe fb04 	bl	8001480 <HAL_GetTick>
 8002e78:	4602      	mov	r2, r0
 8002e7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e7c:	1ad3      	subs	r3, r2, r3
 8002e7e:	2b02      	cmp	r3, #2
 8002e80:	d901      	bls.n	8002e86 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8002e82:	2303      	movs	r3, #3
 8002e84:	e10e      	b.n	80030a4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002e86:	4b39      	ldr	r3, [pc, #228]	@ (8002f6c <HAL_RCC_OscConfig+0x76c>)
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d1f0      	bne.n	8002e74 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002e92:	4b36      	ldr	r3, [pc, #216]	@ (8002f6c <HAL_RCC_OscConfig+0x76c>)
 8002e94:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002e96:	4b37      	ldr	r3, [pc, #220]	@ (8002f74 <HAL_RCC_OscConfig+0x774>)
 8002e98:	4013      	ands	r3, r2
 8002e9a:	687a      	ldr	r2, [r7, #4]
 8002e9c:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8002e9e:	687a      	ldr	r2, [r7, #4]
 8002ea0:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8002ea2:	0112      	lsls	r2, r2, #4
 8002ea4:	430a      	orrs	r2, r1
 8002ea6:	4931      	ldr	r1, [pc, #196]	@ (8002f6c <HAL_RCC_OscConfig+0x76c>)
 8002ea8:	4313      	orrs	r3, r2
 8002eaa:	628b      	str	r3, [r1, #40]	@ 0x28
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002eb0:	3b01      	subs	r3, #1
 8002eb2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002eba:	3b01      	subs	r3, #1
 8002ebc:	025b      	lsls	r3, r3, #9
 8002ebe:	b29b      	uxth	r3, r3
 8002ec0:	431a      	orrs	r2, r3
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ec6:	3b01      	subs	r3, #1
 8002ec8:	041b      	lsls	r3, r3, #16
 8002eca:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8002ece:	431a      	orrs	r2, r3
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ed4:	3b01      	subs	r3, #1
 8002ed6:	061b      	lsls	r3, r3, #24
 8002ed8:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8002edc:	4923      	ldr	r1, [pc, #140]	@ (8002f6c <HAL_RCC_OscConfig+0x76c>)
 8002ede:	4313      	orrs	r3, r2
 8002ee0:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8002ee2:	4b22      	ldr	r3, [pc, #136]	@ (8002f6c <HAL_RCC_OscConfig+0x76c>)
 8002ee4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ee6:	4a21      	ldr	r2, [pc, #132]	@ (8002f6c <HAL_RCC_OscConfig+0x76c>)
 8002ee8:	f023 0301 	bic.w	r3, r3, #1
 8002eec:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002eee:	4b1f      	ldr	r3, [pc, #124]	@ (8002f6c <HAL_RCC_OscConfig+0x76c>)
 8002ef0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002ef2:	4b21      	ldr	r3, [pc, #132]	@ (8002f78 <HAL_RCC_OscConfig+0x778>)
 8002ef4:	4013      	ands	r3, r2
 8002ef6:	687a      	ldr	r2, [r7, #4]
 8002ef8:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002efa:	00d2      	lsls	r2, r2, #3
 8002efc:	491b      	ldr	r1, [pc, #108]	@ (8002f6c <HAL_RCC_OscConfig+0x76c>)
 8002efe:	4313      	orrs	r3, r2
 8002f00:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8002f02:	4b1a      	ldr	r3, [pc, #104]	@ (8002f6c <HAL_RCC_OscConfig+0x76c>)
 8002f04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f06:	f023 020c 	bic.w	r2, r3, #12
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f0e:	4917      	ldr	r1, [pc, #92]	@ (8002f6c <HAL_RCC_OscConfig+0x76c>)
 8002f10:	4313      	orrs	r3, r2
 8002f12:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8002f14:	4b15      	ldr	r3, [pc, #84]	@ (8002f6c <HAL_RCC_OscConfig+0x76c>)
 8002f16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f18:	f023 0202 	bic.w	r2, r3, #2
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f20:	4912      	ldr	r1, [pc, #72]	@ (8002f6c <HAL_RCC_OscConfig+0x76c>)
 8002f22:	4313      	orrs	r3, r2
 8002f24:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002f26:	4b11      	ldr	r3, [pc, #68]	@ (8002f6c <HAL_RCC_OscConfig+0x76c>)
 8002f28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f2a:	4a10      	ldr	r2, [pc, #64]	@ (8002f6c <HAL_RCC_OscConfig+0x76c>)
 8002f2c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002f30:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002f32:	4b0e      	ldr	r3, [pc, #56]	@ (8002f6c <HAL_RCC_OscConfig+0x76c>)
 8002f34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f36:	4a0d      	ldr	r2, [pc, #52]	@ (8002f6c <HAL_RCC_OscConfig+0x76c>)
 8002f38:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002f3c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8002f3e:	4b0b      	ldr	r3, [pc, #44]	@ (8002f6c <HAL_RCC_OscConfig+0x76c>)
 8002f40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f42:	4a0a      	ldr	r2, [pc, #40]	@ (8002f6c <HAL_RCC_OscConfig+0x76c>)
 8002f44:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002f48:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8002f4a:	4b08      	ldr	r3, [pc, #32]	@ (8002f6c <HAL_RCC_OscConfig+0x76c>)
 8002f4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f4e:	4a07      	ldr	r2, [pc, #28]	@ (8002f6c <HAL_RCC_OscConfig+0x76c>)
 8002f50:	f043 0301 	orr.w	r3, r3, #1
 8002f54:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002f56:	4b05      	ldr	r3, [pc, #20]	@ (8002f6c <HAL_RCC_OscConfig+0x76c>)
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	4a04      	ldr	r2, [pc, #16]	@ (8002f6c <HAL_RCC_OscConfig+0x76c>)
 8002f5c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002f60:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f62:	f7fe fa8d 	bl	8001480 <HAL_GetTick>
 8002f66:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002f68:	e011      	b.n	8002f8e <HAL_RCC_OscConfig+0x78e>
 8002f6a:	bf00      	nop
 8002f6c:	58024400 	.word	0x58024400
 8002f70:	58024800 	.word	0x58024800
 8002f74:	fffffc0c 	.word	0xfffffc0c
 8002f78:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f7c:	f7fe fa80 	bl	8001480 <HAL_GetTick>
 8002f80:	4602      	mov	r2, r0
 8002f82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f84:	1ad3      	subs	r3, r2, r3
 8002f86:	2b02      	cmp	r3, #2
 8002f88:	d901      	bls.n	8002f8e <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8002f8a:	2303      	movs	r3, #3
 8002f8c:	e08a      	b.n	80030a4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002f8e:	4b47      	ldr	r3, [pc, #284]	@ (80030ac <HAL_RCC_OscConfig+0x8ac>)
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d0f0      	beq.n	8002f7c <HAL_RCC_OscConfig+0x77c>
 8002f9a:	e082      	b.n	80030a2 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f9c:	4b43      	ldr	r3, [pc, #268]	@ (80030ac <HAL_RCC_OscConfig+0x8ac>)
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	4a42      	ldr	r2, [pc, #264]	@ (80030ac <HAL_RCC_OscConfig+0x8ac>)
 8002fa2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002fa6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fa8:	f7fe fa6a 	bl	8001480 <HAL_GetTick>
 8002fac:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002fae:	e008      	b.n	8002fc2 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002fb0:	f7fe fa66 	bl	8001480 <HAL_GetTick>
 8002fb4:	4602      	mov	r2, r0
 8002fb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fb8:	1ad3      	subs	r3, r2, r3
 8002fba:	2b02      	cmp	r3, #2
 8002fbc:	d901      	bls.n	8002fc2 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8002fbe:	2303      	movs	r3, #3
 8002fc0:	e070      	b.n	80030a4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002fc2:	4b3a      	ldr	r3, [pc, #232]	@ (80030ac <HAL_RCC_OscConfig+0x8ac>)
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d1f0      	bne.n	8002fb0 <HAL_RCC_OscConfig+0x7b0>
 8002fce:	e068      	b.n	80030a2 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8002fd0:	4b36      	ldr	r3, [pc, #216]	@ (80030ac <HAL_RCC_OscConfig+0x8ac>)
 8002fd2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002fd4:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002fd6:	4b35      	ldr	r3, [pc, #212]	@ (80030ac <HAL_RCC_OscConfig+0x8ac>)
 8002fd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fda:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fe0:	2b01      	cmp	r3, #1
 8002fe2:	d031      	beq.n	8003048 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002fe4:	693b      	ldr	r3, [r7, #16]
 8002fe6:	f003 0203 	and.w	r2, r3, #3
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002fee:	429a      	cmp	r2, r3
 8002ff0:	d12a      	bne.n	8003048 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002ff2:	693b      	ldr	r3, [r7, #16]
 8002ff4:	091b      	lsrs	r3, r3, #4
 8002ff6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ffe:	429a      	cmp	r2, r3
 8003000:	d122      	bne.n	8003048 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800300c:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800300e:	429a      	cmp	r2, r3
 8003010:	d11a      	bne.n	8003048 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	0a5b      	lsrs	r3, r3, #9
 8003016:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800301e:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003020:	429a      	cmp	r2, r3
 8003022:	d111      	bne.n	8003048 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	0c1b      	lsrs	r3, r3, #16
 8003028:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003030:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003032:	429a      	cmp	r2, r3
 8003034:	d108      	bne.n	8003048 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	0e1b      	lsrs	r3, r3, #24
 800303a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003042:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003044:	429a      	cmp	r2, r3
 8003046:	d001      	beq.n	800304c <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8003048:	2301      	movs	r3, #1
 800304a:	e02b      	b.n	80030a4 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800304c:	4b17      	ldr	r3, [pc, #92]	@ (80030ac <HAL_RCC_OscConfig+0x8ac>)
 800304e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003050:	08db      	lsrs	r3, r3, #3
 8003052:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003056:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800305c:	693a      	ldr	r2, [r7, #16]
 800305e:	429a      	cmp	r2, r3
 8003060:	d01f      	beq.n	80030a2 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8003062:	4b12      	ldr	r3, [pc, #72]	@ (80030ac <HAL_RCC_OscConfig+0x8ac>)
 8003064:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003066:	4a11      	ldr	r2, [pc, #68]	@ (80030ac <HAL_RCC_OscConfig+0x8ac>)
 8003068:	f023 0301 	bic.w	r3, r3, #1
 800306c:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800306e:	f7fe fa07 	bl	8001480 <HAL_GetTick>
 8003072:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8003074:	bf00      	nop
 8003076:	f7fe fa03 	bl	8001480 <HAL_GetTick>
 800307a:	4602      	mov	r2, r0
 800307c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800307e:	4293      	cmp	r3, r2
 8003080:	d0f9      	beq.n	8003076 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003082:	4b0a      	ldr	r3, [pc, #40]	@ (80030ac <HAL_RCC_OscConfig+0x8ac>)
 8003084:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003086:	4b0a      	ldr	r3, [pc, #40]	@ (80030b0 <HAL_RCC_OscConfig+0x8b0>)
 8003088:	4013      	ands	r3, r2
 800308a:	687a      	ldr	r2, [r7, #4]
 800308c:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800308e:	00d2      	lsls	r2, r2, #3
 8003090:	4906      	ldr	r1, [pc, #24]	@ (80030ac <HAL_RCC_OscConfig+0x8ac>)
 8003092:	4313      	orrs	r3, r2
 8003094:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8003096:	4b05      	ldr	r3, [pc, #20]	@ (80030ac <HAL_RCC_OscConfig+0x8ac>)
 8003098:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800309a:	4a04      	ldr	r2, [pc, #16]	@ (80030ac <HAL_RCC_OscConfig+0x8ac>)
 800309c:	f043 0301 	orr.w	r3, r3, #1
 80030a0:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 80030a2:	2300      	movs	r3, #0
}
 80030a4:	4618      	mov	r0, r3
 80030a6:	3730      	adds	r7, #48	@ 0x30
 80030a8:	46bd      	mov	sp, r7
 80030aa:	bd80      	pop	{r7, pc}
 80030ac:	58024400 	.word	0x58024400
 80030b0:	ffff0007 	.word	0xffff0007

080030b4 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80030b4:	b580      	push	{r7, lr}
 80030b6:	b086      	sub	sp, #24
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	6078      	str	r0, [r7, #4]
 80030bc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d101      	bne.n	80030c8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80030c4:	2301      	movs	r3, #1
 80030c6:	e19c      	b.n	8003402 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80030c8:	4b8a      	ldr	r3, [pc, #552]	@ (80032f4 <HAL_RCC_ClockConfig+0x240>)
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f003 030f 	and.w	r3, r3, #15
 80030d0:	683a      	ldr	r2, [r7, #0]
 80030d2:	429a      	cmp	r2, r3
 80030d4:	d910      	bls.n	80030f8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030d6:	4b87      	ldr	r3, [pc, #540]	@ (80032f4 <HAL_RCC_ClockConfig+0x240>)
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f023 020f 	bic.w	r2, r3, #15
 80030de:	4985      	ldr	r1, [pc, #532]	@ (80032f4 <HAL_RCC_ClockConfig+0x240>)
 80030e0:	683b      	ldr	r3, [r7, #0]
 80030e2:	4313      	orrs	r3, r2
 80030e4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80030e6:	4b83      	ldr	r3, [pc, #524]	@ (80032f4 <HAL_RCC_ClockConfig+0x240>)
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	f003 030f 	and.w	r3, r3, #15
 80030ee:	683a      	ldr	r2, [r7, #0]
 80030f0:	429a      	cmp	r2, r3
 80030f2:	d001      	beq.n	80030f8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80030f4:	2301      	movs	r3, #1
 80030f6:	e184      	b.n	8003402 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	f003 0304 	and.w	r3, r3, #4
 8003100:	2b00      	cmp	r3, #0
 8003102:	d010      	beq.n	8003126 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	691a      	ldr	r2, [r3, #16]
 8003108:	4b7b      	ldr	r3, [pc, #492]	@ (80032f8 <HAL_RCC_ClockConfig+0x244>)
 800310a:	699b      	ldr	r3, [r3, #24]
 800310c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003110:	429a      	cmp	r2, r3
 8003112:	d908      	bls.n	8003126 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003114:	4b78      	ldr	r3, [pc, #480]	@ (80032f8 <HAL_RCC_ClockConfig+0x244>)
 8003116:	699b      	ldr	r3, [r3, #24]
 8003118:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	691b      	ldr	r3, [r3, #16]
 8003120:	4975      	ldr	r1, [pc, #468]	@ (80032f8 <HAL_RCC_ClockConfig+0x244>)
 8003122:	4313      	orrs	r3, r2
 8003124:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f003 0308 	and.w	r3, r3, #8
 800312e:	2b00      	cmp	r3, #0
 8003130:	d010      	beq.n	8003154 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	695a      	ldr	r2, [r3, #20]
 8003136:	4b70      	ldr	r3, [pc, #448]	@ (80032f8 <HAL_RCC_ClockConfig+0x244>)
 8003138:	69db      	ldr	r3, [r3, #28]
 800313a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800313e:	429a      	cmp	r2, r3
 8003140:	d908      	bls.n	8003154 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003142:	4b6d      	ldr	r3, [pc, #436]	@ (80032f8 <HAL_RCC_ClockConfig+0x244>)
 8003144:	69db      	ldr	r3, [r3, #28]
 8003146:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	695b      	ldr	r3, [r3, #20]
 800314e:	496a      	ldr	r1, [pc, #424]	@ (80032f8 <HAL_RCC_ClockConfig+0x244>)
 8003150:	4313      	orrs	r3, r2
 8003152:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	f003 0310 	and.w	r3, r3, #16
 800315c:	2b00      	cmp	r3, #0
 800315e:	d010      	beq.n	8003182 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	699a      	ldr	r2, [r3, #24]
 8003164:	4b64      	ldr	r3, [pc, #400]	@ (80032f8 <HAL_RCC_ClockConfig+0x244>)
 8003166:	69db      	ldr	r3, [r3, #28]
 8003168:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800316c:	429a      	cmp	r2, r3
 800316e:	d908      	bls.n	8003182 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003170:	4b61      	ldr	r3, [pc, #388]	@ (80032f8 <HAL_RCC_ClockConfig+0x244>)
 8003172:	69db      	ldr	r3, [r3, #28]
 8003174:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	699b      	ldr	r3, [r3, #24]
 800317c:	495e      	ldr	r1, [pc, #376]	@ (80032f8 <HAL_RCC_ClockConfig+0x244>)
 800317e:	4313      	orrs	r3, r2
 8003180:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f003 0320 	and.w	r3, r3, #32
 800318a:	2b00      	cmp	r3, #0
 800318c:	d010      	beq.n	80031b0 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	69da      	ldr	r2, [r3, #28]
 8003192:	4b59      	ldr	r3, [pc, #356]	@ (80032f8 <HAL_RCC_ClockConfig+0x244>)
 8003194:	6a1b      	ldr	r3, [r3, #32]
 8003196:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800319a:	429a      	cmp	r2, r3
 800319c:	d908      	bls.n	80031b0 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800319e:	4b56      	ldr	r3, [pc, #344]	@ (80032f8 <HAL_RCC_ClockConfig+0x244>)
 80031a0:	6a1b      	ldr	r3, [r3, #32]
 80031a2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	69db      	ldr	r3, [r3, #28]
 80031aa:	4953      	ldr	r1, [pc, #332]	@ (80032f8 <HAL_RCC_ClockConfig+0x244>)
 80031ac:	4313      	orrs	r3, r2
 80031ae:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	f003 0302 	and.w	r3, r3, #2
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d010      	beq.n	80031de <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	68da      	ldr	r2, [r3, #12]
 80031c0:	4b4d      	ldr	r3, [pc, #308]	@ (80032f8 <HAL_RCC_ClockConfig+0x244>)
 80031c2:	699b      	ldr	r3, [r3, #24]
 80031c4:	f003 030f 	and.w	r3, r3, #15
 80031c8:	429a      	cmp	r2, r3
 80031ca:	d908      	bls.n	80031de <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80031cc:	4b4a      	ldr	r3, [pc, #296]	@ (80032f8 <HAL_RCC_ClockConfig+0x244>)
 80031ce:	699b      	ldr	r3, [r3, #24]
 80031d0:	f023 020f 	bic.w	r2, r3, #15
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	68db      	ldr	r3, [r3, #12]
 80031d8:	4947      	ldr	r1, [pc, #284]	@ (80032f8 <HAL_RCC_ClockConfig+0x244>)
 80031da:	4313      	orrs	r3, r2
 80031dc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f003 0301 	and.w	r3, r3, #1
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d055      	beq.n	8003296 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80031ea:	4b43      	ldr	r3, [pc, #268]	@ (80032f8 <HAL_RCC_ClockConfig+0x244>)
 80031ec:	699b      	ldr	r3, [r3, #24]
 80031ee:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	689b      	ldr	r3, [r3, #8]
 80031f6:	4940      	ldr	r1, [pc, #256]	@ (80032f8 <HAL_RCC_ClockConfig+0x244>)
 80031f8:	4313      	orrs	r3, r2
 80031fa:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	685b      	ldr	r3, [r3, #4]
 8003200:	2b02      	cmp	r3, #2
 8003202:	d107      	bne.n	8003214 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003204:	4b3c      	ldr	r3, [pc, #240]	@ (80032f8 <HAL_RCC_ClockConfig+0x244>)
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800320c:	2b00      	cmp	r3, #0
 800320e:	d121      	bne.n	8003254 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003210:	2301      	movs	r3, #1
 8003212:	e0f6      	b.n	8003402 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	685b      	ldr	r3, [r3, #4]
 8003218:	2b03      	cmp	r3, #3
 800321a:	d107      	bne.n	800322c <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800321c:	4b36      	ldr	r3, [pc, #216]	@ (80032f8 <HAL_RCC_ClockConfig+0x244>)
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003224:	2b00      	cmp	r3, #0
 8003226:	d115      	bne.n	8003254 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003228:	2301      	movs	r3, #1
 800322a:	e0ea      	b.n	8003402 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	685b      	ldr	r3, [r3, #4]
 8003230:	2b01      	cmp	r3, #1
 8003232:	d107      	bne.n	8003244 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003234:	4b30      	ldr	r3, [pc, #192]	@ (80032f8 <HAL_RCC_ClockConfig+0x244>)
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800323c:	2b00      	cmp	r3, #0
 800323e:	d109      	bne.n	8003254 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003240:	2301      	movs	r3, #1
 8003242:	e0de      	b.n	8003402 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003244:	4b2c      	ldr	r3, [pc, #176]	@ (80032f8 <HAL_RCC_ClockConfig+0x244>)
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f003 0304 	and.w	r3, r3, #4
 800324c:	2b00      	cmp	r3, #0
 800324e:	d101      	bne.n	8003254 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003250:	2301      	movs	r3, #1
 8003252:	e0d6      	b.n	8003402 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003254:	4b28      	ldr	r3, [pc, #160]	@ (80032f8 <HAL_RCC_ClockConfig+0x244>)
 8003256:	691b      	ldr	r3, [r3, #16]
 8003258:	f023 0207 	bic.w	r2, r3, #7
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	685b      	ldr	r3, [r3, #4]
 8003260:	4925      	ldr	r1, [pc, #148]	@ (80032f8 <HAL_RCC_ClockConfig+0x244>)
 8003262:	4313      	orrs	r3, r2
 8003264:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003266:	f7fe f90b 	bl	8001480 <HAL_GetTick>
 800326a:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800326c:	e00a      	b.n	8003284 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800326e:	f7fe f907 	bl	8001480 <HAL_GetTick>
 8003272:	4602      	mov	r2, r0
 8003274:	697b      	ldr	r3, [r7, #20]
 8003276:	1ad3      	subs	r3, r2, r3
 8003278:	f241 3288 	movw	r2, #5000	@ 0x1388
 800327c:	4293      	cmp	r3, r2
 800327e:	d901      	bls.n	8003284 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8003280:	2303      	movs	r3, #3
 8003282:	e0be      	b.n	8003402 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003284:	4b1c      	ldr	r3, [pc, #112]	@ (80032f8 <HAL_RCC_ClockConfig+0x244>)
 8003286:	691b      	ldr	r3, [r3, #16]
 8003288:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	685b      	ldr	r3, [r3, #4]
 8003290:	00db      	lsls	r3, r3, #3
 8003292:	429a      	cmp	r2, r3
 8003294:	d1eb      	bne.n	800326e <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f003 0302 	and.w	r3, r3, #2
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d010      	beq.n	80032c4 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	68da      	ldr	r2, [r3, #12]
 80032a6:	4b14      	ldr	r3, [pc, #80]	@ (80032f8 <HAL_RCC_ClockConfig+0x244>)
 80032a8:	699b      	ldr	r3, [r3, #24]
 80032aa:	f003 030f 	and.w	r3, r3, #15
 80032ae:	429a      	cmp	r2, r3
 80032b0:	d208      	bcs.n	80032c4 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80032b2:	4b11      	ldr	r3, [pc, #68]	@ (80032f8 <HAL_RCC_ClockConfig+0x244>)
 80032b4:	699b      	ldr	r3, [r3, #24]
 80032b6:	f023 020f 	bic.w	r2, r3, #15
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	68db      	ldr	r3, [r3, #12]
 80032be:	490e      	ldr	r1, [pc, #56]	@ (80032f8 <HAL_RCC_ClockConfig+0x244>)
 80032c0:	4313      	orrs	r3, r2
 80032c2:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80032c4:	4b0b      	ldr	r3, [pc, #44]	@ (80032f4 <HAL_RCC_ClockConfig+0x240>)
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	f003 030f 	and.w	r3, r3, #15
 80032cc:	683a      	ldr	r2, [r7, #0]
 80032ce:	429a      	cmp	r2, r3
 80032d0:	d214      	bcs.n	80032fc <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032d2:	4b08      	ldr	r3, [pc, #32]	@ (80032f4 <HAL_RCC_ClockConfig+0x240>)
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f023 020f 	bic.w	r2, r3, #15
 80032da:	4906      	ldr	r1, [pc, #24]	@ (80032f4 <HAL_RCC_ClockConfig+0x240>)
 80032dc:	683b      	ldr	r3, [r7, #0]
 80032de:	4313      	orrs	r3, r2
 80032e0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80032e2:	4b04      	ldr	r3, [pc, #16]	@ (80032f4 <HAL_RCC_ClockConfig+0x240>)
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f003 030f 	and.w	r3, r3, #15
 80032ea:	683a      	ldr	r2, [r7, #0]
 80032ec:	429a      	cmp	r2, r3
 80032ee:	d005      	beq.n	80032fc <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80032f0:	2301      	movs	r3, #1
 80032f2:	e086      	b.n	8003402 <HAL_RCC_ClockConfig+0x34e>
 80032f4:	52002000 	.word	0x52002000
 80032f8:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	f003 0304 	and.w	r3, r3, #4
 8003304:	2b00      	cmp	r3, #0
 8003306:	d010      	beq.n	800332a <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	691a      	ldr	r2, [r3, #16]
 800330c:	4b3f      	ldr	r3, [pc, #252]	@ (800340c <HAL_RCC_ClockConfig+0x358>)
 800330e:	699b      	ldr	r3, [r3, #24]
 8003310:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003314:	429a      	cmp	r2, r3
 8003316:	d208      	bcs.n	800332a <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003318:	4b3c      	ldr	r3, [pc, #240]	@ (800340c <HAL_RCC_ClockConfig+0x358>)
 800331a:	699b      	ldr	r3, [r3, #24]
 800331c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	691b      	ldr	r3, [r3, #16]
 8003324:	4939      	ldr	r1, [pc, #228]	@ (800340c <HAL_RCC_ClockConfig+0x358>)
 8003326:	4313      	orrs	r3, r2
 8003328:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f003 0308 	and.w	r3, r3, #8
 8003332:	2b00      	cmp	r3, #0
 8003334:	d010      	beq.n	8003358 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	695a      	ldr	r2, [r3, #20]
 800333a:	4b34      	ldr	r3, [pc, #208]	@ (800340c <HAL_RCC_ClockConfig+0x358>)
 800333c:	69db      	ldr	r3, [r3, #28]
 800333e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003342:	429a      	cmp	r2, r3
 8003344:	d208      	bcs.n	8003358 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003346:	4b31      	ldr	r3, [pc, #196]	@ (800340c <HAL_RCC_ClockConfig+0x358>)
 8003348:	69db      	ldr	r3, [r3, #28]
 800334a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	695b      	ldr	r3, [r3, #20]
 8003352:	492e      	ldr	r1, [pc, #184]	@ (800340c <HAL_RCC_ClockConfig+0x358>)
 8003354:	4313      	orrs	r3, r2
 8003356:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	f003 0310 	and.w	r3, r3, #16
 8003360:	2b00      	cmp	r3, #0
 8003362:	d010      	beq.n	8003386 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	699a      	ldr	r2, [r3, #24]
 8003368:	4b28      	ldr	r3, [pc, #160]	@ (800340c <HAL_RCC_ClockConfig+0x358>)
 800336a:	69db      	ldr	r3, [r3, #28]
 800336c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003370:	429a      	cmp	r2, r3
 8003372:	d208      	bcs.n	8003386 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003374:	4b25      	ldr	r3, [pc, #148]	@ (800340c <HAL_RCC_ClockConfig+0x358>)
 8003376:	69db      	ldr	r3, [r3, #28]
 8003378:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	699b      	ldr	r3, [r3, #24]
 8003380:	4922      	ldr	r1, [pc, #136]	@ (800340c <HAL_RCC_ClockConfig+0x358>)
 8003382:	4313      	orrs	r3, r2
 8003384:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f003 0320 	and.w	r3, r3, #32
 800338e:	2b00      	cmp	r3, #0
 8003390:	d010      	beq.n	80033b4 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	69da      	ldr	r2, [r3, #28]
 8003396:	4b1d      	ldr	r3, [pc, #116]	@ (800340c <HAL_RCC_ClockConfig+0x358>)
 8003398:	6a1b      	ldr	r3, [r3, #32]
 800339a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800339e:	429a      	cmp	r2, r3
 80033a0:	d208      	bcs.n	80033b4 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80033a2:	4b1a      	ldr	r3, [pc, #104]	@ (800340c <HAL_RCC_ClockConfig+0x358>)
 80033a4:	6a1b      	ldr	r3, [r3, #32]
 80033a6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	69db      	ldr	r3, [r3, #28]
 80033ae:	4917      	ldr	r1, [pc, #92]	@ (800340c <HAL_RCC_ClockConfig+0x358>)
 80033b0:	4313      	orrs	r3, r2
 80033b2:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80033b4:	f000 f834 	bl	8003420 <HAL_RCC_GetSysClockFreq>
 80033b8:	4602      	mov	r2, r0
 80033ba:	4b14      	ldr	r3, [pc, #80]	@ (800340c <HAL_RCC_ClockConfig+0x358>)
 80033bc:	699b      	ldr	r3, [r3, #24]
 80033be:	0a1b      	lsrs	r3, r3, #8
 80033c0:	f003 030f 	and.w	r3, r3, #15
 80033c4:	4912      	ldr	r1, [pc, #72]	@ (8003410 <HAL_RCC_ClockConfig+0x35c>)
 80033c6:	5ccb      	ldrb	r3, [r1, r3]
 80033c8:	f003 031f 	and.w	r3, r3, #31
 80033cc:	fa22 f303 	lsr.w	r3, r2, r3
 80033d0:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80033d2:	4b0e      	ldr	r3, [pc, #56]	@ (800340c <HAL_RCC_ClockConfig+0x358>)
 80033d4:	699b      	ldr	r3, [r3, #24]
 80033d6:	f003 030f 	and.w	r3, r3, #15
 80033da:	4a0d      	ldr	r2, [pc, #52]	@ (8003410 <HAL_RCC_ClockConfig+0x35c>)
 80033dc:	5cd3      	ldrb	r3, [r2, r3]
 80033de:	f003 031f 	and.w	r3, r3, #31
 80033e2:	693a      	ldr	r2, [r7, #16]
 80033e4:	fa22 f303 	lsr.w	r3, r2, r3
 80033e8:	4a0a      	ldr	r2, [pc, #40]	@ (8003414 <HAL_RCC_ClockConfig+0x360>)
 80033ea:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80033ec:	4a0a      	ldr	r2, [pc, #40]	@ (8003418 <HAL_RCC_ClockConfig+0x364>)
 80033ee:	693b      	ldr	r3, [r7, #16]
 80033f0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80033f2:	4b0a      	ldr	r3, [pc, #40]	@ (800341c <HAL_RCC_ClockConfig+0x368>)
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	4618      	mov	r0, r3
 80033f8:	f7fd fff8 	bl	80013ec <HAL_InitTick>
 80033fc:	4603      	mov	r3, r0
 80033fe:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8003400:	7bfb      	ldrb	r3, [r7, #15]
}
 8003402:	4618      	mov	r0, r3
 8003404:	3718      	adds	r7, #24
 8003406:	46bd      	mov	sp, r7
 8003408:	bd80      	pop	{r7, pc}
 800340a:	bf00      	nop
 800340c:	58024400 	.word	0x58024400
 8003410:	080074b4 	.word	0x080074b4
 8003414:	2400000c 	.word	0x2400000c
 8003418:	24000008 	.word	0x24000008
 800341c:	24000010 	.word	0x24000010

08003420 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003420:	b480      	push	{r7}
 8003422:	b089      	sub	sp, #36	@ 0x24
 8003424:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003426:	4bb3      	ldr	r3, [pc, #716]	@ (80036f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003428:	691b      	ldr	r3, [r3, #16]
 800342a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800342e:	2b18      	cmp	r3, #24
 8003430:	f200 8155 	bhi.w	80036de <HAL_RCC_GetSysClockFreq+0x2be>
 8003434:	a201      	add	r2, pc, #4	@ (adr r2, 800343c <HAL_RCC_GetSysClockFreq+0x1c>)
 8003436:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800343a:	bf00      	nop
 800343c:	080034a1 	.word	0x080034a1
 8003440:	080036df 	.word	0x080036df
 8003444:	080036df 	.word	0x080036df
 8003448:	080036df 	.word	0x080036df
 800344c:	080036df 	.word	0x080036df
 8003450:	080036df 	.word	0x080036df
 8003454:	080036df 	.word	0x080036df
 8003458:	080036df 	.word	0x080036df
 800345c:	080034c7 	.word	0x080034c7
 8003460:	080036df 	.word	0x080036df
 8003464:	080036df 	.word	0x080036df
 8003468:	080036df 	.word	0x080036df
 800346c:	080036df 	.word	0x080036df
 8003470:	080036df 	.word	0x080036df
 8003474:	080036df 	.word	0x080036df
 8003478:	080036df 	.word	0x080036df
 800347c:	080034cd 	.word	0x080034cd
 8003480:	080036df 	.word	0x080036df
 8003484:	080036df 	.word	0x080036df
 8003488:	080036df 	.word	0x080036df
 800348c:	080036df 	.word	0x080036df
 8003490:	080036df 	.word	0x080036df
 8003494:	080036df 	.word	0x080036df
 8003498:	080036df 	.word	0x080036df
 800349c:	080034d3 	.word	0x080034d3
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80034a0:	4b94      	ldr	r3, [pc, #592]	@ (80036f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	f003 0320 	and.w	r3, r3, #32
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d009      	beq.n	80034c0 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80034ac:	4b91      	ldr	r3, [pc, #580]	@ (80036f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	08db      	lsrs	r3, r3, #3
 80034b2:	f003 0303 	and.w	r3, r3, #3
 80034b6:	4a90      	ldr	r2, [pc, #576]	@ (80036f8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80034b8:	fa22 f303 	lsr.w	r3, r2, r3
 80034bc:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 80034be:	e111      	b.n	80036e4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80034c0:	4b8d      	ldr	r3, [pc, #564]	@ (80036f8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80034c2:	61bb      	str	r3, [r7, #24]
      break;
 80034c4:	e10e      	b.n	80036e4 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80034c6:	4b8d      	ldr	r3, [pc, #564]	@ (80036fc <HAL_RCC_GetSysClockFreq+0x2dc>)
 80034c8:	61bb      	str	r3, [r7, #24]
      break;
 80034ca:	e10b      	b.n	80036e4 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80034cc:	4b8c      	ldr	r3, [pc, #560]	@ (8003700 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80034ce:	61bb      	str	r3, [r7, #24]
      break;
 80034d0:	e108      	b.n	80036e4 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80034d2:	4b88      	ldr	r3, [pc, #544]	@ (80036f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80034d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80034d6:	f003 0303 	and.w	r3, r3, #3
 80034da:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80034dc:	4b85      	ldr	r3, [pc, #532]	@ (80036f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80034de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80034e0:	091b      	lsrs	r3, r3, #4
 80034e2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80034e6:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80034e8:	4b82      	ldr	r3, [pc, #520]	@ (80036f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80034ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034ec:	f003 0301 	and.w	r3, r3, #1
 80034f0:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80034f2:	4b80      	ldr	r3, [pc, #512]	@ (80036f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80034f4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80034f6:	08db      	lsrs	r3, r3, #3
 80034f8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80034fc:	68fa      	ldr	r2, [r7, #12]
 80034fe:	fb02 f303 	mul.w	r3, r2, r3
 8003502:	ee07 3a90 	vmov	s15, r3
 8003506:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800350a:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800350e:	693b      	ldr	r3, [r7, #16]
 8003510:	2b00      	cmp	r3, #0
 8003512:	f000 80e1 	beq.w	80036d8 <HAL_RCC_GetSysClockFreq+0x2b8>
 8003516:	697b      	ldr	r3, [r7, #20]
 8003518:	2b02      	cmp	r3, #2
 800351a:	f000 8083 	beq.w	8003624 <HAL_RCC_GetSysClockFreq+0x204>
 800351e:	697b      	ldr	r3, [r7, #20]
 8003520:	2b02      	cmp	r3, #2
 8003522:	f200 80a1 	bhi.w	8003668 <HAL_RCC_GetSysClockFreq+0x248>
 8003526:	697b      	ldr	r3, [r7, #20]
 8003528:	2b00      	cmp	r3, #0
 800352a:	d003      	beq.n	8003534 <HAL_RCC_GetSysClockFreq+0x114>
 800352c:	697b      	ldr	r3, [r7, #20]
 800352e:	2b01      	cmp	r3, #1
 8003530:	d056      	beq.n	80035e0 <HAL_RCC_GetSysClockFreq+0x1c0>
 8003532:	e099      	b.n	8003668 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003534:	4b6f      	ldr	r3, [pc, #444]	@ (80036f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	f003 0320 	and.w	r3, r3, #32
 800353c:	2b00      	cmp	r3, #0
 800353e:	d02d      	beq.n	800359c <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003540:	4b6c      	ldr	r3, [pc, #432]	@ (80036f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	08db      	lsrs	r3, r3, #3
 8003546:	f003 0303 	and.w	r3, r3, #3
 800354a:	4a6b      	ldr	r2, [pc, #428]	@ (80036f8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800354c:	fa22 f303 	lsr.w	r3, r2, r3
 8003550:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	ee07 3a90 	vmov	s15, r3
 8003558:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800355c:	693b      	ldr	r3, [r7, #16]
 800355e:	ee07 3a90 	vmov	s15, r3
 8003562:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003566:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800356a:	4b62      	ldr	r3, [pc, #392]	@ (80036f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800356c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800356e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003572:	ee07 3a90 	vmov	s15, r3
 8003576:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800357a:	ed97 6a02 	vldr	s12, [r7, #8]
 800357e:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8003704 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003582:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003586:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800358a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800358e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003592:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003596:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800359a:	e087      	b.n	80036ac <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800359c:	693b      	ldr	r3, [r7, #16]
 800359e:	ee07 3a90 	vmov	s15, r3
 80035a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80035a6:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8003708 <HAL_RCC_GetSysClockFreq+0x2e8>
 80035aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80035ae:	4b51      	ldr	r3, [pc, #324]	@ (80036f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80035b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80035b6:	ee07 3a90 	vmov	s15, r3
 80035ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80035be:	ed97 6a02 	vldr	s12, [r7, #8]
 80035c2:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8003704 <HAL_RCC_GetSysClockFreq+0x2e4>
 80035c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80035ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80035ce:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80035d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80035d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80035da:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80035de:	e065      	b.n	80036ac <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80035e0:	693b      	ldr	r3, [r7, #16]
 80035e2:	ee07 3a90 	vmov	s15, r3
 80035e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80035ea:	eddf 6a48 	vldr	s13, [pc, #288]	@ 800370c <HAL_RCC_GetSysClockFreq+0x2ec>
 80035ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80035f2:	4b40      	ldr	r3, [pc, #256]	@ (80036f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80035f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80035fa:	ee07 3a90 	vmov	s15, r3
 80035fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003602:	ed97 6a02 	vldr	s12, [r7, #8]
 8003606:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8003704 <HAL_RCC_GetSysClockFreq+0x2e4>
 800360a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800360e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003612:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003616:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800361a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800361e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003622:	e043      	b.n	80036ac <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003624:	693b      	ldr	r3, [r7, #16]
 8003626:	ee07 3a90 	vmov	s15, r3
 800362a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800362e:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8003710 <HAL_RCC_GetSysClockFreq+0x2f0>
 8003632:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003636:	4b2f      	ldr	r3, [pc, #188]	@ (80036f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003638:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800363a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800363e:	ee07 3a90 	vmov	s15, r3
 8003642:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003646:	ed97 6a02 	vldr	s12, [r7, #8]
 800364a:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8003704 <HAL_RCC_GetSysClockFreq+0x2e4>
 800364e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003652:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003656:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800365a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800365e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003662:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003666:	e021      	b.n	80036ac <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003668:	693b      	ldr	r3, [r7, #16]
 800366a:	ee07 3a90 	vmov	s15, r3
 800366e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003672:	eddf 6a26 	vldr	s13, [pc, #152]	@ 800370c <HAL_RCC_GetSysClockFreq+0x2ec>
 8003676:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800367a:	4b1e      	ldr	r3, [pc, #120]	@ (80036f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800367c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800367e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003682:	ee07 3a90 	vmov	s15, r3
 8003686:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800368a:	ed97 6a02 	vldr	s12, [r7, #8]
 800368e:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8003704 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003692:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003696:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800369a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800369e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80036a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80036a6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80036aa:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80036ac:	4b11      	ldr	r3, [pc, #68]	@ (80036f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80036ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036b0:	0a5b      	lsrs	r3, r3, #9
 80036b2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80036b6:	3301      	adds	r3, #1
 80036b8:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80036ba:	683b      	ldr	r3, [r7, #0]
 80036bc:	ee07 3a90 	vmov	s15, r3
 80036c0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80036c4:	edd7 6a07 	vldr	s13, [r7, #28]
 80036c8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80036cc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80036d0:	ee17 3a90 	vmov	r3, s15
 80036d4:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80036d6:	e005      	b.n	80036e4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80036d8:	2300      	movs	r3, #0
 80036da:	61bb      	str	r3, [r7, #24]
      break;
 80036dc:	e002      	b.n	80036e4 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80036de:	4b07      	ldr	r3, [pc, #28]	@ (80036fc <HAL_RCC_GetSysClockFreq+0x2dc>)
 80036e0:	61bb      	str	r3, [r7, #24]
      break;
 80036e2:	bf00      	nop
  }

  return sysclockfreq;
 80036e4:	69bb      	ldr	r3, [r7, #24]
}
 80036e6:	4618      	mov	r0, r3
 80036e8:	3724      	adds	r7, #36	@ 0x24
 80036ea:	46bd      	mov	sp, r7
 80036ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f0:	4770      	bx	lr
 80036f2:	bf00      	nop
 80036f4:	58024400 	.word	0x58024400
 80036f8:	03d09000 	.word	0x03d09000
 80036fc:	003d0900 	.word	0x003d0900
 8003700:	017d7840 	.word	0x017d7840
 8003704:	46000000 	.word	0x46000000
 8003708:	4c742400 	.word	0x4c742400
 800370c:	4a742400 	.word	0x4a742400
 8003710:	4bbebc20 	.word	0x4bbebc20

08003714 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003714:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003718:	b0ca      	sub	sp, #296	@ 0x128
 800371a:	af00      	add	r7, sp, #0
 800371c:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003720:	2300      	movs	r3, #0
 8003722:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003726:	2300      	movs	r3, #0
 8003728:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800372c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003730:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003734:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8003738:	2500      	movs	r5, #0
 800373a:	ea54 0305 	orrs.w	r3, r4, r5
 800373e:	d049      	beq.n	80037d4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8003740:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003744:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003746:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800374a:	d02f      	beq.n	80037ac <HAL_RCCEx_PeriphCLKConfig+0x98>
 800374c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003750:	d828      	bhi.n	80037a4 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8003752:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003756:	d01a      	beq.n	800378e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003758:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800375c:	d822      	bhi.n	80037a4 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800375e:	2b00      	cmp	r3, #0
 8003760:	d003      	beq.n	800376a <HAL_RCCEx_PeriphCLKConfig+0x56>
 8003762:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003766:	d007      	beq.n	8003778 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003768:	e01c      	b.n	80037a4 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800376a:	4bb8      	ldr	r3, [pc, #736]	@ (8003a4c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800376c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800376e:	4ab7      	ldr	r2, [pc, #732]	@ (8003a4c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003770:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003774:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003776:	e01a      	b.n	80037ae <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003778:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800377c:	3308      	adds	r3, #8
 800377e:	2102      	movs	r1, #2
 8003780:	4618      	mov	r0, r3
 8003782:	f001 f9d1 	bl	8004b28 <RCCEx_PLL2_Config>
 8003786:	4603      	mov	r3, r0
 8003788:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800378c:	e00f      	b.n	80037ae <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800378e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003792:	3328      	adds	r3, #40	@ 0x28
 8003794:	2102      	movs	r1, #2
 8003796:	4618      	mov	r0, r3
 8003798:	f001 fa78 	bl	8004c8c <RCCEx_PLL3_Config>
 800379c:	4603      	mov	r3, r0
 800379e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80037a2:	e004      	b.n	80037ae <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80037a4:	2301      	movs	r3, #1
 80037a6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80037aa:	e000      	b.n	80037ae <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 80037ac:	bf00      	nop
    }

    if (ret == HAL_OK)
 80037ae:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d10a      	bne.n	80037cc <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80037b6:	4ba5      	ldr	r3, [pc, #660]	@ (8003a4c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80037b8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80037ba:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80037be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80037c2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80037c4:	4aa1      	ldr	r2, [pc, #644]	@ (8003a4c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80037c6:	430b      	orrs	r3, r1
 80037c8:	6513      	str	r3, [r2, #80]	@ 0x50
 80037ca:	e003      	b.n	80037d4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80037cc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80037d0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80037d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80037d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037dc:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 80037e0:	f04f 0900 	mov.w	r9, #0
 80037e4:	ea58 0309 	orrs.w	r3, r8, r9
 80037e8:	d047      	beq.n	800387a <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 80037ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80037ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80037f0:	2b04      	cmp	r3, #4
 80037f2:	d82a      	bhi.n	800384a <HAL_RCCEx_PeriphCLKConfig+0x136>
 80037f4:	a201      	add	r2, pc, #4	@ (adr r2, 80037fc <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80037f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037fa:	bf00      	nop
 80037fc:	08003811 	.word	0x08003811
 8003800:	0800381f 	.word	0x0800381f
 8003804:	08003835 	.word	0x08003835
 8003808:	08003853 	.word	0x08003853
 800380c:	08003853 	.word	0x08003853
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003810:	4b8e      	ldr	r3, [pc, #568]	@ (8003a4c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003812:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003814:	4a8d      	ldr	r2, [pc, #564]	@ (8003a4c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003816:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800381a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800381c:	e01a      	b.n	8003854 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800381e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003822:	3308      	adds	r3, #8
 8003824:	2100      	movs	r1, #0
 8003826:	4618      	mov	r0, r3
 8003828:	f001 f97e 	bl	8004b28 <RCCEx_PLL2_Config>
 800382c:	4603      	mov	r3, r0
 800382e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003832:	e00f      	b.n	8003854 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003834:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003838:	3328      	adds	r3, #40	@ 0x28
 800383a:	2100      	movs	r1, #0
 800383c:	4618      	mov	r0, r3
 800383e:	f001 fa25 	bl	8004c8c <RCCEx_PLL3_Config>
 8003842:	4603      	mov	r3, r0
 8003844:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003848:	e004      	b.n	8003854 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800384a:	2301      	movs	r3, #1
 800384c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003850:	e000      	b.n	8003854 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8003852:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003854:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003858:	2b00      	cmp	r3, #0
 800385a:	d10a      	bne.n	8003872 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800385c:	4b7b      	ldr	r3, [pc, #492]	@ (8003a4c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800385e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003860:	f023 0107 	bic.w	r1, r3, #7
 8003864:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003868:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800386a:	4a78      	ldr	r2, [pc, #480]	@ (8003a4c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800386c:	430b      	orrs	r3, r1
 800386e:	6513      	str	r3, [r2, #80]	@ 0x50
 8003870:	e003      	b.n	800387a <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003872:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003876:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800387a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800387e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003882:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8003886:	f04f 0b00 	mov.w	fp, #0
 800388a:	ea5a 030b 	orrs.w	r3, sl, fp
 800388e:	d04c      	beq.n	800392a <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8003890:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003894:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003896:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800389a:	d030      	beq.n	80038fe <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 800389c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80038a0:	d829      	bhi.n	80038f6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80038a2:	2bc0      	cmp	r3, #192	@ 0xc0
 80038a4:	d02d      	beq.n	8003902 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80038a6:	2bc0      	cmp	r3, #192	@ 0xc0
 80038a8:	d825      	bhi.n	80038f6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80038aa:	2b80      	cmp	r3, #128	@ 0x80
 80038ac:	d018      	beq.n	80038e0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 80038ae:	2b80      	cmp	r3, #128	@ 0x80
 80038b0:	d821      	bhi.n	80038f6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d002      	beq.n	80038bc <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 80038b6:	2b40      	cmp	r3, #64	@ 0x40
 80038b8:	d007      	beq.n	80038ca <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 80038ba:	e01c      	b.n	80038f6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80038bc:	4b63      	ldr	r3, [pc, #396]	@ (8003a4c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80038be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038c0:	4a62      	ldr	r2, [pc, #392]	@ (8003a4c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80038c2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80038c6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80038c8:	e01c      	b.n	8003904 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80038ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80038ce:	3308      	adds	r3, #8
 80038d0:	2100      	movs	r1, #0
 80038d2:	4618      	mov	r0, r3
 80038d4:	f001 f928 	bl	8004b28 <RCCEx_PLL2_Config>
 80038d8:	4603      	mov	r3, r0
 80038da:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80038de:	e011      	b.n	8003904 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80038e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80038e4:	3328      	adds	r3, #40	@ 0x28
 80038e6:	2100      	movs	r1, #0
 80038e8:	4618      	mov	r0, r3
 80038ea:	f001 f9cf 	bl	8004c8c <RCCEx_PLL3_Config>
 80038ee:	4603      	mov	r3, r0
 80038f0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80038f4:	e006      	b.n	8003904 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80038f6:	2301      	movs	r3, #1
 80038f8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80038fc:	e002      	b.n	8003904 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80038fe:	bf00      	nop
 8003900:	e000      	b.n	8003904 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8003902:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003904:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003908:	2b00      	cmp	r3, #0
 800390a:	d10a      	bne.n	8003922 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800390c:	4b4f      	ldr	r3, [pc, #316]	@ (8003a4c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800390e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003910:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8003914:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003918:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800391a:	4a4c      	ldr	r2, [pc, #304]	@ (8003a4c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800391c:	430b      	orrs	r3, r1
 800391e:	6513      	str	r3, [r2, #80]	@ 0x50
 8003920:	e003      	b.n	800392a <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003922:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003926:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800392a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800392e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003932:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8003936:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 800393a:	2300      	movs	r3, #0
 800393c:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8003940:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8003944:	460b      	mov	r3, r1
 8003946:	4313      	orrs	r3, r2
 8003948:	d053      	beq.n	80039f2 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800394a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800394e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8003952:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003956:	d035      	beq.n	80039c4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8003958:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800395c:	d82e      	bhi.n	80039bc <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800395e:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8003962:	d031      	beq.n	80039c8 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8003964:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8003968:	d828      	bhi.n	80039bc <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800396a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800396e:	d01a      	beq.n	80039a6 <HAL_RCCEx_PeriphCLKConfig+0x292>
 8003970:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003974:	d822      	bhi.n	80039bc <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8003976:	2b00      	cmp	r3, #0
 8003978:	d003      	beq.n	8003982 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 800397a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800397e:	d007      	beq.n	8003990 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8003980:	e01c      	b.n	80039bc <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003982:	4b32      	ldr	r3, [pc, #200]	@ (8003a4c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003984:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003986:	4a31      	ldr	r2, [pc, #196]	@ (8003a4c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003988:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800398c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800398e:	e01c      	b.n	80039ca <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003990:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003994:	3308      	adds	r3, #8
 8003996:	2100      	movs	r1, #0
 8003998:	4618      	mov	r0, r3
 800399a:	f001 f8c5 	bl	8004b28 <RCCEx_PLL2_Config>
 800399e:	4603      	mov	r3, r0
 80039a0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80039a4:	e011      	b.n	80039ca <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80039a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80039aa:	3328      	adds	r3, #40	@ 0x28
 80039ac:	2100      	movs	r1, #0
 80039ae:	4618      	mov	r0, r3
 80039b0:	f001 f96c 	bl	8004c8c <RCCEx_PLL3_Config>
 80039b4:	4603      	mov	r3, r0
 80039b6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80039ba:	e006      	b.n	80039ca <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80039bc:	2301      	movs	r3, #1
 80039be:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80039c2:	e002      	b.n	80039ca <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80039c4:	bf00      	nop
 80039c6:	e000      	b.n	80039ca <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80039c8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80039ca:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d10b      	bne.n	80039ea <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80039d2:	4b1e      	ldr	r3, [pc, #120]	@ (8003a4c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80039d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80039d6:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 80039da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80039de:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80039e2:	4a1a      	ldr	r2, [pc, #104]	@ (8003a4c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80039e4:	430b      	orrs	r3, r1
 80039e6:	6593      	str	r3, [r2, #88]	@ 0x58
 80039e8:	e003      	b.n	80039f2 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80039ea:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80039ee:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80039f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80039f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039fa:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 80039fe:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8003a02:	2300      	movs	r3, #0
 8003a04:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8003a08:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8003a0c:	460b      	mov	r3, r1
 8003a0e:	4313      	orrs	r3, r2
 8003a10:	d056      	beq.n	8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8003a12:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a16:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8003a1a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003a1e:	d038      	beq.n	8003a92 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8003a20:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003a24:	d831      	bhi.n	8003a8a <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003a26:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003a2a:	d034      	beq.n	8003a96 <HAL_RCCEx_PeriphCLKConfig+0x382>
 8003a2c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003a30:	d82b      	bhi.n	8003a8a <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003a32:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003a36:	d01d      	beq.n	8003a74 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8003a38:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003a3c:	d825      	bhi.n	8003a8a <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d006      	beq.n	8003a50 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8003a42:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003a46:	d00a      	beq.n	8003a5e <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8003a48:	e01f      	b.n	8003a8a <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003a4a:	bf00      	nop
 8003a4c:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003a50:	4ba2      	ldr	r3, [pc, #648]	@ (8003cdc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003a52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a54:	4aa1      	ldr	r2, [pc, #644]	@ (8003cdc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003a56:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003a5a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003a5c:	e01c      	b.n	8003a98 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003a5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a62:	3308      	adds	r3, #8
 8003a64:	2100      	movs	r1, #0
 8003a66:	4618      	mov	r0, r3
 8003a68:	f001 f85e 	bl	8004b28 <RCCEx_PLL2_Config>
 8003a6c:	4603      	mov	r3, r0
 8003a6e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8003a72:	e011      	b.n	8003a98 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003a74:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a78:	3328      	adds	r3, #40	@ 0x28
 8003a7a:	2100      	movs	r1, #0
 8003a7c:	4618      	mov	r0, r3
 8003a7e:	f001 f905 	bl	8004c8c <RCCEx_PLL3_Config>
 8003a82:	4603      	mov	r3, r0
 8003a84:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003a88:	e006      	b.n	8003a98 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8003a8a:	2301      	movs	r3, #1
 8003a8c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003a90:	e002      	b.n	8003a98 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8003a92:	bf00      	nop
 8003a94:	e000      	b.n	8003a98 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8003a96:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003a98:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d10b      	bne.n	8003ab8 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8003aa0:	4b8e      	ldr	r3, [pc, #568]	@ (8003cdc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003aa2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003aa4:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8003aa8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003aac:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8003ab0:	4a8a      	ldr	r2, [pc, #552]	@ (8003cdc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003ab2:	430b      	orrs	r3, r1
 8003ab4:	6593      	str	r3, [r2, #88]	@ 0x58
 8003ab6:	e003      	b.n	8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ab8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003abc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8003ac0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ac4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ac8:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8003acc:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8003ad0:	2300      	movs	r3, #0
 8003ad2:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8003ad6:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8003ada:	460b      	mov	r3, r1
 8003adc:	4313      	orrs	r3, r2
 8003ade:	d03a      	beq.n	8003b56 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8003ae0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ae4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003ae6:	2b30      	cmp	r3, #48	@ 0x30
 8003ae8:	d01f      	beq.n	8003b2a <HAL_RCCEx_PeriphCLKConfig+0x416>
 8003aea:	2b30      	cmp	r3, #48	@ 0x30
 8003aec:	d819      	bhi.n	8003b22 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8003aee:	2b20      	cmp	r3, #32
 8003af0:	d00c      	beq.n	8003b0c <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8003af2:	2b20      	cmp	r3, #32
 8003af4:	d815      	bhi.n	8003b22 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d019      	beq.n	8003b2e <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8003afa:	2b10      	cmp	r3, #16
 8003afc:	d111      	bne.n	8003b22 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003afe:	4b77      	ldr	r3, [pc, #476]	@ (8003cdc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003b00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b02:	4a76      	ldr	r2, [pc, #472]	@ (8003cdc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003b04:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003b08:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8003b0a:	e011      	b.n	8003b30 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003b0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b10:	3308      	adds	r3, #8
 8003b12:	2102      	movs	r1, #2
 8003b14:	4618      	mov	r0, r3
 8003b16:	f001 f807 	bl	8004b28 <RCCEx_PLL2_Config>
 8003b1a:	4603      	mov	r3, r0
 8003b1c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8003b20:	e006      	b.n	8003b30 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8003b22:	2301      	movs	r3, #1
 8003b24:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003b28:	e002      	b.n	8003b30 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8003b2a:	bf00      	nop
 8003b2c:	e000      	b.n	8003b30 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8003b2e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003b30:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d10a      	bne.n	8003b4e <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8003b38:	4b68      	ldr	r3, [pc, #416]	@ (8003cdc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003b3a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003b3c:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8003b40:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b44:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003b46:	4a65      	ldr	r2, [pc, #404]	@ (8003cdc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003b48:	430b      	orrs	r3, r1
 8003b4a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003b4c:	e003      	b.n	8003b56 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b4e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003b52:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8003b56:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b5e:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8003b62:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8003b66:	2300      	movs	r3, #0
 8003b68:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8003b6c:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8003b70:	460b      	mov	r3, r1
 8003b72:	4313      	orrs	r3, r2
 8003b74:	d051      	beq.n	8003c1a <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8003b76:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b7a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003b7c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003b80:	d035      	beq.n	8003bee <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8003b82:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003b86:	d82e      	bhi.n	8003be6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003b88:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003b8c:	d031      	beq.n	8003bf2 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8003b8e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003b92:	d828      	bhi.n	8003be6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003b94:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003b98:	d01a      	beq.n	8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8003b9a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003b9e:	d822      	bhi.n	8003be6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d003      	beq.n	8003bac <HAL_RCCEx_PeriphCLKConfig+0x498>
 8003ba4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003ba8:	d007      	beq.n	8003bba <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8003baa:	e01c      	b.n	8003be6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003bac:	4b4b      	ldr	r3, [pc, #300]	@ (8003cdc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003bae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003bb0:	4a4a      	ldr	r2, [pc, #296]	@ (8003cdc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003bb2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003bb6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003bb8:	e01c      	b.n	8003bf4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003bba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003bbe:	3308      	adds	r3, #8
 8003bc0:	2100      	movs	r1, #0
 8003bc2:	4618      	mov	r0, r3
 8003bc4:	f000 ffb0 	bl	8004b28 <RCCEx_PLL2_Config>
 8003bc8:	4603      	mov	r3, r0
 8003bca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003bce:	e011      	b.n	8003bf4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003bd0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003bd4:	3328      	adds	r3, #40	@ 0x28
 8003bd6:	2100      	movs	r1, #0
 8003bd8:	4618      	mov	r0, r3
 8003bda:	f001 f857 	bl	8004c8c <RCCEx_PLL3_Config>
 8003bde:	4603      	mov	r3, r0
 8003be0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003be4:	e006      	b.n	8003bf4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003be6:	2301      	movs	r3, #1
 8003be8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003bec:	e002      	b.n	8003bf4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8003bee:	bf00      	nop
 8003bf0:	e000      	b.n	8003bf4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8003bf2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003bf4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d10a      	bne.n	8003c12 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8003bfc:	4b37      	ldr	r3, [pc, #220]	@ (8003cdc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003bfe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003c00:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8003c04:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c08:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003c0a:	4a34      	ldr	r2, [pc, #208]	@ (8003cdc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003c0c:	430b      	orrs	r3, r1
 8003c0e:	6513      	str	r3, [r2, #80]	@ 0x50
 8003c10:	e003      	b.n	8003c1a <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c12:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003c16:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8003c1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c22:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8003c26:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003c2a:	2300      	movs	r3, #0
 8003c2c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8003c30:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8003c34:	460b      	mov	r3, r1
 8003c36:	4313      	orrs	r3, r2
 8003c38:	d056      	beq.n	8003ce8 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8003c3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c3e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003c40:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003c44:	d033      	beq.n	8003cae <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8003c46:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003c4a:	d82c      	bhi.n	8003ca6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003c4c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003c50:	d02f      	beq.n	8003cb2 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8003c52:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003c56:	d826      	bhi.n	8003ca6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003c58:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003c5c:	d02b      	beq.n	8003cb6 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8003c5e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003c62:	d820      	bhi.n	8003ca6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003c64:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003c68:	d012      	beq.n	8003c90 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8003c6a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003c6e:	d81a      	bhi.n	8003ca6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d022      	beq.n	8003cba <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8003c74:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003c78:	d115      	bne.n	8003ca6 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003c7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c7e:	3308      	adds	r3, #8
 8003c80:	2101      	movs	r1, #1
 8003c82:	4618      	mov	r0, r3
 8003c84:	f000 ff50 	bl	8004b28 <RCCEx_PLL2_Config>
 8003c88:	4603      	mov	r3, r0
 8003c8a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003c8e:	e015      	b.n	8003cbc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003c90:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c94:	3328      	adds	r3, #40	@ 0x28
 8003c96:	2101      	movs	r1, #1
 8003c98:	4618      	mov	r0, r3
 8003c9a:	f000 fff7 	bl	8004c8c <RCCEx_PLL3_Config>
 8003c9e:	4603      	mov	r3, r0
 8003ca0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003ca4:	e00a      	b.n	8003cbc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003ca6:	2301      	movs	r3, #1
 8003ca8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003cac:	e006      	b.n	8003cbc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003cae:	bf00      	nop
 8003cb0:	e004      	b.n	8003cbc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003cb2:	bf00      	nop
 8003cb4:	e002      	b.n	8003cbc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003cb6:	bf00      	nop
 8003cb8:	e000      	b.n	8003cbc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003cba:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003cbc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d10d      	bne.n	8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8003cc4:	4b05      	ldr	r3, [pc, #20]	@ (8003cdc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003cc6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003cc8:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8003ccc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003cd0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003cd2:	4a02      	ldr	r2, [pc, #8]	@ (8003cdc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003cd4:	430b      	orrs	r3, r1
 8003cd6:	6513      	str	r3, [r2, #80]	@ 0x50
 8003cd8:	e006      	b.n	8003ce8 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8003cda:	bf00      	nop
 8003cdc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ce0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003ce4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8003ce8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003cec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cf0:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8003cf4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003cf8:	2300      	movs	r3, #0
 8003cfa:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003cfe:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8003d02:	460b      	mov	r3, r1
 8003d04:	4313      	orrs	r3, r2
 8003d06:	d055      	beq.n	8003db4 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8003d08:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d0c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003d10:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003d14:	d033      	beq.n	8003d7e <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8003d16:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003d1a:	d82c      	bhi.n	8003d76 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003d1c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003d20:	d02f      	beq.n	8003d82 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8003d22:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003d26:	d826      	bhi.n	8003d76 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003d28:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003d2c:	d02b      	beq.n	8003d86 <HAL_RCCEx_PeriphCLKConfig+0x672>
 8003d2e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003d32:	d820      	bhi.n	8003d76 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003d34:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003d38:	d012      	beq.n	8003d60 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8003d3a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003d3e:	d81a      	bhi.n	8003d76 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d022      	beq.n	8003d8a <HAL_RCCEx_PeriphCLKConfig+0x676>
 8003d44:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003d48:	d115      	bne.n	8003d76 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003d4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d4e:	3308      	adds	r3, #8
 8003d50:	2101      	movs	r1, #1
 8003d52:	4618      	mov	r0, r3
 8003d54:	f000 fee8 	bl	8004b28 <RCCEx_PLL2_Config>
 8003d58:	4603      	mov	r3, r0
 8003d5a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003d5e:	e015      	b.n	8003d8c <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003d60:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d64:	3328      	adds	r3, #40	@ 0x28
 8003d66:	2101      	movs	r1, #1
 8003d68:	4618      	mov	r0, r3
 8003d6a:	f000 ff8f 	bl	8004c8c <RCCEx_PLL3_Config>
 8003d6e:	4603      	mov	r3, r0
 8003d70:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003d74:	e00a      	b.n	8003d8c <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8003d76:	2301      	movs	r3, #1
 8003d78:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003d7c:	e006      	b.n	8003d8c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003d7e:	bf00      	nop
 8003d80:	e004      	b.n	8003d8c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003d82:	bf00      	nop
 8003d84:	e002      	b.n	8003d8c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003d86:	bf00      	nop
 8003d88:	e000      	b.n	8003d8c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003d8a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003d8c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d10b      	bne.n	8003dac <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8003d94:	4ba3      	ldr	r3, [pc, #652]	@ (8004024 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003d96:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d98:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8003d9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003da0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003da4:	4a9f      	ldr	r2, [pc, #636]	@ (8004024 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003da6:	430b      	orrs	r3, r1
 8003da8:	6593      	str	r3, [r2, #88]	@ 0x58
 8003daa:	e003      	b.n	8003db4 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003dac:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003db0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003db4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003db8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003dbc:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8003dc0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003dc4:	2300      	movs	r3, #0
 8003dc6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8003dca:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003dce:	460b      	mov	r3, r1
 8003dd0:	4313      	orrs	r3, r2
 8003dd2:	d037      	beq.n	8003e44 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8003dd4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003dd8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003dda:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003dde:	d00e      	beq.n	8003dfe <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8003de0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003de4:	d816      	bhi.n	8003e14 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d018      	beq.n	8003e1c <HAL_RCCEx_PeriphCLKConfig+0x708>
 8003dea:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003dee:	d111      	bne.n	8003e14 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003df0:	4b8c      	ldr	r3, [pc, #560]	@ (8004024 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003df2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003df4:	4a8b      	ldr	r2, [pc, #556]	@ (8004024 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003df6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003dfa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8003dfc:	e00f      	b.n	8003e1e <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003dfe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e02:	3308      	adds	r3, #8
 8003e04:	2101      	movs	r1, #1
 8003e06:	4618      	mov	r0, r3
 8003e08:	f000 fe8e 	bl	8004b28 <RCCEx_PLL2_Config>
 8003e0c:	4603      	mov	r3, r0
 8003e0e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8003e12:	e004      	b.n	8003e1e <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003e14:	2301      	movs	r3, #1
 8003e16:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003e1a:	e000      	b.n	8003e1e <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8003e1c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003e1e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d10a      	bne.n	8003e3c <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003e26:	4b7f      	ldr	r3, [pc, #508]	@ (8004024 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003e28:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003e2a:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8003e2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e32:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e34:	4a7b      	ldr	r2, [pc, #492]	@ (8004024 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003e36:	430b      	orrs	r3, r1
 8003e38:	6513      	str	r3, [r2, #80]	@ 0x50
 8003e3a:	e003      	b.n	8003e44 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e3c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003e40:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8003e44:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e4c:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8003e50:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003e54:	2300      	movs	r3, #0
 8003e56:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8003e5a:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8003e5e:	460b      	mov	r3, r1
 8003e60:	4313      	orrs	r3, r2
 8003e62:	d039      	beq.n	8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8003e64:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e68:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003e6a:	2b03      	cmp	r3, #3
 8003e6c:	d81c      	bhi.n	8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x794>
 8003e6e:	a201      	add	r2, pc, #4	@ (adr r2, 8003e74 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8003e70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e74:	08003eb1 	.word	0x08003eb1
 8003e78:	08003e85 	.word	0x08003e85
 8003e7c:	08003e93 	.word	0x08003e93
 8003e80:	08003eb1 	.word	0x08003eb1
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003e84:	4b67      	ldr	r3, [pc, #412]	@ (8004024 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003e86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e88:	4a66      	ldr	r2, [pc, #408]	@ (8004024 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003e8a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003e8e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003e90:	e00f      	b.n	8003eb2 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003e92:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e96:	3308      	adds	r3, #8
 8003e98:	2102      	movs	r1, #2
 8003e9a:	4618      	mov	r0, r3
 8003e9c:	f000 fe44 	bl	8004b28 <RCCEx_PLL2_Config>
 8003ea0:	4603      	mov	r3, r0
 8003ea2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003ea6:	e004      	b.n	8003eb2 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8003ea8:	2301      	movs	r3, #1
 8003eaa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003eae:	e000      	b.n	8003eb2 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8003eb0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003eb2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d10a      	bne.n	8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8003eba:	4b5a      	ldr	r3, [pc, #360]	@ (8004024 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003ebc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003ebe:	f023 0103 	bic.w	r1, r3, #3
 8003ec2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ec6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003ec8:	4a56      	ldr	r2, [pc, #344]	@ (8004024 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003eca:	430b      	orrs	r3, r1
 8003ecc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003ece:	e003      	b.n	8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ed0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003ed4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003ed8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003edc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ee0:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8003ee4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003ee8:	2300      	movs	r3, #0
 8003eea:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003eee:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8003ef2:	460b      	mov	r3, r1
 8003ef4:	4313      	orrs	r3, r2
 8003ef6:	f000 809f 	beq.w	8004038 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003efa:	4b4b      	ldr	r3, [pc, #300]	@ (8004028 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	4a4a      	ldr	r2, [pc, #296]	@ (8004028 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8003f00:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003f04:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003f06:	f7fd fabb 	bl	8001480 <HAL_GetTick>
 8003f0a:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003f0e:	e00b      	b.n	8003f28 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f10:	f7fd fab6 	bl	8001480 <HAL_GetTick>
 8003f14:	4602      	mov	r2, r0
 8003f16:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8003f1a:	1ad3      	subs	r3, r2, r3
 8003f1c:	2b64      	cmp	r3, #100	@ 0x64
 8003f1e:	d903      	bls.n	8003f28 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8003f20:	2303      	movs	r3, #3
 8003f22:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003f26:	e005      	b.n	8003f34 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003f28:	4b3f      	ldr	r3, [pc, #252]	@ (8004028 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d0ed      	beq.n	8003f10 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8003f34:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d179      	bne.n	8004030 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8003f3c:	4b39      	ldr	r3, [pc, #228]	@ (8004024 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003f3e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003f40:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f44:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003f48:	4053      	eors	r3, r2
 8003f4a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d015      	beq.n	8003f7e <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003f52:	4b34      	ldr	r3, [pc, #208]	@ (8004024 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003f54:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f56:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003f5a:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003f5e:	4b31      	ldr	r3, [pc, #196]	@ (8004024 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003f60:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f62:	4a30      	ldr	r2, [pc, #192]	@ (8004024 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003f64:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003f68:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003f6a:	4b2e      	ldr	r3, [pc, #184]	@ (8004024 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003f6c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f6e:	4a2d      	ldr	r2, [pc, #180]	@ (8004024 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003f70:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003f74:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8003f76:	4a2b      	ldr	r2, [pc, #172]	@ (8004024 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003f78:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003f7c:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8003f7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f82:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003f86:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003f8a:	d118      	bne.n	8003fbe <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f8c:	f7fd fa78 	bl	8001480 <HAL_GetTick>
 8003f90:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003f94:	e00d      	b.n	8003fb2 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f96:	f7fd fa73 	bl	8001480 <HAL_GetTick>
 8003f9a:	4602      	mov	r2, r0
 8003f9c:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8003fa0:	1ad2      	subs	r2, r2, r3
 8003fa2:	f241 3388 	movw	r3, #5000	@ 0x1388
 8003fa6:	429a      	cmp	r2, r3
 8003fa8:	d903      	bls.n	8003fb2 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8003faa:	2303      	movs	r3, #3
 8003fac:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 8003fb0:	e005      	b.n	8003fbe <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003fb2:	4b1c      	ldr	r3, [pc, #112]	@ (8004024 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003fb4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003fb6:	f003 0302 	and.w	r3, r3, #2
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d0eb      	beq.n	8003f96 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8003fbe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d129      	bne.n	800401a <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003fc6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003fca:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003fce:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003fd2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003fd6:	d10e      	bne.n	8003ff6 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8003fd8:	4b12      	ldr	r3, [pc, #72]	@ (8004024 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003fda:	691b      	ldr	r3, [r3, #16]
 8003fdc:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8003fe0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003fe4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003fe8:	091a      	lsrs	r2, r3, #4
 8003fea:	4b10      	ldr	r3, [pc, #64]	@ (800402c <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8003fec:	4013      	ands	r3, r2
 8003fee:	4a0d      	ldr	r2, [pc, #52]	@ (8004024 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003ff0:	430b      	orrs	r3, r1
 8003ff2:	6113      	str	r3, [r2, #16]
 8003ff4:	e005      	b.n	8004002 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8003ff6:	4b0b      	ldr	r3, [pc, #44]	@ (8004024 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003ff8:	691b      	ldr	r3, [r3, #16]
 8003ffa:	4a0a      	ldr	r2, [pc, #40]	@ (8004024 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003ffc:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8004000:	6113      	str	r3, [r2, #16]
 8004002:	4b08      	ldr	r3, [pc, #32]	@ (8004024 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004004:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8004006:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800400a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800400e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004012:	4a04      	ldr	r2, [pc, #16]	@ (8004024 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004014:	430b      	orrs	r3, r1
 8004016:	6713      	str	r3, [r2, #112]	@ 0x70
 8004018:	e00e      	b.n	8004038 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800401a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800401e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 8004022:	e009      	b.n	8004038 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8004024:	58024400 	.word	0x58024400
 8004028:	58024800 	.word	0x58024800
 800402c:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004030:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004034:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8004038:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800403c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004040:	f002 0301 	and.w	r3, r2, #1
 8004044:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004048:	2300      	movs	r3, #0
 800404a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800404e:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004052:	460b      	mov	r3, r1
 8004054:	4313      	orrs	r3, r2
 8004056:	f000 8089 	beq.w	800416c <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800405a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800405e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004060:	2b28      	cmp	r3, #40	@ 0x28
 8004062:	d86b      	bhi.n	800413c <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8004064:	a201      	add	r2, pc, #4	@ (adr r2, 800406c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8004066:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800406a:	bf00      	nop
 800406c:	08004145 	.word	0x08004145
 8004070:	0800413d 	.word	0x0800413d
 8004074:	0800413d 	.word	0x0800413d
 8004078:	0800413d 	.word	0x0800413d
 800407c:	0800413d 	.word	0x0800413d
 8004080:	0800413d 	.word	0x0800413d
 8004084:	0800413d 	.word	0x0800413d
 8004088:	0800413d 	.word	0x0800413d
 800408c:	08004111 	.word	0x08004111
 8004090:	0800413d 	.word	0x0800413d
 8004094:	0800413d 	.word	0x0800413d
 8004098:	0800413d 	.word	0x0800413d
 800409c:	0800413d 	.word	0x0800413d
 80040a0:	0800413d 	.word	0x0800413d
 80040a4:	0800413d 	.word	0x0800413d
 80040a8:	0800413d 	.word	0x0800413d
 80040ac:	08004127 	.word	0x08004127
 80040b0:	0800413d 	.word	0x0800413d
 80040b4:	0800413d 	.word	0x0800413d
 80040b8:	0800413d 	.word	0x0800413d
 80040bc:	0800413d 	.word	0x0800413d
 80040c0:	0800413d 	.word	0x0800413d
 80040c4:	0800413d 	.word	0x0800413d
 80040c8:	0800413d 	.word	0x0800413d
 80040cc:	08004145 	.word	0x08004145
 80040d0:	0800413d 	.word	0x0800413d
 80040d4:	0800413d 	.word	0x0800413d
 80040d8:	0800413d 	.word	0x0800413d
 80040dc:	0800413d 	.word	0x0800413d
 80040e0:	0800413d 	.word	0x0800413d
 80040e4:	0800413d 	.word	0x0800413d
 80040e8:	0800413d 	.word	0x0800413d
 80040ec:	08004145 	.word	0x08004145
 80040f0:	0800413d 	.word	0x0800413d
 80040f4:	0800413d 	.word	0x0800413d
 80040f8:	0800413d 	.word	0x0800413d
 80040fc:	0800413d 	.word	0x0800413d
 8004100:	0800413d 	.word	0x0800413d
 8004104:	0800413d 	.word	0x0800413d
 8004108:	0800413d 	.word	0x0800413d
 800410c:	08004145 	.word	0x08004145
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004110:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004114:	3308      	adds	r3, #8
 8004116:	2101      	movs	r1, #1
 8004118:	4618      	mov	r0, r3
 800411a:	f000 fd05 	bl	8004b28 <RCCEx_PLL2_Config>
 800411e:	4603      	mov	r3, r0
 8004120:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8004124:	e00f      	b.n	8004146 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004126:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800412a:	3328      	adds	r3, #40	@ 0x28
 800412c:	2101      	movs	r1, #1
 800412e:	4618      	mov	r0, r3
 8004130:	f000 fdac 	bl	8004c8c <RCCEx_PLL3_Config>
 8004134:	4603      	mov	r3, r0
 8004136:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800413a:	e004      	b.n	8004146 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800413c:	2301      	movs	r3, #1
 800413e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004142:	e000      	b.n	8004146 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8004144:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004146:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800414a:	2b00      	cmp	r3, #0
 800414c:	d10a      	bne.n	8004164 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800414e:	4bbf      	ldr	r3, [pc, #764]	@ (800444c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004150:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004152:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8004156:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800415a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800415c:	4abb      	ldr	r2, [pc, #748]	@ (800444c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800415e:	430b      	orrs	r3, r1
 8004160:	6553      	str	r3, [r2, #84]	@ 0x54
 8004162:	e003      	b.n	800416c <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004164:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004168:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800416c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004170:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004174:	f002 0302 	and.w	r3, r2, #2
 8004178:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800417c:	2300      	movs	r3, #0
 800417e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8004182:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8004186:	460b      	mov	r3, r1
 8004188:	4313      	orrs	r3, r2
 800418a:	d041      	beq.n	8004210 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800418c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004190:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004192:	2b05      	cmp	r3, #5
 8004194:	d824      	bhi.n	80041e0 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8004196:	a201      	add	r2, pc, #4	@ (adr r2, 800419c <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8004198:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800419c:	080041e9 	.word	0x080041e9
 80041a0:	080041b5 	.word	0x080041b5
 80041a4:	080041cb 	.word	0x080041cb
 80041a8:	080041e9 	.word	0x080041e9
 80041ac:	080041e9 	.word	0x080041e9
 80041b0:	080041e9 	.word	0x080041e9
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80041b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80041b8:	3308      	adds	r3, #8
 80041ba:	2101      	movs	r1, #1
 80041bc:	4618      	mov	r0, r3
 80041be:	f000 fcb3 	bl	8004b28 <RCCEx_PLL2_Config>
 80041c2:	4603      	mov	r3, r0
 80041c4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80041c8:	e00f      	b.n	80041ea <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80041ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80041ce:	3328      	adds	r3, #40	@ 0x28
 80041d0:	2101      	movs	r1, #1
 80041d2:	4618      	mov	r0, r3
 80041d4:	f000 fd5a 	bl	8004c8c <RCCEx_PLL3_Config>
 80041d8:	4603      	mov	r3, r0
 80041da:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80041de:	e004      	b.n	80041ea <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80041e0:	2301      	movs	r3, #1
 80041e2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80041e6:	e000      	b.n	80041ea <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 80041e8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80041ea:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d10a      	bne.n	8004208 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80041f2:	4b96      	ldr	r3, [pc, #600]	@ (800444c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80041f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80041f6:	f023 0107 	bic.w	r1, r3, #7
 80041fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80041fe:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004200:	4a92      	ldr	r2, [pc, #584]	@ (800444c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004202:	430b      	orrs	r3, r1
 8004204:	6553      	str	r3, [r2, #84]	@ 0x54
 8004206:	e003      	b.n	8004210 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004208:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800420c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004210:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004214:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004218:	f002 0304 	and.w	r3, r2, #4
 800421c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004220:	2300      	movs	r3, #0
 8004222:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004226:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800422a:	460b      	mov	r3, r1
 800422c:	4313      	orrs	r3, r2
 800422e:	d044      	beq.n	80042ba <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8004230:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004234:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004238:	2b05      	cmp	r3, #5
 800423a:	d825      	bhi.n	8004288 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 800423c:	a201      	add	r2, pc, #4	@ (adr r2, 8004244 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 800423e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004242:	bf00      	nop
 8004244:	08004291 	.word	0x08004291
 8004248:	0800425d 	.word	0x0800425d
 800424c:	08004273 	.word	0x08004273
 8004250:	08004291 	.word	0x08004291
 8004254:	08004291 	.word	0x08004291
 8004258:	08004291 	.word	0x08004291
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800425c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004260:	3308      	adds	r3, #8
 8004262:	2101      	movs	r1, #1
 8004264:	4618      	mov	r0, r3
 8004266:	f000 fc5f 	bl	8004b28 <RCCEx_PLL2_Config>
 800426a:	4603      	mov	r3, r0
 800426c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8004270:	e00f      	b.n	8004292 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004272:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004276:	3328      	adds	r3, #40	@ 0x28
 8004278:	2101      	movs	r1, #1
 800427a:	4618      	mov	r0, r3
 800427c:	f000 fd06 	bl	8004c8c <RCCEx_PLL3_Config>
 8004280:	4603      	mov	r3, r0
 8004282:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8004286:	e004      	b.n	8004292 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004288:	2301      	movs	r3, #1
 800428a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800428e:	e000      	b.n	8004292 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8004290:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004292:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004296:	2b00      	cmp	r3, #0
 8004298:	d10b      	bne.n	80042b2 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800429a:	4b6c      	ldr	r3, [pc, #432]	@ (800444c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800429c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800429e:	f023 0107 	bic.w	r1, r3, #7
 80042a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80042a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80042aa:	4a68      	ldr	r2, [pc, #416]	@ (800444c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80042ac:	430b      	orrs	r3, r1
 80042ae:	6593      	str	r3, [r2, #88]	@ 0x58
 80042b0:	e003      	b.n	80042ba <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80042b2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80042b6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80042ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80042be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042c2:	f002 0320 	and.w	r3, r2, #32
 80042c6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80042ca:	2300      	movs	r3, #0
 80042cc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80042d0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80042d4:	460b      	mov	r3, r1
 80042d6:	4313      	orrs	r3, r2
 80042d8:	d055      	beq.n	8004386 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 80042da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80042de:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80042e2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80042e6:	d033      	beq.n	8004350 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 80042e8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80042ec:	d82c      	bhi.n	8004348 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80042ee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80042f2:	d02f      	beq.n	8004354 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 80042f4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80042f8:	d826      	bhi.n	8004348 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80042fa:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80042fe:	d02b      	beq.n	8004358 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8004300:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004304:	d820      	bhi.n	8004348 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8004306:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800430a:	d012      	beq.n	8004332 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 800430c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004310:	d81a      	bhi.n	8004348 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8004312:	2b00      	cmp	r3, #0
 8004314:	d022      	beq.n	800435c <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8004316:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800431a:	d115      	bne.n	8004348 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800431c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004320:	3308      	adds	r3, #8
 8004322:	2100      	movs	r1, #0
 8004324:	4618      	mov	r0, r3
 8004326:	f000 fbff 	bl	8004b28 <RCCEx_PLL2_Config>
 800432a:	4603      	mov	r3, r0
 800432c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8004330:	e015      	b.n	800435e <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004332:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004336:	3328      	adds	r3, #40	@ 0x28
 8004338:	2102      	movs	r1, #2
 800433a:	4618      	mov	r0, r3
 800433c:	f000 fca6 	bl	8004c8c <RCCEx_PLL3_Config>
 8004340:	4603      	mov	r3, r0
 8004342:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8004346:	e00a      	b.n	800435e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004348:	2301      	movs	r3, #1
 800434a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800434e:	e006      	b.n	800435e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8004350:	bf00      	nop
 8004352:	e004      	b.n	800435e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8004354:	bf00      	nop
 8004356:	e002      	b.n	800435e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8004358:	bf00      	nop
 800435a:	e000      	b.n	800435e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800435c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800435e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004362:	2b00      	cmp	r3, #0
 8004364:	d10b      	bne.n	800437e <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004366:	4b39      	ldr	r3, [pc, #228]	@ (800444c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004368:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800436a:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800436e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004372:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004376:	4a35      	ldr	r2, [pc, #212]	@ (800444c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004378:	430b      	orrs	r3, r1
 800437a:	6553      	str	r3, [r2, #84]	@ 0x54
 800437c:	e003      	b.n	8004386 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800437e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004382:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8004386:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800438a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800438e:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8004392:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004396:	2300      	movs	r3, #0
 8004398:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800439c:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 80043a0:	460b      	mov	r3, r1
 80043a2:	4313      	orrs	r3, r2
 80043a4:	d058      	beq.n	8004458 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 80043a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80043aa:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80043ae:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80043b2:	d033      	beq.n	800441c <HAL_RCCEx_PeriphCLKConfig+0xd08>
 80043b4:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80043b8:	d82c      	bhi.n	8004414 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80043ba:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80043be:	d02f      	beq.n	8004420 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 80043c0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80043c4:	d826      	bhi.n	8004414 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80043c6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80043ca:	d02b      	beq.n	8004424 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 80043cc:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80043d0:	d820      	bhi.n	8004414 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80043d2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80043d6:	d012      	beq.n	80043fe <HAL_RCCEx_PeriphCLKConfig+0xcea>
 80043d8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80043dc:	d81a      	bhi.n	8004414 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d022      	beq.n	8004428 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 80043e2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80043e6:	d115      	bne.n	8004414 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80043e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80043ec:	3308      	adds	r3, #8
 80043ee:	2100      	movs	r1, #0
 80043f0:	4618      	mov	r0, r3
 80043f2:	f000 fb99 	bl	8004b28 <RCCEx_PLL2_Config>
 80043f6:	4603      	mov	r3, r0
 80043f8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80043fc:	e015      	b.n	800442a <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80043fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004402:	3328      	adds	r3, #40	@ 0x28
 8004404:	2102      	movs	r1, #2
 8004406:	4618      	mov	r0, r3
 8004408:	f000 fc40 	bl	8004c8c <RCCEx_PLL3_Config>
 800440c:	4603      	mov	r3, r0
 800440e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8004412:	e00a      	b.n	800442a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004414:	2301      	movs	r3, #1
 8004416:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800441a:	e006      	b.n	800442a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800441c:	bf00      	nop
 800441e:	e004      	b.n	800442a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8004420:	bf00      	nop
 8004422:	e002      	b.n	800442a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8004424:	bf00      	nop
 8004426:	e000      	b.n	800442a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8004428:	bf00      	nop
    }

    if (ret == HAL_OK)
 800442a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800442e:	2b00      	cmp	r3, #0
 8004430:	d10e      	bne.n	8004450 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004432:	4b06      	ldr	r3, [pc, #24]	@ (800444c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004434:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004436:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 800443a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800443e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004442:	4a02      	ldr	r2, [pc, #8]	@ (800444c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004444:	430b      	orrs	r3, r1
 8004446:	6593      	str	r3, [r2, #88]	@ 0x58
 8004448:	e006      	b.n	8004458 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 800444a:	bf00      	nop
 800444c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004450:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004454:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8004458:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800445c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004460:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8004464:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004468:	2300      	movs	r3, #0
 800446a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800446e:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8004472:	460b      	mov	r3, r1
 8004474:	4313      	orrs	r3, r2
 8004476:	d055      	beq.n	8004524 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8004478:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800447c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8004480:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8004484:	d033      	beq.n	80044ee <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8004486:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800448a:	d82c      	bhi.n	80044e6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800448c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004490:	d02f      	beq.n	80044f2 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8004492:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004496:	d826      	bhi.n	80044e6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004498:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800449c:	d02b      	beq.n	80044f6 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 800449e:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80044a2:	d820      	bhi.n	80044e6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80044a4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80044a8:	d012      	beq.n	80044d0 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 80044aa:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80044ae:	d81a      	bhi.n	80044e6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d022      	beq.n	80044fa <HAL_RCCEx_PeriphCLKConfig+0xde6>
 80044b4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80044b8:	d115      	bne.n	80044e6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80044ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80044be:	3308      	adds	r3, #8
 80044c0:	2100      	movs	r1, #0
 80044c2:	4618      	mov	r0, r3
 80044c4:	f000 fb30 	bl	8004b28 <RCCEx_PLL2_Config>
 80044c8:	4603      	mov	r3, r0
 80044ca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80044ce:	e015      	b.n	80044fc <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80044d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80044d4:	3328      	adds	r3, #40	@ 0x28
 80044d6:	2102      	movs	r1, #2
 80044d8:	4618      	mov	r0, r3
 80044da:	f000 fbd7 	bl	8004c8c <RCCEx_PLL3_Config>
 80044de:	4603      	mov	r3, r0
 80044e0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80044e4:	e00a      	b.n	80044fc <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80044e6:	2301      	movs	r3, #1
 80044e8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80044ec:	e006      	b.n	80044fc <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80044ee:	bf00      	nop
 80044f0:	e004      	b.n	80044fc <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80044f2:	bf00      	nop
 80044f4:	e002      	b.n	80044fc <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80044f6:	bf00      	nop
 80044f8:	e000      	b.n	80044fc <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80044fa:	bf00      	nop
    }

    if (ret == HAL_OK)
 80044fc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004500:	2b00      	cmp	r3, #0
 8004502:	d10b      	bne.n	800451c <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8004504:	4ba1      	ldr	r3, [pc, #644]	@ (800478c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004506:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004508:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 800450c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004510:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8004514:	4a9d      	ldr	r2, [pc, #628]	@ (800478c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004516:	430b      	orrs	r3, r1
 8004518:	6593      	str	r3, [r2, #88]	@ 0x58
 800451a:	e003      	b.n	8004524 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800451c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004520:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8004524:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004528:	e9d3 2300 	ldrd	r2, r3, [r3]
 800452c:	f002 0308 	and.w	r3, r2, #8
 8004530:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004534:	2300      	movs	r3, #0
 8004536:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800453a:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 800453e:	460b      	mov	r3, r1
 8004540:	4313      	orrs	r3, r2
 8004542:	d01e      	beq.n	8004582 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8004544:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004548:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800454c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004550:	d10c      	bne.n	800456c <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004552:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004556:	3328      	adds	r3, #40	@ 0x28
 8004558:	2102      	movs	r1, #2
 800455a:	4618      	mov	r0, r3
 800455c:	f000 fb96 	bl	8004c8c <RCCEx_PLL3_Config>
 8004560:	4603      	mov	r3, r0
 8004562:	2b00      	cmp	r3, #0
 8004564:	d002      	beq.n	800456c <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8004566:	2301      	movs	r3, #1
 8004568:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800456c:	4b87      	ldr	r3, [pc, #540]	@ (800478c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800456e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004570:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004574:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004578:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800457c:	4a83      	ldr	r2, [pc, #524]	@ (800478c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800457e:	430b      	orrs	r3, r1
 8004580:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004582:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004586:	e9d3 2300 	ldrd	r2, r3, [r3]
 800458a:	f002 0310 	and.w	r3, r2, #16
 800458e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004592:	2300      	movs	r3, #0
 8004594:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8004598:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 800459c:	460b      	mov	r3, r1
 800459e:	4313      	orrs	r3, r2
 80045a0:	d01e      	beq.n	80045e0 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80045a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80045a6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80045aa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80045ae:	d10c      	bne.n	80045ca <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80045b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80045b4:	3328      	adds	r3, #40	@ 0x28
 80045b6:	2102      	movs	r1, #2
 80045b8:	4618      	mov	r0, r3
 80045ba:	f000 fb67 	bl	8004c8c <RCCEx_PLL3_Config>
 80045be:	4603      	mov	r3, r0
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d002      	beq.n	80045ca <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 80045c4:	2301      	movs	r3, #1
 80045c6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80045ca:	4b70      	ldr	r3, [pc, #448]	@ (800478c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80045cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80045ce:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80045d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80045d6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80045da:	4a6c      	ldr	r2, [pc, #432]	@ (800478c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80045dc:	430b      	orrs	r3, r1
 80045de:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80045e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80045e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045e8:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 80045ec:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80045f0:	2300      	movs	r3, #0
 80045f2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80045f6:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 80045fa:	460b      	mov	r3, r1
 80045fc:	4313      	orrs	r3, r2
 80045fe:	d03e      	beq.n	800467e <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8004600:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004604:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004608:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800460c:	d022      	beq.n	8004654 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 800460e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004612:	d81b      	bhi.n	800464c <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8004614:	2b00      	cmp	r3, #0
 8004616:	d003      	beq.n	8004620 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8004618:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800461c:	d00b      	beq.n	8004636 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 800461e:	e015      	b.n	800464c <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004620:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004624:	3308      	adds	r3, #8
 8004626:	2100      	movs	r1, #0
 8004628:	4618      	mov	r0, r3
 800462a:	f000 fa7d 	bl	8004b28 <RCCEx_PLL2_Config>
 800462e:	4603      	mov	r3, r0
 8004630:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8004634:	e00f      	b.n	8004656 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004636:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800463a:	3328      	adds	r3, #40	@ 0x28
 800463c:	2102      	movs	r1, #2
 800463e:	4618      	mov	r0, r3
 8004640:	f000 fb24 	bl	8004c8c <RCCEx_PLL3_Config>
 8004644:	4603      	mov	r3, r0
 8004646:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800464a:	e004      	b.n	8004656 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800464c:	2301      	movs	r3, #1
 800464e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004652:	e000      	b.n	8004656 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8004654:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004656:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800465a:	2b00      	cmp	r3, #0
 800465c:	d10b      	bne.n	8004676 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800465e:	4b4b      	ldr	r3, [pc, #300]	@ (800478c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004660:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004662:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8004666:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800466a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800466e:	4a47      	ldr	r2, [pc, #284]	@ (800478c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004670:	430b      	orrs	r3, r1
 8004672:	6593      	str	r3, [r2, #88]	@ 0x58
 8004674:	e003      	b.n	800467e <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004676:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800467a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800467e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004682:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004686:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800468a:	67bb      	str	r3, [r7, #120]	@ 0x78
 800468c:	2300      	movs	r3, #0
 800468e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004690:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8004694:	460b      	mov	r3, r1
 8004696:	4313      	orrs	r3, r2
 8004698:	d03b      	beq.n	8004712 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800469a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800469e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80046a2:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80046a6:	d01f      	beq.n	80046e8 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 80046a8:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80046ac:	d818      	bhi.n	80046e0 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 80046ae:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80046b2:	d003      	beq.n	80046bc <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 80046b4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80046b8:	d007      	beq.n	80046ca <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 80046ba:	e011      	b.n	80046e0 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80046bc:	4b33      	ldr	r3, [pc, #204]	@ (800478c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80046be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046c0:	4a32      	ldr	r2, [pc, #200]	@ (800478c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80046c2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80046c6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 80046c8:	e00f      	b.n	80046ea <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80046ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80046ce:	3328      	adds	r3, #40	@ 0x28
 80046d0:	2101      	movs	r1, #1
 80046d2:	4618      	mov	r0, r3
 80046d4:	f000 fada 	bl	8004c8c <RCCEx_PLL3_Config>
 80046d8:	4603      	mov	r3, r0
 80046da:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 80046de:	e004      	b.n	80046ea <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80046e0:	2301      	movs	r3, #1
 80046e2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80046e6:	e000      	b.n	80046ea <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 80046e8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80046ea:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d10b      	bne.n	800470a <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80046f2:	4b26      	ldr	r3, [pc, #152]	@ (800478c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80046f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80046f6:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80046fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80046fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004702:	4a22      	ldr	r2, [pc, #136]	@ (800478c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004704:	430b      	orrs	r3, r1
 8004706:	6553      	str	r3, [r2, #84]	@ 0x54
 8004708:	e003      	b.n	8004712 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800470a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800470e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8004712:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004716:	e9d3 2300 	ldrd	r2, r3, [r3]
 800471a:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 800471e:	673b      	str	r3, [r7, #112]	@ 0x70
 8004720:	2300      	movs	r3, #0
 8004722:	677b      	str	r3, [r7, #116]	@ 0x74
 8004724:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8004728:	460b      	mov	r3, r1
 800472a:	4313      	orrs	r3, r2
 800472c:	d034      	beq.n	8004798 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800472e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004732:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004734:	2b00      	cmp	r3, #0
 8004736:	d003      	beq.n	8004740 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8004738:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800473c:	d007      	beq.n	800474e <HAL_RCCEx_PeriphCLKConfig+0x103a>
 800473e:	e011      	b.n	8004764 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004740:	4b12      	ldr	r3, [pc, #72]	@ (800478c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004742:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004744:	4a11      	ldr	r2, [pc, #68]	@ (800478c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004746:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800474a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800474c:	e00e      	b.n	800476c <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800474e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004752:	3308      	adds	r3, #8
 8004754:	2102      	movs	r1, #2
 8004756:	4618      	mov	r0, r3
 8004758:	f000 f9e6 	bl	8004b28 <RCCEx_PLL2_Config>
 800475c:	4603      	mov	r3, r0
 800475e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8004762:	e003      	b.n	800476c <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8004764:	2301      	movs	r3, #1
 8004766:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800476a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800476c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004770:	2b00      	cmp	r3, #0
 8004772:	d10d      	bne.n	8004790 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8004774:	4b05      	ldr	r3, [pc, #20]	@ (800478c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004776:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004778:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800477c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004780:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004782:	4a02      	ldr	r2, [pc, #8]	@ (800478c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004784:	430b      	orrs	r3, r1
 8004786:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004788:	e006      	b.n	8004798 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 800478a:	bf00      	nop
 800478c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004790:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004794:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004798:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800479c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047a0:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 80047a4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80047a6:	2300      	movs	r3, #0
 80047a8:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80047aa:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 80047ae:	460b      	mov	r3, r1
 80047b0:	4313      	orrs	r3, r2
 80047b2:	d00c      	beq.n	80047ce <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80047b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80047b8:	3328      	adds	r3, #40	@ 0x28
 80047ba:	2102      	movs	r1, #2
 80047bc:	4618      	mov	r0, r3
 80047be:	f000 fa65 	bl	8004c8c <RCCEx_PLL3_Config>
 80047c2:	4603      	mov	r3, r0
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d002      	beq.n	80047ce <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 80047c8:	2301      	movs	r3, #1
 80047ca:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80047ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80047d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047d6:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 80047da:	663b      	str	r3, [r7, #96]	@ 0x60
 80047dc:	2300      	movs	r3, #0
 80047de:	667b      	str	r3, [r7, #100]	@ 0x64
 80047e0:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 80047e4:	460b      	mov	r3, r1
 80047e6:	4313      	orrs	r3, r2
 80047e8:	d038      	beq.n	800485c <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 80047ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80047ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80047f2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80047f6:	d018      	beq.n	800482a <HAL_RCCEx_PeriphCLKConfig+0x1116>
 80047f8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80047fc:	d811      	bhi.n	8004822 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 80047fe:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004802:	d014      	beq.n	800482e <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8004804:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004808:	d80b      	bhi.n	8004822 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800480a:	2b00      	cmp	r3, #0
 800480c:	d011      	beq.n	8004832 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 800480e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004812:	d106      	bne.n	8004822 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004814:	4bc3      	ldr	r3, [pc, #780]	@ (8004b24 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004816:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004818:	4ac2      	ldr	r2, [pc, #776]	@ (8004b24 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800481a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800481e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8004820:	e008      	b.n	8004834 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004822:	2301      	movs	r3, #1
 8004824:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004828:	e004      	b.n	8004834 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800482a:	bf00      	nop
 800482c:	e002      	b.n	8004834 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800482e:	bf00      	nop
 8004830:	e000      	b.n	8004834 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8004832:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004834:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004838:	2b00      	cmp	r3, #0
 800483a:	d10b      	bne.n	8004854 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800483c:	4bb9      	ldr	r3, [pc, #740]	@ (8004b24 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800483e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004840:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8004844:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004848:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800484c:	4ab5      	ldr	r2, [pc, #724]	@ (8004b24 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800484e:	430b      	orrs	r3, r1
 8004850:	6553      	str	r3, [r2, #84]	@ 0x54
 8004852:	e003      	b.n	800485c <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004854:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004858:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800485c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004860:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004864:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8004868:	65bb      	str	r3, [r7, #88]	@ 0x58
 800486a:	2300      	movs	r3, #0
 800486c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800486e:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8004872:	460b      	mov	r3, r1
 8004874:	4313      	orrs	r3, r2
 8004876:	d009      	beq.n	800488c <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004878:	4baa      	ldr	r3, [pc, #680]	@ (8004b24 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800487a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800487c:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8004880:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004884:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004886:	4aa7      	ldr	r2, [pc, #668]	@ (8004b24 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004888:	430b      	orrs	r3, r1
 800488a:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800488c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004890:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004894:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8004898:	653b      	str	r3, [r7, #80]	@ 0x50
 800489a:	2300      	movs	r3, #0
 800489c:	657b      	str	r3, [r7, #84]	@ 0x54
 800489e:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 80048a2:	460b      	mov	r3, r1
 80048a4:	4313      	orrs	r3, r2
 80048a6:	d00a      	beq.n	80048be <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80048a8:	4b9e      	ldr	r3, [pc, #632]	@ (8004b24 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80048aa:	691b      	ldr	r3, [r3, #16]
 80048ac:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 80048b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80048b4:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80048b8:	4a9a      	ldr	r2, [pc, #616]	@ (8004b24 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80048ba:	430b      	orrs	r3, r1
 80048bc:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80048be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80048c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048c6:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 80048ca:	64bb      	str	r3, [r7, #72]	@ 0x48
 80048cc:	2300      	movs	r3, #0
 80048ce:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80048d0:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 80048d4:	460b      	mov	r3, r1
 80048d6:	4313      	orrs	r3, r2
 80048d8:	d009      	beq.n	80048ee <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80048da:	4b92      	ldr	r3, [pc, #584]	@ (8004b24 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80048dc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80048de:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 80048e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80048e6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80048e8:	4a8e      	ldr	r2, [pc, #568]	@ (8004b24 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80048ea:	430b      	orrs	r3, r1
 80048ec:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80048ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80048f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048f6:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 80048fa:	643b      	str	r3, [r7, #64]	@ 0x40
 80048fc:	2300      	movs	r3, #0
 80048fe:	647b      	str	r3, [r7, #68]	@ 0x44
 8004900:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8004904:	460b      	mov	r3, r1
 8004906:	4313      	orrs	r3, r2
 8004908:	d00e      	beq.n	8004928 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800490a:	4b86      	ldr	r3, [pc, #536]	@ (8004b24 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800490c:	691b      	ldr	r3, [r3, #16]
 800490e:	4a85      	ldr	r2, [pc, #532]	@ (8004b24 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004910:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8004914:	6113      	str	r3, [r2, #16]
 8004916:	4b83      	ldr	r3, [pc, #524]	@ (8004b24 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004918:	6919      	ldr	r1, [r3, #16]
 800491a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800491e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8004922:	4a80      	ldr	r2, [pc, #512]	@ (8004b24 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004924:	430b      	orrs	r3, r1
 8004926:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8004928:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800492c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004930:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8004934:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004936:	2300      	movs	r3, #0
 8004938:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800493a:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 800493e:	460b      	mov	r3, r1
 8004940:	4313      	orrs	r3, r2
 8004942:	d009      	beq.n	8004958 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8004944:	4b77      	ldr	r3, [pc, #476]	@ (8004b24 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004946:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004948:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800494c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004950:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004952:	4a74      	ldr	r2, [pc, #464]	@ (8004b24 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004954:	430b      	orrs	r3, r1
 8004956:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004958:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800495c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004960:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8004964:	633b      	str	r3, [r7, #48]	@ 0x30
 8004966:	2300      	movs	r3, #0
 8004968:	637b      	str	r3, [r7, #52]	@ 0x34
 800496a:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800496e:	460b      	mov	r3, r1
 8004970:	4313      	orrs	r3, r2
 8004972:	d00a      	beq.n	800498a <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004974:	4b6b      	ldr	r3, [pc, #428]	@ (8004b24 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004976:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004978:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 800497c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004980:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004984:	4a67      	ldr	r2, [pc, #412]	@ (8004b24 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004986:	430b      	orrs	r3, r1
 8004988:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800498a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800498e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004992:	2100      	movs	r1, #0
 8004994:	62b9      	str	r1, [r7, #40]	@ 0x28
 8004996:	f003 0301 	and.w	r3, r3, #1
 800499a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800499c:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 80049a0:	460b      	mov	r3, r1
 80049a2:	4313      	orrs	r3, r2
 80049a4:	d011      	beq.n	80049ca <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80049a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80049aa:	3308      	adds	r3, #8
 80049ac:	2100      	movs	r1, #0
 80049ae:	4618      	mov	r0, r3
 80049b0:	f000 f8ba 	bl	8004b28 <RCCEx_PLL2_Config>
 80049b4:	4603      	mov	r3, r0
 80049b6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80049ba:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d003      	beq.n	80049ca <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80049c2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80049c6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 80049ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80049ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049d2:	2100      	movs	r1, #0
 80049d4:	6239      	str	r1, [r7, #32]
 80049d6:	f003 0302 	and.w	r3, r3, #2
 80049da:	627b      	str	r3, [r7, #36]	@ 0x24
 80049dc:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80049e0:	460b      	mov	r3, r1
 80049e2:	4313      	orrs	r3, r2
 80049e4:	d011      	beq.n	8004a0a <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80049e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80049ea:	3308      	adds	r3, #8
 80049ec:	2101      	movs	r1, #1
 80049ee:	4618      	mov	r0, r3
 80049f0:	f000 f89a 	bl	8004b28 <RCCEx_PLL2_Config>
 80049f4:	4603      	mov	r3, r0
 80049f6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80049fa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d003      	beq.n	8004a0a <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a02:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004a06:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8004a0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a12:	2100      	movs	r1, #0
 8004a14:	61b9      	str	r1, [r7, #24]
 8004a16:	f003 0304 	and.w	r3, r3, #4
 8004a1a:	61fb      	str	r3, [r7, #28]
 8004a1c:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8004a20:	460b      	mov	r3, r1
 8004a22:	4313      	orrs	r3, r2
 8004a24:	d011      	beq.n	8004a4a <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004a26:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a2a:	3308      	adds	r3, #8
 8004a2c:	2102      	movs	r1, #2
 8004a2e:	4618      	mov	r0, r3
 8004a30:	f000 f87a 	bl	8004b28 <RCCEx_PLL2_Config>
 8004a34:	4603      	mov	r3, r0
 8004a36:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8004a3a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d003      	beq.n	8004a4a <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a42:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004a46:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8004a4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a52:	2100      	movs	r1, #0
 8004a54:	6139      	str	r1, [r7, #16]
 8004a56:	f003 0308 	and.w	r3, r3, #8
 8004a5a:	617b      	str	r3, [r7, #20]
 8004a5c:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8004a60:	460b      	mov	r3, r1
 8004a62:	4313      	orrs	r3, r2
 8004a64:	d011      	beq.n	8004a8a <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004a66:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a6a:	3328      	adds	r3, #40	@ 0x28
 8004a6c:	2100      	movs	r1, #0
 8004a6e:	4618      	mov	r0, r3
 8004a70:	f000 f90c 	bl	8004c8c <RCCEx_PLL3_Config>
 8004a74:	4603      	mov	r3, r0
 8004a76:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 8004a7a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d003      	beq.n	8004a8a <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a82:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004a86:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8004a8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a92:	2100      	movs	r1, #0
 8004a94:	60b9      	str	r1, [r7, #8]
 8004a96:	f003 0310 	and.w	r3, r3, #16
 8004a9a:	60fb      	str	r3, [r7, #12]
 8004a9c:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8004aa0:	460b      	mov	r3, r1
 8004aa2:	4313      	orrs	r3, r2
 8004aa4:	d011      	beq.n	8004aca <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004aa6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004aaa:	3328      	adds	r3, #40	@ 0x28
 8004aac:	2101      	movs	r1, #1
 8004aae:	4618      	mov	r0, r3
 8004ab0:	f000 f8ec 	bl	8004c8c <RCCEx_PLL3_Config>
 8004ab4:	4603      	mov	r3, r0
 8004ab6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8004aba:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d003      	beq.n	8004aca <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ac2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004ac6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8004aca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ace:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ad2:	2100      	movs	r1, #0
 8004ad4:	6039      	str	r1, [r7, #0]
 8004ad6:	f003 0320 	and.w	r3, r3, #32
 8004ada:	607b      	str	r3, [r7, #4]
 8004adc:	e9d7 1200 	ldrd	r1, r2, [r7]
 8004ae0:	460b      	mov	r3, r1
 8004ae2:	4313      	orrs	r3, r2
 8004ae4:	d011      	beq.n	8004b0a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004ae6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004aea:	3328      	adds	r3, #40	@ 0x28
 8004aec:	2102      	movs	r1, #2
 8004aee:	4618      	mov	r0, r3
 8004af0:	f000 f8cc 	bl	8004c8c <RCCEx_PLL3_Config>
 8004af4:	4603      	mov	r3, r0
 8004af6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8004afa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d003      	beq.n	8004b0a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b02:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004b06:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 8004b0a:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d101      	bne.n	8004b16 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8004b12:	2300      	movs	r3, #0
 8004b14:	e000      	b.n	8004b18 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8004b16:	2301      	movs	r3, #1
}
 8004b18:	4618      	mov	r0, r3
 8004b1a:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8004b1e:	46bd      	mov	sp, r7
 8004b20:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004b24:	58024400 	.word	0x58024400

08004b28 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8004b28:	b580      	push	{r7, lr}
 8004b2a:	b084      	sub	sp, #16
 8004b2c:	af00      	add	r7, sp, #0
 8004b2e:	6078      	str	r0, [r7, #4]
 8004b30:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004b32:	2300      	movs	r3, #0
 8004b34:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004b36:	4b53      	ldr	r3, [pc, #332]	@ (8004c84 <RCCEx_PLL2_Config+0x15c>)
 8004b38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b3a:	f003 0303 	and.w	r3, r3, #3
 8004b3e:	2b03      	cmp	r3, #3
 8004b40:	d101      	bne.n	8004b46 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8004b42:	2301      	movs	r3, #1
 8004b44:	e099      	b.n	8004c7a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8004b46:	4b4f      	ldr	r3, [pc, #316]	@ (8004c84 <RCCEx_PLL2_Config+0x15c>)
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	4a4e      	ldr	r2, [pc, #312]	@ (8004c84 <RCCEx_PLL2_Config+0x15c>)
 8004b4c:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004b50:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004b52:	f7fc fc95 	bl	8001480 <HAL_GetTick>
 8004b56:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004b58:	e008      	b.n	8004b6c <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004b5a:	f7fc fc91 	bl	8001480 <HAL_GetTick>
 8004b5e:	4602      	mov	r2, r0
 8004b60:	68bb      	ldr	r3, [r7, #8]
 8004b62:	1ad3      	subs	r3, r2, r3
 8004b64:	2b02      	cmp	r3, #2
 8004b66:	d901      	bls.n	8004b6c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004b68:	2303      	movs	r3, #3
 8004b6a:	e086      	b.n	8004c7a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004b6c:	4b45      	ldr	r3, [pc, #276]	@ (8004c84 <RCCEx_PLL2_Config+0x15c>)
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d1f0      	bne.n	8004b5a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8004b78:	4b42      	ldr	r3, [pc, #264]	@ (8004c84 <RCCEx_PLL2_Config+0x15c>)
 8004b7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b7c:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	031b      	lsls	r3, r3, #12
 8004b86:	493f      	ldr	r1, [pc, #252]	@ (8004c84 <RCCEx_PLL2_Config+0x15c>)
 8004b88:	4313      	orrs	r3, r2
 8004b8a:	628b      	str	r3, [r1, #40]	@ 0x28
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	685b      	ldr	r3, [r3, #4]
 8004b90:	3b01      	subs	r3, #1
 8004b92:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	689b      	ldr	r3, [r3, #8]
 8004b9a:	3b01      	subs	r3, #1
 8004b9c:	025b      	lsls	r3, r3, #9
 8004b9e:	b29b      	uxth	r3, r3
 8004ba0:	431a      	orrs	r2, r3
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	68db      	ldr	r3, [r3, #12]
 8004ba6:	3b01      	subs	r3, #1
 8004ba8:	041b      	lsls	r3, r3, #16
 8004baa:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8004bae:	431a      	orrs	r2, r3
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	691b      	ldr	r3, [r3, #16]
 8004bb4:	3b01      	subs	r3, #1
 8004bb6:	061b      	lsls	r3, r3, #24
 8004bb8:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8004bbc:	4931      	ldr	r1, [pc, #196]	@ (8004c84 <RCCEx_PLL2_Config+0x15c>)
 8004bbe:	4313      	orrs	r3, r2
 8004bc0:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8004bc2:	4b30      	ldr	r3, [pc, #192]	@ (8004c84 <RCCEx_PLL2_Config+0x15c>)
 8004bc4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004bc6:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	695b      	ldr	r3, [r3, #20]
 8004bce:	492d      	ldr	r1, [pc, #180]	@ (8004c84 <RCCEx_PLL2_Config+0x15c>)
 8004bd0:	4313      	orrs	r3, r2
 8004bd2:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8004bd4:	4b2b      	ldr	r3, [pc, #172]	@ (8004c84 <RCCEx_PLL2_Config+0x15c>)
 8004bd6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004bd8:	f023 0220 	bic.w	r2, r3, #32
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	699b      	ldr	r3, [r3, #24]
 8004be0:	4928      	ldr	r1, [pc, #160]	@ (8004c84 <RCCEx_PLL2_Config+0x15c>)
 8004be2:	4313      	orrs	r3, r2
 8004be4:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8004be6:	4b27      	ldr	r3, [pc, #156]	@ (8004c84 <RCCEx_PLL2_Config+0x15c>)
 8004be8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004bea:	4a26      	ldr	r2, [pc, #152]	@ (8004c84 <RCCEx_PLL2_Config+0x15c>)
 8004bec:	f023 0310 	bic.w	r3, r3, #16
 8004bf0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8004bf2:	4b24      	ldr	r3, [pc, #144]	@ (8004c84 <RCCEx_PLL2_Config+0x15c>)
 8004bf4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004bf6:	4b24      	ldr	r3, [pc, #144]	@ (8004c88 <RCCEx_PLL2_Config+0x160>)
 8004bf8:	4013      	ands	r3, r2
 8004bfa:	687a      	ldr	r2, [r7, #4]
 8004bfc:	69d2      	ldr	r2, [r2, #28]
 8004bfe:	00d2      	lsls	r2, r2, #3
 8004c00:	4920      	ldr	r1, [pc, #128]	@ (8004c84 <RCCEx_PLL2_Config+0x15c>)
 8004c02:	4313      	orrs	r3, r2
 8004c04:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8004c06:	4b1f      	ldr	r3, [pc, #124]	@ (8004c84 <RCCEx_PLL2_Config+0x15c>)
 8004c08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c0a:	4a1e      	ldr	r2, [pc, #120]	@ (8004c84 <RCCEx_PLL2_Config+0x15c>)
 8004c0c:	f043 0310 	orr.w	r3, r3, #16
 8004c10:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8004c12:	683b      	ldr	r3, [r7, #0]
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d106      	bne.n	8004c26 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8004c18:	4b1a      	ldr	r3, [pc, #104]	@ (8004c84 <RCCEx_PLL2_Config+0x15c>)
 8004c1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c1c:	4a19      	ldr	r2, [pc, #100]	@ (8004c84 <RCCEx_PLL2_Config+0x15c>)
 8004c1e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004c22:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004c24:	e00f      	b.n	8004c46 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8004c26:	683b      	ldr	r3, [r7, #0]
 8004c28:	2b01      	cmp	r3, #1
 8004c2a:	d106      	bne.n	8004c3a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8004c2c:	4b15      	ldr	r3, [pc, #84]	@ (8004c84 <RCCEx_PLL2_Config+0x15c>)
 8004c2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c30:	4a14      	ldr	r2, [pc, #80]	@ (8004c84 <RCCEx_PLL2_Config+0x15c>)
 8004c32:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004c36:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004c38:	e005      	b.n	8004c46 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8004c3a:	4b12      	ldr	r3, [pc, #72]	@ (8004c84 <RCCEx_PLL2_Config+0x15c>)
 8004c3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c3e:	4a11      	ldr	r2, [pc, #68]	@ (8004c84 <RCCEx_PLL2_Config+0x15c>)
 8004c40:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8004c44:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8004c46:	4b0f      	ldr	r3, [pc, #60]	@ (8004c84 <RCCEx_PLL2_Config+0x15c>)
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	4a0e      	ldr	r2, [pc, #56]	@ (8004c84 <RCCEx_PLL2_Config+0x15c>)
 8004c4c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004c50:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004c52:	f7fc fc15 	bl	8001480 <HAL_GetTick>
 8004c56:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004c58:	e008      	b.n	8004c6c <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004c5a:	f7fc fc11 	bl	8001480 <HAL_GetTick>
 8004c5e:	4602      	mov	r2, r0
 8004c60:	68bb      	ldr	r3, [r7, #8]
 8004c62:	1ad3      	subs	r3, r2, r3
 8004c64:	2b02      	cmp	r3, #2
 8004c66:	d901      	bls.n	8004c6c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004c68:	2303      	movs	r3, #3
 8004c6a:	e006      	b.n	8004c7a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004c6c:	4b05      	ldr	r3, [pc, #20]	@ (8004c84 <RCCEx_PLL2_Config+0x15c>)
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d0f0      	beq.n	8004c5a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8004c78:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c7a:	4618      	mov	r0, r3
 8004c7c:	3710      	adds	r7, #16
 8004c7e:	46bd      	mov	sp, r7
 8004c80:	bd80      	pop	{r7, pc}
 8004c82:	bf00      	nop
 8004c84:	58024400 	.word	0x58024400
 8004c88:	ffff0007 	.word	0xffff0007

08004c8c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8004c8c:	b580      	push	{r7, lr}
 8004c8e:	b084      	sub	sp, #16
 8004c90:	af00      	add	r7, sp, #0
 8004c92:	6078      	str	r0, [r7, #4]
 8004c94:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004c96:	2300      	movs	r3, #0
 8004c98:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004c9a:	4b53      	ldr	r3, [pc, #332]	@ (8004de8 <RCCEx_PLL3_Config+0x15c>)
 8004c9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c9e:	f003 0303 	and.w	r3, r3, #3
 8004ca2:	2b03      	cmp	r3, #3
 8004ca4:	d101      	bne.n	8004caa <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8004ca6:	2301      	movs	r3, #1
 8004ca8:	e099      	b.n	8004dde <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8004caa:	4b4f      	ldr	r3, [pc, #316]	@ (8004de8 <RCCEx_PLL3_Config+0x15c>)
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	4a4e      	ldr	r2, [pc, #312]	@ (8004de8 <RCCEx_PLL3_Config+0x15c>)
 8004cb0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004cb4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004cb6:	f7fc fbe3 	bl	8001480 <HAL_GetTick>
 8004cba:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004cbc:	e008      	b.n	8004cd0 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8004cbe:	f7fc fbdf 	bl	8001480 <HAL_GetTick>
 8004cc2:	4602      	mov	r2, r0
 8004cc4:	68bb      	ldr	r3, [r7, #8]
 8004cc6:	1ad3      	subs	r3, r2, r3
 8004cc8:	2b02      	cmp	r3, #2
 8004cca:	d901      	bls.n	8004cd0 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004ccc:	2303      	movs	r3, #3
 8004cce:	e086      	b.n	8004dde <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004cd0:	4b45      	ldr	r3, [pc, #276]	@ (8004de8 <RCCEx_PLL3_Config+0x15c>)
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d1f0      	bne.n	8004cbe <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8004cdc:	4b42      	ldr	r3, [pc, #264]	@ (8004de8 <RCCEx_PLL3_Config+0x15c>)
 8004cde:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ce0:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	051b      	lsls	r3, r3, #20
 8004cea:	493f      	ldr	r1, [pc, #252]	@ (8004de8 <RCCEx_PLL3_Config+0x15c>)
 8004cec:	4313      	orrs	r3, r2
 8004cee:	628b      	str	r3, [r1, #40]	@ 0x28
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	685b      	ldr	r3, [r3, #4]
 8004cf4:	3b01      	subs	r3, #1
 8004cf6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	689b      	ldr	r3, [r3, #8]
 8004cfe:	3b01      	subs	r3, #1
 8004d00:	025b      	lsls	r3, r3, #9
 8004d02:	b29b      	uxth	r3, r3
 8004d04:	431a      	orrs	r2, r3
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	68db      	ldr	r3, [r3, #12]
 8004d0a:	3b01      	subs	r3, #1
 8004d0c:	041b      	lsls	r3, r3, #16
 8004d0e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8004d12:	431a      	orrs	r2, r3
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	691b      	ldr	r3, [r3, #16]
 8004d18:	3b01      	subs	r3, #1
 8004d1a:	061b      	lsls	r3, r3, #24
 8004d1c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8004d20:	4931      	ldr	r1, [pc, #196]	@ (8004de8 <RCCEx_PLL3_Config+0x15c>)
 8004d22:	4313      	orrs	r3, r2
 8004d24:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8004d26:	4b30      	ldr	r3, [pc, #192]	@ (8004de8 <RCCEx_PLL3_Config+0x15c>)
 8004d28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d2a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	695b      	ldr	r3, [r3, #20]
 8004d32:	492d      	ldr	r1, [pc, #180]	@ (8004de8 <RCCEx_PLL3_Config+0x15c>)
 8004d34:	4313      	orrs	r3, r2
 8004d36:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8004d38:	4b2b      	ldr	r3, [pc, #172]	@ (8004de8 <RCCEx_PLL3_Config+0x15c>)
 8004d3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d3c:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	699b      	ldr	r3, [r3, #24]
 8004d44:	4928      	ldr	r1, [pc, #160]	@ (8004de8 <RCCEx_PLL3_Config+0x15c>)
 8004d46:	4313      	orrs	r3, r2
 8004d48:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8004d4a:	4b27      	ldr	r3, [pc, #156]	@ (8004de8 <RCCEx_PLL3_Config+0x15c>)
 8004d4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d4e:	4a26      	ldr	r2, [pc, #152]	@ (8004de8 <RCCEx_PLL3_Config+0x15c>)
 8004d50:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004d54:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8004d56:	4b24      	ldr	r3, [pc, #144]	@ (8004de8 <RCCEx_PLL3_Config+0x15c>)
 8004d58:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004d5a:	4b24      	ldr	r3, [pc, #144]	@ (8004dec <RCCEx_PLL3_Config+0x160>)
 8004d5c:	4013      	ands	r3, r2
 8004d5e:	687a      	ldr	r2, [r7, #4]
 8004d60:	69d2      	ldr	r2, [r2, #28]
 8004d62:	00d2      	lsls	r2, r2, #3
 8004d64:	4920      	ldr	r1, [pc, #128]	@ (8004de8 <RCCEx_PLL3_Config+0x15c>)
 8004d66:	4313      	orrs	r3, r2
 8004d68:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8004d6a:	4b1f      	ldr	r3, [pc, #124]	@ (8004de8 <RCCEx_PLL3_Config+0x15c>)
 8004d6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d6e:	4a1e      	ldr	r2, [pc, #120]	@ (8004de8 <RCCEx_PLL3_Config+0x15c>)
 8004d70:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004d74:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8004d76:	683b      	ldr	r3, [r7, #0]
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d106      	bne.n	8004d8a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8004d7c:	4b1a      	ldr	r3, [pc, #104]	@ (8004de8 <RCCEx_PLL3_Config+0x15c>)
 8004d7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d80:	4a19      	ldr	r2, [pc, #100]	@ (8004de8 <RCCEx_PLL3_Config+0x15c>)
 8004d82:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004d86:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004d88:	e00f      	b.n	8004daa <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8004d8a:	683b      	ldr	r3, [r7, #0]
 8004d8c:	2b01      	cmp	r3, #1
 8004d8e:	d106      	bne.n	8004d9e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8004d90:	4b15      	ldr	r3, [pc, #84]	@ (8004de8 <RCCEx_PLL3_Config+0x15c>)
 8004d92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d94:	4a14      	ldr	r2, [pc, #80]	@ (8004de8 <RCCEx_PLL3_Config+0x15c>)
 8004d96:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004d9a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004d9c:	e005      	b.n	8004daa <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8004d9e:	4b12      	ldr	r3, [pc, #72]	@ (8004de8 <RCCEx_PLL3_Config+0x15c>)
 8004da0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004da2:	4a11      	ldr	r2, [pc, #68]	@ (8004de8 <RCCEx_PLL3_Config+0x15c>)
 8004da4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004da8:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8004daa:	4b0f      	ldr	r3, [pc, #60]	@ (8004de8 <RCCEx_PLL3_Config+0x15c>)
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	4a0e      	ldr	r2, [pc, #56]	@ (8004de8 <RCCEx_PLL3_Config+0x15c>)
 8004db0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004db4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004db6:	f7fc fb63 	bl	8001480 <HAL_GetTick>
 8004dba:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004dbc:	e008      	b.n	8004dd0 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8004dbe:	f7fc fb5f 	bl	8001480 <HAL_GetTick>
 8004dc2:	4602      	mov	r2, r0
 8004dc4:	68bb      	ldr	r3, [r7, #8]
 8004dc6:	1ad3      	subs	r3, r2, r3
 8004dc8:	2b02      	cmp	r3, #2
 8004dca:	d901      	bls.n	8004dd0 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004dcc:	2303      	movs	r3, #3
 8004dce:	e006      	b.n	8004dde <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004dd0:	4b05      	ldr	r3, [pc, #20]	@ (8004de8 <RCCEx_PLL3_Config+0x15c>)
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d0f0      	beq.n	8004dbe <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8004ddc:	7bfb      	ldrb	r3, [r7, #15]
}
 8004dde:	4618      	mov	r0, r3
 8004de0:	3710      	adds	r7, #16
 8004de2:	46bd      	mov	sp, r7
 8004de4:	bd80      	pop	{r7, pc}
 8004de6:	bf00      	nop
 8004de8:	58024400 	.word	0x58024400
 8004dec:	ffff0007 	.word	0xffff0007

08004df0 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004df0:	b580      	push	{r7, lr}
 8004df2:	b084      	sub	sp, #16
 8004df4:	af00      	add	r7, sp, #0
 8004df6:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d101      	bne.n	8004e02 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004dfe:	2301      	movs	r3, #1
 8004e00:	e10f      	b.n	8005022 <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	2200      	movs	r2, #0
 8004e06:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	4a87      	ldr	r2, [pc, #540]	@ (800502c <HAL_SPI_Init+0x23c>)
 8004e0e:	4293      	cmp	r3, r2
 8004e10:	d00f      	beq.n	8004e32 <HAL_SPI_Init+0x42>
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	4a86      	ldr	r2, [pc, #536]	@ (8005030 <HAL_SPI_Init+0x240>)
 8004e18:	4293      	cmp	r3, r2
 8004e1a:	d00a      	beq.n	8004e32 <HAL_SPI_Init+0x42>
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	4a84      	ldr	r2, [pc, #528]	@ (8005034 <HAL_SPI_Init+0x244>)
 8004e22:	4293      	cmp	r3, r2
 8004e24:	d005      	beq.n	8004e32 <HAL_SPI_Init+0x42>
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	68db      	ldr	r3, [r3, #12]
 8004e2a:	2b0f      	cmp	r3, #15
 8004e2c:	d901      	bls.n	8004e32 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 8004e2e:	2301      	movs	r3, #1
 8004e30:	e0f7      	b.n	8005022 <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8004e32:	6878      	ldr	r0, [r7, #4]
 8004e34:	f000 fbbc 	bl	80055b0 <SPI_GetPacketSize>
 8004e38:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	4a7b      	ldr	r2, [pc, #492]	@ (800502c <HAL_SPI_Init+0x23c>)
 8004e40:	4293      	cmp	r3, r2
 8004e42:	d00c      	beq.n	8004e5e <HAL_SPI_Init+0x6e>
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	4a79      	ldr	r2, [pc, #484]	@ (8005030 <HAL_SPI_Init+0x240>)
 8004e4a:	4293      	cmp	r3, r2
 8004e4c:	d007      	beq.n	8004e5e <HAL_SPI_Init+0x6e>
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	4a78      	ldr	r2, [pc, #480]	@ (8005034 <HAL_SPI_Init+0x244>)
 8004e54:	4293      	cmp	r3, r2
 8004e56:	d002      	beq.n	8004e5e <HAL_SPI_Init+0x6e>
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	2b08      	cmp	r3, #8
 8004e5c:	d811      	bhi.n	8004e82 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8004e62:	4a72      	ldr	r2, [pc, #456]	@ (800502c <HAL_SPI_Init+0x23c>)
 8004e64:	4293      	cmp	r3, r2
 8004e66:	d009      	beq.n	8004e7c <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	4a70      	ldr	r2, [pc, #448]	@ (8005030 <HAL_SPI_Init+0x240>)
 8004e6e:	4293      	cmp	r3, r2
 8004e70:	d004      	beq.n	8004e7c <HAL_SPI_Init+0x8c>
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	4a6f      	ldr	r2, [pc, #444]	@ (8005034 <HAL_SPI_Init+0x244>)
 8004e78:	4293      	cmp	r3, r2
 8004e7a:	d104      	bne.n	8004e86 <HAL_SPI_Init+0x96>
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	2b10      	cmp	r3, #16
 8004e80:	d901      	bls.n	8004e86 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 8004e82:	2301      	movs	r3, #1
 8004e84:	e0cd      	b.n	8005022 <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8004e8c:	b2db      	uxtb	r3, r3
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d106      	bne.n	8004ea0 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	2200      	movs	r2, #0
 8004e96:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004e9a:	6878      	ldr	r0, [r7, #4]
 8004e9c:	f7fc f8b0 	bl	8001000 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	2202      	movs	r2, #2
 8004ea4:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	681a      	ldr	r2, [r3, #0]
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	f022 0201 	bic.w	r2, r2, #1
 8004eb6:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	689b      	ldr	r3, [r3, #8]
 8004ebe:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 8004ec2:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	699b      	ldr	r3, [r3, #24]
 8004ec8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004ecc:	d119      	bne.n	8004f02 <HAL_SPI_Init+0x112>
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	685b      	ldr	r3, [r3, #4]
 8004ed2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004ed6:	d103      	bne.n	8004ee0 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d008      	beq.n	8004ef2 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d10c      	bne.n	8004f02 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8004eec:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004ef0:	d107      	bne.n	8004f02 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	681a      	ldr	r2, [r3, #0]
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8004f00:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	685b      	ldr	r3, [r3, #4]
 8004f06:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d00f      	beq.n	8004f2e <HAL_SPI_Init+0x13e>
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	68db      	ldr	r3, [r3, #12]
 8004f12:	2b06      	cmp	r3, #6
 8004f14:	d90b      	bls.n	8004f2e <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	430a      	orrs	r2, r1
 8004f2a:	601a      	str	r2, [r3, #0]
 8004f2c:	e007      	b.n	8004f3e <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	681a      	ldr	r2, [r3, #0]
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004f3c:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	69da      	ldr	r2, [r3, #28]
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f46:	431a      	orrs	r2, r3
 8004f48:	68bb      	ldr	r3, [r7, #8]
 8004f4a:	431a      	orrs	r2, r3
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004f50:	ea42 0103 	orr.w	r1, r2, r3
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	68da      	ldr	r2, [r3, #12]
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	430a      	orrs	r2, r1
 8004f5e:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f68:	431a      	orrs	r2, r3
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f6e:	431a      	orrs	r2, r3
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	699b      	ldr	r3, [r3, #24]
 8004f74:	431a      	orrs	r2, r3
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	691b      	ldr	r3, [r3, #16]
 8004f7a:	431a      	orrs	r2, r3
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	695b      	ldr	r3, [r3, #20]
 8004f80:	431a      	orrs	r2, r3
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	6a1b      	ldr	r3, [r3, #32]
 8004f86:	431a      	orrs	r2, r3
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	685b      	ldr	r3, [r3, #4]
 8004f8c:	431a      	orrs	r2, r3
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004f92:	431a      	orrs	r2, r3
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	689b      	ldr	r3, [r3, #8]
 8004f98:	431a      	orrs	r2, r3
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004f9e:	ea42 0103 	orr.w	r1, r2, r3
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	430a      	orrs	r2, r1
 8004fac:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	685b      	ldr	r3, [r3, #4]
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d113      	bne.n	8004fde <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	689b      	ldr	r3, [r3, #8]
 8004fbc:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004fc8:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	689b      	ldr	r3, [r3, #8]
 8004fd0:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004fdc:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	f022 0201 	bic.w	r2, r2, #1
 8004fec:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	685b      	ldr	r3, [r3, #4]
 8004ff2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d00a      	beq.n	8005010 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	68db      	ldr	r3, [r3, #12]
 8005000:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	430a      	orrs	r2, r1
 800500e:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	2200      	movs	r2, #0
 8005014:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	2201      	movs	r2, #1
 800501c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 8005020:	2300      	movs	r3, #0
}
 8005022:	4618      	mov	r0, r3
 8005024:	3710      	adds	r7, #16
 8005026:	46bd      	mov	sp, r7
 8005028:	bd80      	pop	{r7, pc}
 800502a:	bf00      	nop
 800502c:	40013000 	.word	0x40013000
 8005030:	40003800 	.word	0x40003800
 8005034:	40003c00 	.word	0x40003c00

08005038 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005038:	b580      	push	{r7, lr}
 800503a:	b088      	sub	sp, #32
 800503c:	af02      	add	r7, sp, #8
 800503e:	60f8      	str	r0, [r7, #12]
 8005040:	60b9      	str	r1, [r7, #8]
 8005042:	603b      	str	r3, [r7, #0]
 8005044:	4613      	mov	r3, r2
 8005046:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	3320      	adds	r3, #32
 800504e:	617b      	str	r3, [r7, #20]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005050:	f7fc fa16 	bl	8001480 <HAL_GetTick>
 8005054:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800505c:	b2db      	uxtb	r3, r3
 800505e:	2b01      	cmp	r3, #1
 8005060:	d001      	beq.n	8005066 <HAL_SPI_Transmit+0x2e>
  {
    return HAL_BUSY;
 8005062:	2302      	movs	r3, #2
 8005064:	e1d1      	b.n	800540a <HAL_SPI_Transmit+0x3d2>
  }

  if ((pData == NULL) || (Size == 0UL))
 8005066:	68bb      	ldr	r3, [r7, #8]
 8005068:	2b00      	cmp	r3, #0
 800506a:	d002      	beq.n	8005072 <HAL_SPI_Transmit+0x3a>
 800506c:	88fb      	ldrh	r3, [r7, #6]
 800506e:	2b00      	cmp	r3, #0
 8005070:	d101      	bne.n	8005076 <HAL_SPI_Transmit+0x3e>
  {
    return HAL_ERROR;
 8005072:	2301      	movs	r3, #1
 8005074:	e1c9      	b.n	800540a <HAL_SPI_Transmit+0x3d2>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800507c:	2b01      	cmp	r3, #1
 800507e:	d101      	bne.n	8005084 <HAL_SPI_Transmit+0x4c>
 8005080:	2302      	movs	r3, #2
 8005082:	e1c2      	b.n	800540a <HAL_SPI_Transmit+0x3d2>
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	2201      	movs	r2, #1
 8005088:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	2203      	movs	r2, #3
 8005090:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	2200      	movs	r2, #0
 8005098:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	68ba      	ldr	r2, [r7, #8]
 80050a0:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = Size;
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	88fa      	ldrh	r2, [r7, #6]
 80050a6:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = Size;
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	88fa      	ldrh	r2, [r7, #6]
 80050ae:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	2200      	movs	r2, #0
 80050b6:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	2200      	movs	r2, #0
 80050bc:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	2200      	movs	r2, #0
 80050c4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxISR       = NULL;
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	2200      	movs	r2, #0
 80050cc:	675a      	str	r2, [r3, #116]	@ 0x74
  hspi->RxISR       = NULL;
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	2200      	movs	r2, #0
 80050d2:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	689b      	ldr	r3, [r3, #8]
 80050d8:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 80050dc:	d108      	bne.n	80050f0 <HAL_SPI_Transmit+0xb8>
  {
    SPI_1LINE_TX(hspi);
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	681a      	ldr	r2, [r3, #0]
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80050ec:	601a      	str	r2, [r3, #0]
 80050ee:	e009      	b.n	8005104 <HAL_SPI_Transmit+0xcc>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	68db      	ldr	r3, [r3, #12]
 80050f6:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8005102:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	685a      	ldr	r2, [r3, #4]
 800510a:	4b96      	ldr	r3, [pc, #600]	@ (8005364 <HAL_SPI_Transmit+0x32c>)
 800510c:	4013      	ands	r3, r2
 800510e:	88f9      	ldrh	r1, [r7, #6]
 8005110:	68fa      	ldr	r2, [r7, #12]
 8005112:	6812      	ldr	r2, [r2, #0]
 8005114:	430b      	orrs	r3, r1
 8005116:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	681a      	ldr	r2, [r3, #0]
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	f042 0201 	orr.w	r2, r2, #1
 8005126:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	685b      	ldr	r3, [r3, #4]
 800512c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005130:	d107      	bne.n	8005142 <HAL_SPI_Transmit+0x10a>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	681a      	ldr	r2, [r3, #0]
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005140:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	68db      	ldr	r3, [r3, #12]
 8005146:	2b0f      	cmp	r3, #15
 8005148:	d947      	bls.n	80051da <HAL_SPI_Transmit+0x1a2>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800514a:	e03f      	b.n	80051cc <HAL_SPI_Transmit+0x194>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	695b      	ldr	r3, [r3, #20]
 8005152:	f003 0302 	and.w	r3, r3, #2
 8005156:	2b02      	cmp	r3, #2
 8005158:	d114      	bne.n	8005184 <HAL_SPI_Transmit+0x14c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	6812      	ldr	r2, [r2, #0]
 8005164:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800516a:	1d1a      	adds	r2, r3, #4
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8005176:	b29b      	uxth	r3, r3
 8005178:	3b01      	subs	r3, #1
 800517a:	b29a      	uxth	r2, r3
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8005182:	e023      	b.n	80051cc <HAL_SPI_Transmit+0x194>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005184:	f7fc f97c 	bl	8001480 <HAL_GetTick>
 8005188:	4602      	mov	r2, r0
 800518a:	693b      	ldr	r3, [r7, #16]
 800518c:	1ad3      	subs	r3, r2, r3
 800518e:	683a      	ldr	r2, [r7, #0]
 8005190:	429a      	cmp	r2, r3
 8005192:	d803      	bhi.n	800519c <HAL_SPI_Transmit+0x164>
 8005194:	683b      	ldr	r3, [r7, #0]
 8005196:	f1b3 3fff 	cmp.w	r3, #4294967295
 800519a:	d102      	bne.n	80051a2 <HAL_SPI_Transmit+0x16a>
 800519c:	683b      	ldr	r3, [r7, #0]
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d114      	bne.n	80051cc <HAL_SPI_Transmit+0x194>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80051a2:	68f8      	ldr	r0, [r7, #12]
 80051a4:	f000 f936 	bl	8005414 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80051ae:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	2201      	movs	r2, #1
 80051bc:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	2200      	movs	r2, #0
 80051c4:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 80051c8:	2303      	movs	r3, #3
 80051ca:	e11e      	b.n	800540a <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80051d2:	b29b      	uxth	r3, r3
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d1b9      	bne.n	800514c <HAL_SPI_Transmit+0x114>
 80051d8:	e0f1      	b.n	80053be <HAL_SPI_Transmit+0x386>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	68db      	ldr	r3, [r3, #12]
 80051de:	2b07      	cmp	r3, #7
 80051e0:	f240 80e6 	bls.w	80053b0 <HAL_SPI_Transmit+0x378>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 80051e4:	e05d      	b.n	80052a2 <HAL_SPI_Transmit+0x26a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	695b      	ldr	r3, [r3, #20]
 80051ec:	f003 0302 	and.w	r3, r3, #2
 80051f0:	2b02      	cmp	r3, #2
 80051f2:	d132      	bne.n	800525a <HAL_SPI_Transmit+0x222>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80051fa:	b29b      	uxth	r3, r3
 80051fc:	2b01      	cmp	r3, #1
 80051fe:	d918      	bls.n	8005232 <HAL_SPI_Transmit+0x1fa>
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005204:	2b00      	cmp	r3, #0
 8005206:	d014      	beq.n	8005232 <HAL_SPI_Transmit+0x1fa>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	6812      	ldr	r2, [r2, #0]
 8005212:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005218:	1d1a      	adds	r2, r3, #4
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8005224:	b29b      	uxth	r3, r3
 8005226:	3b02      	subs	r3, #2
 8005228:	b29a      	uxth	r2, r3
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8005230:	e037      	b.n	80052a2 <HAL_SPI_Transmit+0x26a>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005236:	881a      	ldrh	r2, [r3, #0]
 8005238:	697b      	ldr	r3, [r7, #20]
 800523a:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005240:	1c9a      	adds	r2, r3, #2
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800524c:	b29b      	uxth	r3, r3
 800524e:	3b01      	subs	r3, #1
 8005250:	b29a      	uxth	r2, r3
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8005258:	e023      	b.n	80052a2 <HAL_SPI_Transmit+0x26a>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800525a:	f7fc f911 	bl	8001480 <HAL_GetTick>
 800525e:	4602      	mov	r2, r0
 8005260:	693b      	ldr	r3, [r7, #16]
 8005262:	1ad3      	subs	r3, r2, r3
 8005264:	683a      	ldr	r2, [r7, #0]
 8005266:	429a      	cmp	r2, r3
 8005268:	d803      	bhi.n	8005272 <HAL_SPI_Transmit+0x23a>
 800526a:	683b      	ldr	r3, [r7, #0]
 800526c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005270:	d102      	bne.n	8005278 <HAL_SPI_Transmit+0x240>
 8005272:	683b      	ldr	r3, [r7, #0]
 8005274:	2b00      	cmp	r3, #0
 8005276:	d114      	bne.n	80052a2 <HAL_SPI_Transmit+0x26a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8005278:	68f8      	ldr	r0, [r7, #12]
 800527a:	f000 f8cb 	bl	8005414 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005284:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	2201      	movs	r2, #1
 8005292:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	2200      	movs	r2, #0
 800529a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800529e:	2303      	movs	r3, #3
 80052a0:	e0b3      	b.n	800540a <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80052a8:	b29b      	uxth	r3, r3
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d19b      	bne.n	80051e6 <HAL_SPI_Transmit+0x1ae>
 80052ae:	e086      	b.n	80053be <HAL_SPI_Transmit+0x386>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	695b      	ldr	r3, [r3, #20]
 80052b6:	f003 0302 	and.w	r3, r3, #2
 80052ba:	2b02      	cmp	r3, #2
 80052bc:	d154      	bne.n	8005368 <HAL_SPI_Transmit+0x330>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80052c4:	b29b      	uxth	r3, r3
 80052c6:	2b03      	cmp	r3, #3
 80052c8:	d918      	bls.n	80052fc <HAL_SPI_Transmit+0x2c4>
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80052ce:	2b40      	cmp	r3, #64	@ 0x40
 80052d0:	d914      	bls.n	80052fc <HAL_SPI_Transmit+0x2c4>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	6812      	ldr	r2, [r2, #0]
 80052dc:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80052e2:	1d1a      	adds	r2, r3, #4
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80052ee:	b29b      	uxth	r3, r3
 80052f0:	3b04      	subs	r3, #4
 80052f2:	b29a      	uxth	r2, r3
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 80052fa:	e059      	b.n	80053b0 <HAL_SPI_Transmit+0x378>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8005302:	b29b      	uxth	r3, r3
 8005304:	2b01      	cmp	r3, #1
 8005306:	d917      	bls.n	8005338 <HAL_SPI_Transmit+0x300>
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800530c:	2b00      	cmp	r3, #0
 800530e:	d013      	beq.n	8005338 <HAL_SPI_Transmit+0x300>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005314:	881a      	ldrh	r2, [r3, #0]
 8005316:	697b      	ldr	r3, [r7, #20]
 8005318:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800531e:	1c9a      	adds	r2, r3, #2
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800532a:	b29b      	uxth	r3, r3
 800532c:	3b02      	subs	r3, #2
 800532e:	b29a      	uxth	r2, r3
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8005336:	e03b      	b.n	80053b0 <HAL_SPI_Transmit+0x378>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	3320      	adds	r3, #32
 8005342:	7812      	ldrb	r2, [r2, #0]
 8005344:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800534a:	1c5a      	adds	r2, r3, #1
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8005356:	b29b      	uxth	r3, r3
 8005358:	3b01      	subs	r3, #1
 800535a:	b29a      	uxth	r2, r3
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8005362:	e025      	b.n	80053b0 <HAL_SPI_Transmit+0x378>
 8005364:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005368:	f7fc f88a 	bl	8001480 <HAL_GetTick>
 800536c:	4602      	mov	r2, r0
 800536e:	693b      	ldr	r3, [r7, #16]
 8005370:	1ad3      	subs	r3, r2, r3
 8005372:	683a      	ldr	r2, [r7, #0]
 8005374:	429a      	cmp	r2, r3
 8005376:	d803      	bhi.n	8005380 <HAL_SPI_Transmit+0x348>
 8005378:	683b      	ldr	r3, [r7, #0]
 800537a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800537e:	d102      	bne.n	8005386 <HAL_SPI_Transmit+0x34e>
 8005380:	683b      	ldr	r3, [r7, #0]
 8005382:	2b00      	cmp	r3, #0
 8005384:	d114      	bne.n	80053b0 <HAL_SPI_Transmit+0x378>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8005386:	68f8      	ldr	r0, [r7, #12]
 8005388:	f000 f844 	bl	8005414 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005392:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	2201      	movs	r2, #1
 80053a0:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	2200      	movs	r2, #0
 80053a8:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 80053ac:	2303      	movs	r3, #3
 80053ae:	e02c      	b.n	800540a <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80053b6:	b29b      	uxth	r3, r3
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	f47f af79 	bne.w	80052b0 <HAL_SPI_Transmit+0x278>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 80053be:	693b      	ldr	r3, [r7, #16]
 80053c0:	9300      	str	r3, [sp, #0]
 80053c2:	683b      	ldr	r3, [r7, #0]
 80053c4:	2200      	movs	r2, #0
 80053c6:	2108      	movs	r1, #8
 80053c8:	68f8      	ldr	r0, [r7, #12]
 80053ca:	f000 f8c3 	bl	8005554 <SPI_WaitOnFlagUntilTimeout>
 80053ce:	4603      	mov	r3, r0
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d007      	beq.n	80053e4 <HAL_SPI_Transmit+0x3ac>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80053da:	f043 0220 	orr.w	r2, r3, #32
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 80053e4:	68f8      	ldr	r0, [r7, #12]
 80053e6:	f000 f815 	bl	8005414 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	2201      	movs	r2, #1
 80053ee:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	2200      	movs	r2, #0
 80053f6:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005400:	2b00      	cmp	r3, #0
 8005402:	d001      	beq.n	8005408 <HAL_SPI_Transmit+0x3d0>
  {
    return HAL_ERROR;
 8005404:	2301      	movs	r3, #1
 8005406:	e000      	b.n	800540a <HAL_SPI_Transmit+0x3d2>
  }
  else
  {
    return HAL_OK;
 8005408:	2300      	movs	r3, #0
  }
}
 800540a:	4618      	mov	r0, r3
 800540c:	3718      	adds	r7, #24
 800540e:	46bd      	mov	sp, r7
 8005410:	bd80      	pop	{r7, pc}
 8005412:	bf00      	nop

08005414 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8005414:	b480      	push	{r7}
 8005416:	b085      	sub	sp, #20
 8005418:	af00      	add	r7, sp, #0
 800541a:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	695b      	ldr	r3, [r3, #20]
 8005422:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	699a      	ldr	r2, [r3, #24]
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	f042 0208 	orr.w	r2, r2, #8
 8005432:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	699a      	ldr	r2, [r3, #24]
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	f042 0210 	orr.w	r2, r2, #16
 8005442:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	681a      	ldr	r2, [r3, #0]
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	f022 0201 	bic.w	r2, r2, #1
 8005452:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	6919      	ldr	r1, [r3, #16]
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681a      	ldr	r2, [r3, #0]
 800545e:	4b3c      	ldr	r3, [pc, #240]	@ (8005550 <SPI_CloseTransfer+0x13c>)
 8005460:	400b      	ands	r3, r1
 8005462:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	689a      	ldr	r2, [r3, #8]
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 8005472:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800547a:	b2db      	uxtb	r3, r3
 800547c:	2b04      	cmp	r3, #4
 800547e:	d014      	beq.n	80054aa <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	f003 0320 	and.w	r3, r3, #32
 8005486:	2b00      	cmp	r3, #0
 8005488:	d00f      	beq.n	80054aa <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005490:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	699a      	ldr	r2, [r3, #24]
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	f042 0220 	orr.w	r2, r2, #32
 80054a8:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 80054b0:	b2db      	uxtb	r3, r3
 80054b2:	2b03      	cmp	r3, #3
 80054b4:	d014      	beq.n	80054e0 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d00f      	beq.n	80054e0 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80054c6:	f043 0204 	orr.w	r2, r3, #4
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	699a      	ldr	r2, [r3, #24]
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80054de:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d00f      	beq.n	800550a <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80054f0:	f043 0201 	orr.w	r2, r3, #1
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	699a      	ldr	r2, [r3, #24]
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005508:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005510:	2b00      	cmp	r3, #0
 8005512:	d00f      	beq.n	8005534 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800551a:	f043 0208 	orr.w	r2, r3, #8
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	699a      	ldr	r2, [r3, #24]
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005532:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	2200      	movs	r2, #0
 8005538:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	2200      	movs	r2, #0
 8005540:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
}
 8005544:	bf00      	nop
 8005546:	3714      	adds	r7, #20
 8005548:	46bd      	mov	sp, r7
 800554a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800554e:	4770      	bx	lr
 8005550:	fffffc90 	.word	0xfffffc90

08005554 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8005554:	b580      	push	{r7, lr}
 8005556:	b084      	sub	sp, #16
 8005558:	af00      	add	r7, sp, #0
 800555a:	60f8      	str	r0, [r7, #12]
 800555c:	60b9      	str	r1, [r7, #8]
 800555e:	603b      	str	r3, [r7, #0]
 8005560:	4613      	mov	r3, r2
 8005562:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8005564:	e010      	b.n	8005588 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005566:	f7fb ff8b 	bl	8001480 <HAL_GetTick>
 800556a:	4602      	mov	r2, r0
 800556c:	69bb      	ldr	r3, [r7, #24]
 800556e:	1ad3      	subs	r3, r2, r3
 8005570:	683a      	ldr	r2, [r7, #0]
 8005572:	429a      	cmp	r2, r3
 8005574:	d803      	bhi.n	800557e <SPI_WaitOnFlagUntilTimeout+0x2a>
 8005576:	683b      	ldr	r3, [r7, #0]
 8005578:	f1b3 3fff 	cmp.w	r3, #4294967295
 800557c:	d102      	bne.n	8005584 <SPI_WaitOnFlagUntilTimeout+0x30>
 800557e:	683b      	ldr	r3, [r7, #0]
 8005580:	2b00      	cmp	r3, #0
 8005582:	d101      	bne.n	8005588 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 8005584:	2303      	movs	r3, #3
 8005586:	e00f      	b.n	80055a8 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	695a      	ldr	r2, [r3, #20]
 800558e:	68bb      	ldr	r3, [r7, #8]
 8005590:	4013      	ands	r3, r2
 8005592:	68ba      	ldr	r2, [r7, #8]
 8005594:	429a      	cmp	r2, r3
 8005596:	bf0c      	ite	eq
 8005598:	2301      	moveq	r3, #1
 800559a:	2300      	movne	r3, #0
 800559c:	b2db      	uxtb	r3, r3
 800559e:	461a      	mov	r2, r3
 80055a0:	79fb      	ldrb	r3, [r7, #7]
 80055a2:	429a      	cmp	r2, r3
 80055a4:	d0df      	beq.n	8005566 <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 80055a6:	2300      	movs	r3, #0
}
 80055a8:	4618      	mov	r0, r3
 80055aa:	3710      	adds	r7, #16
 80055ac:	46bd      	mov	sp, r7
 80055ae:	bd80      	pop	{r7, pc}

080055b0 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 80055b0:	b480      	push	{r7}
 80055b2:	b085      	sub	sp, #20
 80055b4:	af00      	add	r7, sp, #0
 80055b6:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80055bc:	095b      	lsrs	r3, r3, #5
 80055be:	3301      	adds	r3, #1
 80055c0:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	68db      	ldr	r3, [r3, #12]
 80055c6:	3301      	adds	r3, #1
 80055c8:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 80055ca:	68bb      	ldr	r3, [r7, #8]
 80055cc:	3307      	adds	r3, #7
 80055ce:	08db      	lsrs	r3, r3, #3
 80055d0:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 80055d2:	68bb      	ldr	r3, [r7, #8]
 80055d4:	68fa      	ldr	r2, [r7, #12]
 80055d6:	fb02 f303 	mul.w	r3, r2, r3
}
 80055da:	4618      	mov	r0, r3
 80055dc:	3714      	adds	r7, #20
 80055de:	46bd      	mov	sp, r7
 80055e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e4:	4770      	bx	lr

080055e6 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80055e6:	b480      	push	{r7}
 80055e8:	b085      	sub	sp, #20
 80055ea:	af00      	add	r7, sp, #0
 80055ec:	4603      	mov	r3, r0
 80055ee:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80055f0:	2300      	movs	r3, #0
 80055f2:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80055f4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80055f8:	2b84      	cmp	r3, #132	@ 0x84
 80055fa:	d005      	beq.n	8005608 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80055fc:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	4413      	add	r3, r2
 8005604:	3303      	adds	r3, #3
 8005606:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8005608:	68fb      	ldr	r3, [r7, #12]
}
 800560a:	4618      	mov	r0, r3
 800560c:	3714      	adds	r7, #20
 800560e:	46bd      	mov	sp, r7
 8005610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005614:	4770      	bx	lr

08005616 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8005616:	b580      	push	{r7, lr}
 8005618:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800561a:	f000 fb85 	bl	8005d28 <vTaskStartScheduler>
  
  return osOK;
 800561e:	2300      	movs	r3, #0
}
 8005620:	4618      	mov	r0, r3
 8005622:	bd80      	pop	{r7, pc}

08005624 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8005624:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005626:	b089      	sub	sp, #36	@ 0x24
 8005628:	af04      	add	r7, sp, #16
 800562a:	6078      	str	r0, [r7, #4]
 800562c:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	695b      	ldr	r3, [r3, #20]
 8005632:	2b00      	cmp	r3, #0
 8005634:	d020      	beq.n	8005678 <osThreadCreate+0x54>
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	699b      	ldr	r3, [r3, #24]
 800563a:	2b00      	cmp	r3, #0
 800563c:	d01c      	beq.n	8005678 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	685c      	ldr	r4, [r3, #4]
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	691e      	ldr	r6, [r3, #16]
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005650:	4618      	mov	r0, r3
 8005652:	f7ff ffc8 	bl	80055e6 <makeFreeRtosPriority>
 8005656:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	695b      	ldr	r3, [r3, #20]
 800565c:	687a      	ldr	r2, [r7, #4]
 800565e:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005660:	9202      	str	r2, [sp, #8]
 8005662:	9301      	str	r3, [sp, #4]
 8005664:	9100      	str	r1, [sp, #0]
 8005666:	683b      	ldr	r3, [r7, #0]
 8005668:	4632      	mov	r2, r6
 800566a:	4629      	mov	r1, r5
 800566c:	4620      	mov	r0, r4
 800566e:	f000 f8f9 	bl	8005864 <xTaskCreateStatic>
 8005672:	4603      	mov	r3, r0
 8005674:	60fb      	str	r3, [r7, #12]
 8005676:	e01c      	b.n	80056b2 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	685c      	ldr	r4, [r3, #4]
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005684:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800568c:	4618      	mov	r0, r3
 800568e:	f7ff ffaa 	bl	80055e6 <makeFreeRtosPriority>
 8005692:	4602      	mov	r2, r0
 8005694:	f107 030c 	add.w	r3, r7, #12
 8005698:	9301      	str	r3, [sp, #4]
 800569a:	9200      	str	r2, [sp, #0]
 800569c:	683b      	ldr	r3, [r7, #0]
 800569e:	4632      	mov	r2, r6
 80056a0:	4629      	mov	r1, r5
 80056a2:	4620      	mov	r0, r4
 80056a4:	f000 f93e 	bl	8005924 <xTaskCreate>
 80056a8:	4603      	mov	r3, r0
 80056aa:	2b01      	cmp	r3, #1
 80056ac:	d001      	beq.n	80056b2 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80056ae:	2300      	movs	r3, #0
 80056b0:	e000      	b.n	80056b4 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80056b2:	68fb      	ldr	r3, [r7, #12]
}
 80056b4:	4618      	mov	r0, r3
 80056b6:	3714      	adds	r7, #20
 80056b8:	46bd      	mov	sp, r7
 80056ba:	bdf0      	pop	{r4, r5, r6, r7, pc}

080056bc <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80056bc:	b580      	push	{r7, lr}
 80056be:	b084      	sub	sp, #16
 80056c0:	af00      	add	r7, sp, #0
 80056c2:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d001      	beq.n	80056d2 <osDelay+0x16>
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	e000      	b.n	80056d4 <osDelay+0x18>
 80056d2:	2301      	movs	r3, #1
 80056d4:	4618      	mov	r0, r3
 80056d6:	f000 fa5d 	bl	8005b94 <vTaskDelay>
  
  return osOK;
 80056da:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80056dc:	4618      	mov	r0, r3
 80056de:	3710      	adds	r7, #16
 80056e0:	46bd      	mov	sp, r7
 80056e2:	bd80      	pop	{r7, pc}

080056e4 <osThreadSuspend>:
* @brief  Suspend execution of a thread.
* @param   thread_id   thread ID obtained by \ref osThreadCreate or \ref osThreadGetId.
* @retval  status code that indicates the execution status of the function.
*/
osStatus osThreadSuspend (osThreadId thread_id)
{
 80056e4:	b580      	push	{r7, lr}
 80056e6:	b082      	sub	sp, #8
 80056e8:	af00      	add	r7, sp, #0
 80056ea:	6078      	str	r0, [r7, #4]
#if (INCLUDE_vTaskSuspend == 1)
    vTaskSuspend(thread_id);
 80056ec:	6878      	ldr	r0, [r7, #4]
 80056ee:	f000 fa87 	bl	8005c00 <vTaskSuspend>
  
  return osOK;
 80056f2:	2300      	movs	r3, #0
#else
  return osErrorResource;
#endif
}
 80056f4:	4618      	mov	r0, r3
 80056f6:	3708      	adds	r7, #8
 80056f8:	46bd      	mov	sp, r7
 80056fa:	bd80      	pop	{r7, pc}

080056fc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80056fc:	b480      	push	{r7}
 80056fe:	b083      	sub	sp, #12
 8005700:	af00      	add	r7, sp, #0
 8005702:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	f103 0208 	add.w	r2, r3, #8
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	f04f 32ff 	mov.w	r2, #4294967295
 8005714:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	f103 0208 	add.w	r2, r3, #8
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	f103 0208 	add.w	r2, r3, #8
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	2200      	movs	r2, #0
 800572e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005730:	bf00      	nop
 8005732:	370c      	adds	r7, #12
 8005734:	46bd      	mov	sp, r7
 8005736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800573a:	4770      	bx	lr

0800573c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800573c:	b480      	push	{r7}
 800573e:	b083      	sub	sp, #12
 8005740:	af00      	add	r7, sp, #0
 8005742:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	2200      	movs	r2, #0
 8005748:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800574a:	bf00      	nop
 800574c:	370c      	adds	r7, #12
 800574e:	46bd      	mov	sp, r7
 8005750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005754:	4770      	bx	lr

08005756 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005756:	b480      	push	{r7}
 8005758:	b085      	sub	sp, #20
 800575a:	af00      	add	r7, sp, #0
 800575c:	6078      	str	r0, [r7, #4]
 800575e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	685b      	ldr	r3, [r3, #4]
 8005764:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005766:	683b      	ldr	r3, [r7, #0]
 8005768:	68fa      	ldr	r2, [r7, #12]
 800576a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	689a      	ldr	r2, [r3, #8]
 8005770:	683b      	ldr	r3, [r7, #0]
 8005772:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	689b      	ldr	r3, [r3, #8]
 8005778:	683a      	ldr	r2, [r7, #0]
 800577a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	683a      	ldr	r2, [r7, #0]
 8005780:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005782:	683b      	ldr	r3, [r7, #0]
 8005784:	687a      	ldr	r2, [r7, #4]
 8005786:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	1c5a      	adds	r2, r3, #1
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	601a      	str	r2, [r3, #0]
}
 8005792:	bf00      	nop
 8005794:	3714      	adds	r7, #20
 8005796:	46bd      	mov	sp, r7
 8005798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800579c:	4770      	bx	lr

0800579e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800579e:	b480      	push	{r7}
 80057a0:	b085      	sub	sp, #20
 80057a2:	af00      	add	r7, sp, #0
 80057a4:	6078      	str	r0, [r7, #4]
 80057a6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80057a8:	683b      	ldr	r3, [r7, #0]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80057ae:	68bb      	ldr	r3, [r7, #8]
 80057b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057b4:	d103      	bne.n	80057be <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	691b      	ldr	r3, [r3, #16]
 80057ba:	60fb      	str	r3, [r7, #12]
 80057bc:	e00c      	b.n	80057d8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	3308      	adds	r3, #8
 80057c2:	60fb      	str	r3, [r7, #12]
 80057c4:	e002      	b.n	80057cc <vListInsert+0x2e>
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	685b      	ldr	r3, [r3, #4]
 80057ca:	60fb      	str	r3, [r7, #12]
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	685b      	ldr	r3, [r3, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	68ba      	ldr	r2, [r7, #8]
 80057d4:	429a      	cmp	r2, r3
 80057d6:	d2f6      	bcs.n	80057c6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	685a      	ldr	r2, [r3, #4]
 80057dc:	683b      	ldr	r3, [r7, #0]
 80057de:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80057e0:	683b      	ldr	r3, [r7, #0]
 80057e2:	685b      	ldr	r3, [r3, #4]
 80057e4:	683a      	ldr	r2, [r7, #0]
 80057e6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80057e8:	683b      	ldr	r3, [r7, #0]
 80057ea:	68fa      	ldr	r2, [r7, #12]
 80057ec:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	683a      	ldr	r2, [r7, #0]
 80057f2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80057f4:	683b      	ldr	r3, [r7, #0]
 80057f6:	687a      	ldr	r2, [r7, #4]
 80057f8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	1c5a      	adds	r2, r3, #1
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	601a      	str	r2, [r3, #0]
}
 8005804:	bf00      	nop
 8005806:	3714      	adds	r7, #20
 8005808:	46bd      	mov	sp, r7
 800580a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800580e:	4770      	bx	lr

08005810 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005810:	b480      	push	{r7}
 8005812:	b085      	sub	sp, #20
 8005814:	af00      	add	r7, sp, #0
 8005816:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	691b      	ldr	r3, [r3, #16]
 800581c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	685b      	ldr	r3, [r3, #4]
 8005822:	687a      	ldr	r2, [r7, #4]
 8005824:	6892      	ldr	r2, [r2, #8]
 8005826:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	689b      	ldr	r3, [r3, #8]
 800582c:	687a      	ldr	r2, [r7, #4]
 800582e:	6852      	ldr	r2, [r2, #4]
 8005830:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	685b      	ldr	r3, [r3, #4]
 8005836:	687a      	ldr	r2, [r7, #4]
 8005838:	429a      	cmp	r2, r3
 800583a:	d103      	bne.n	8005844 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	689a      	ldr	r2, [r3, #8]
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	2200      	movs	r2, #0
 8005848:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	1e5a      	subs	r2, r3, #1
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	681b      	ldr	r3, [r3, #0]
}
 8005858:	4618      	mov	r0, r3
 800585a:	3714      	adds	r7, #20
 800585c:	46bd      	mov	sp, r7
 800585e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005862:	4770      	bx	lr

08005864 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005864:	b580      	push	{r7, lr}
 8005866:	b08e      	sub	sp, #56	@ 0x38
 8005868:	af04      	add	r7, sp, #16
 800586a:	60f8      	str	r0, [r7, #12]
 800586c:	60b9      	str	r1, [r7, #8]
 800586e:	607a      	str	r2, [r7, #4]
 8005870:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005872:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005874:	2b00      	cmp	r3, #0
 8005876:	d10b      	bne.n	8005890 <xTaskCreateStatic+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005878:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800587c:	f383 8811 	msr	BASEPRI, r3
 8005880:	f3bf 8f6f 	isb	sy
 8005884:	f3bf 8f4f 	dsb	sy
 8005888:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800588a:	bf00      	nop
 800588c:	bf00      	nop
 800588e:	e7fd      	b.n	800588c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8005890:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005892:	2b00      	cmp	r3, #0
 8005894:	d10b      	bne.n	80058ae <xTaskCreateStatic+0x4a>
	__asm volatile
 8005896:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800589a:	f383 8811 	msr	BASEPRI, r3
 800589e:	f3bf 8f6f 	isb	sy
 80058a2:	f3bf 8f4f 	dsb	sy
 80058a6:	61fb      	str	r3, [r7, #28]
}
 80058a8:	bf00      	nop
 80058aa:	bf00      	nop
 80058ac:	e7fd      	b.n	80058aa <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80058ae:	2354      	movs	r3, #84	@ 0x54
 80058b0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80058b2:	693b      	ldr	r3, [r7, #16]
 80058b4:	2b54      	cmp	r3, #84	@ 0x54
 80058b6:	d00b      	beq.n	80058d0 <xTaskCreateStatic+0x6c>
	__asm volatile
 80058b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80058bc:	f383 8811 	msr	BASEPRI, r3
 80058c0:	f3bf 8f6f 	isb	sy
 80058c4:	f3bf 8f4f 	dsb	sy
 80058c8:	61bb      	str	r3, [r7, #24]
}
 80058ca:	bf00      	nop
 80058cc:	bf00      	nop
 80058ce:	e7fd      	b.n	80058cc <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80058d0:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80058d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d01e      	beq.n	8005916 <xTaskCreateStatic+0xb2>
 80058d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d01b      	beq.n	8005916 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80058de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80058e0:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80058e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058e4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80058e6:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80058e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058ea:	2202      	movs	r2, #2
 80058ec:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80058f0:	2300      	movs	r3, #0
 80058f2:	9303      	str	r3, [sp, #12]
 80058f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058f6:	9302      	str	r3, [sp, #8]
 80058f8:	f107 0314 	add.w	r3, r7, #20
 80058fc:	9301      	str	r3, [sp, #4]
 80058fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005900:	9300      	str	r3, [sp, #0]
 8005902:	683b      	ldr	r3, [r7, #0]
 8005904:	687a      	ldr	r2, [r7, #4]
 8005906:	68b9      	ldr	r1, [r7, #8]
 8005908:	68f8      	ldr	r0, [r7, #12]
 800590a:	f000 f850 	bl	80059ae <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800590e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8005910:	f000 f8d6 	bl	8005ac0 <prvAddNewTaskToReadyList>
 8005914:	e001      	b.n	800591a <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8005916:	2300      	movs	r3, #0
 8005918:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800591a:	697b      	ldr	r3, [r7, #20]
	}
 800591c:	4618      	mov	r0, r3
 800591e:	3728      	adds	r7, #40	@ 0x28
 8005920:	46bd      	mov	sp, r7
 8005922:	bd80      	pop	{r7, pc}

08005924 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005924:	b580      	push	{r7, lr}
 8005926:	b08c      	sub	sp, #48	@ 0x30
 8005928:	af04      	add	r7, sp, #16
 800592a:	60f8      	str	r0, [r7, #12]
 800592c:	60b9      	str	r1, [r7, #8]
 800592e:	603b      	str	r3, [r7, #0]
 8005930:	4613      	mov	r3, r2
 8005932:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005934:	88fb      	ldrh	r3, [r7, #6]
 8005936:	009b      	lsls	r3, r3, #2
 8005938:	4618      	mov	r0, r3
 800593a:	f000 ff85 	bl	8006848 <pvPortMalloc>
 800593e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005940:	697b      	ldr	r3, [r7, #20]
 8005942:	2b00      	cmp	r3, #0
 8005944:	d00e      	beq.n	8005964 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005946:	2054      	movs	r0, #84	@ 0x54
 8005948:	f000 ff7e 	bl	8006848 <pvPortMalloc>
 800594c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800594e:	69fb      	ldr	r3, [r7, #28]
 8005950:	2b00      	cmp	r3, #0
 8005952:	d003      	beq.n	800595c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005954:	69fb      	ldr	r3, [r7, #28]
 8005956:	697a      	ldr	r2, [r7, #20]
 8005958:	631a      	str	r2, [r3, #48]	@ 0x30
 800595a:	e005      	b.n	8005968 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800595c:	6978      	ldr	r0, [r7, #20]
 800595e:	f001 f841 	bl	80069e4 <vPortFree>
 8005962:	e001      	b.n	8005968 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005964:	2300      	movs	r3, #0
 8005966:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005968:	69fb      	ldr	r3, [r7, #28]
 800596a:	2b00      	cmp	r3, #0
 800596c:	d017      	beq.n	800599e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800596e:	69fb      	ldr	r3, [r7, #28]
 8005970:	2200      	movs	r2, #0
 8005972:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005976:	88fa      	ldrh	r2, [r7, #6]
 8005978:	2300      	movs	r3, #0
 800597a:	9303      	str	r3, [sp, #12]
 800597c:	69fb      	ldr	r3, [r7, #28]
 800597e:	9302      	str	r3, [sp, #8]
 8005980:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005982:	9301      	str	r3, [sp, #4]
 8005984:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005986:	9300      	str	r3, [sp, #0]
 8005988:	683b      	ldr	r3, [r7, #0]
 800598a:	68b9      	ldr	r1, [r7, #8]
 800598c:	68f8      	ldr	r0, [r7, #12]
 800598e:	f000 f80e 	bl	80059ae <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005992:	69f8      	ldr	r0, [r7, #28]
 8005994:	f000 f894 	bl	8005ac0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005998:	2301      	movs	r3, #1
 800599a:	61bb      	str	r3, [r7, #24]
 800599c:	e002      	b.n	80059a4 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800599e:	f04f 33ff 	mov.w	r3, #4294967295
 80059a2:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80059a4:	69bb      	ldr	r3, [r7, #24]
	}
 80059a6:	4618      	mov	r0, r3
 80059a8:	3720      	adds	r7, #32
 80059aa:	46bd      	mov	sp, r7
 80059ac:	bd80      	pop	{r7, pc}

080059ae <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80059ae:	b580      	push	{r7, lr}
 80059b0:	b088      	sub	sp, #32
 80059b2:	af00      	add	r7, sp, #0
 80059b4:	60f8      	str	r0, [r7, #12]
 80059b6:	60b9      	str	r1, [r7, #8]
 80059b8:	607a      	str	r2, [r7, #4]
 80059ba:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80059bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059be:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80059c0:	6879      	ldr	r1, [r7, #4]
 80059c2:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 80059c6:	440b      	add	r3, r1
 80059c8:	009b      	lsls	r3, r3, #2
 80059ca:	4413      	add	r3, r2
 80059cc:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80059ce:	69bb      	ldr	r3, [r7, #24]
 80059d0:	f023 0307 	bic.w	r3, r3, #7
 80059d4:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80059d6:	69bb      	ldr	r3, [r7, #24]
 80059d8:	f003 0307 	and.w	r3, r3, #7
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d00b      	beq.n	80059f8 <prvInitialiseNewTask+0x4a>
	__asm volatile
 80059e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80059e4:	f383 8811 	msr	BASEPRI, r3
 80059e8:	f3bf 8f6f 	isb	sy
 80059ec:	f3bf 8f4f 	dsb	sy
 80059f0:	617b      	str	r3, [r7, #20]
}
 80059f2:	bf00      	nop
 80059f4:	bf00      	nop
 80059f6:	e7fd      	b.n	80059f4 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80059f8:	68bb      	ldr	r3, [r7, #8]
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d01f      	beq.n	8005a3e <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80059fe:	2300      	movs	r3, #0
 8005a00:	61fb      	str	r3, [r7, #28]
 8005a02:	e012      	b.n	8005a2a <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005a04:	68ba      	ldr	r2, [r7, #8]
 8005a06:	69fb      	ldr	r3, [r7, #28]
 8005a08:	4413      	add	r3, r2
 8005a0a:	7819      	ldrb	r1, [r3, #0]
 8005a0c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005a0e:	69fb      	ldr	r3, [r7, #28]
 8005a10:	4413      	add	r3, r2
 8005a12:	3334      	adds	r3, #52	@ 0x34
 8005a14:	460a      	mov	r2, r1
 8005a16:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005a18:	68ba      	ldr	r2, [r7, #8]
 8005a1a:	69fb      	ldr	r3, [r7, #28]
 8005a1c:	4413      	add	r3, r2
 8005a1e:	781b      	ldrb	r3, [r3, #0]
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d006      	beq.n	8005a32 <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005a24:	69fb      	ldr	r3, [r7, #28]
 8005a26:	3301      	adds	r3, #1
 8005a28:	61fb      	str	r3, [r7, #28]
 8005a2a:	69fb      	ldr	r3, [r7, #28]
 8005a2c:	2b0f      	cmp	r3, #15
 8005a2e:	d9e9      	bls.n	8005a04 <prvInitialiseNewTask+0x56>
 8005a30:	e000      	b.n	8005a34 <prvInitialiseNewTask+0x86>
			{
				break;
 8005a32:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005a34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a36:	2200      	movs	r2, #0
 8005a38:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005a3c:	e003      	b.n	8005a46 <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8005a3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a40:	2200      	movs	r2, #0
 8005a42:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005a46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a48:	2b06      	cmp	r3, #6
 8005a4a:	d901      	bls.n	8005a50 <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005a4c:	2306      	movs	r3, #6
 8005a4e:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005a50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a52:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005a54:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005a56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a58:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005a5a:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8005a5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a5e:	2200      	movs	r2, #0
 8005a60:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005a62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a64:	3304      	adds	r3, #4
 8005a66:	4618      	mov	r0, r3
 8005a68:	f7ff fe68 	bl	800573c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005a6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a6e:	3318      	adds	r3, #24
 8005a70:	4618      	mov	r0, r3
 8005a72:	f7ff fe63 	bl	800573c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005a76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a78:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005a7a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005a7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a7e:	f1c3 0207 	rsb	r2, r3, #7
 8005a82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a84:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005a86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a88:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005a8a:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005a8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a8e:	2200      	movs	r2, #0
 8005a90:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005a92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a94:	2200      	movs	r2, #0
 8005a96:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005a9a:	683a      	ldr	r2, [r7, #0]
 8005a9c:	68f9      	ldr	r1, [r7, #12]
 8005a9e:	69b8      	ldr	r0, [r7, #24]
 8005aa0:	f000 fcc0 	bl	8006424 <pxPortInitialiseStack>
 8005aa4:	4602      	mov	r2, r0
 8005aa6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005aa8:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8005aaa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d002      	beq.n	8005ab6 <prvInitialiseNewTask+0x108>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005ab0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ab2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005ab4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005ab6:	bf00      	nop
 8005ab8:	3720      	adds	r7, #32
 8005aba:	46bd      	mov	sp, r7
 8005abc:	bd80      	pop	{r7, pc}
	...

08005ac0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005ac0:	b580      	push	{r7, lr}
 8005ac2:	b082      	sub	sp, #8
 8005ac4:	af00      	add	r7, sp, #0
 8005ac6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005ac8:	f000 fdde 	bl	8006688 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005acc:	4b2a      	ldr	r3, [pc, #168]	@ (8005b78 <prvAddNewTaskToReadyList+0xb8>)
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	3301      	adds	r3, #1
 8005ad2:	4a29      	ldr	r2, [pc, #164]	@ (8005b78 <prvAddNewTaskToReadyList+0xb8>)
 8005ad4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005ad6:	4b29      	ldr	r3, [pc, #164]	@ (8005b7c <prvAddNewTaskToReadyList+0xbc>)
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d109      	bne.n	8005af2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005ade:	4a27      	ldr	r2, [pc, #156]	@ (8005b7c <prvAddNewTaskToReadyList+0xbc>)
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005ae4:	4b24      	ldr	r3, [pc, #144]	@ (8005b78 <prvAddNewTaskToReadyList+0xb8>)
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	2b01      	cmp	r3, #1
 8005aea:	d110      	bne.n	8005b0e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005aec:	f000 fb58 	bl	80061a0 <prvInitialiseTaskLists>
 8005af0:	e00d      	b.n	8005b0e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005af2:	4b23      	ldr	r3, [pc, #140]	@ (8005b80 <prvAddNewTaskToReadyList+0xc0>)
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d109      	bne.n	8005b0e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005afa:	4b20      	ldr	r3, [pc, #128]	@ (8005b7c <prvAddNewTaskToReadyList+0xbc>)
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b04:	429a      	cmp	r2, r3
 8005b06:	d802      	bhi.n	8005b0e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005b08:	4a1c      	ldr	r2, [pc, #112]	@ (8005b7c <prvAddNewTaskToReadyList+0xbc>)
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005b0e:	4b1d      	ldr	r3, [pc, #116]	@ (8005b84 <prvAddNewTaskToReadyList+0xc4>)
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	3301      	adds	r3, #1
 8005b14:	4a1b      	ldr	r2, [pc, #108]	@ (8005b84 <prvAddNewTaskToReadyList+0xc4>)
 8005b16:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b1c:	2201      	movs	r2, #1
 8005b1e:	409a      	lsls	r2, r3
 8005b20:	4b19      	ldr	r3, [pc, #100]	@ (8005b88 <prvAddNewTaskToReadyList+0xc8>)
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	4313      	orrs	r3, r2
 8005b26:	4a18      	ldr	r2, [pc, #96]	@ (8005b88 <prvAddNewTaskToReadyList+0xc8>)
 8005b28:	6013      	str	r3, [r2, #0]
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005b2e:	4613      	mov	r3, r2
 8005b30:	009b      	lsls	r3, r3, #2
 8005b32:	4413      	add	r3, r2
 8005b34:	009b      	lsls	r3, r3, #2
 8005b36:	4a15      	ldr	r2, [pc, #84]	@ (8005b8c <prvAddNewTaskToReadyList+0xcc>)
 8005b38:	441a      	add	r2, r3
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	3304      	adds	r3, #4
 8005b3e:	4619      	mov	r1, r3
 8005b40:	4610      	mov	r0, r2
 8005b42:	f7ff fe08 	bl	8005756 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005b46:	f000 fdd1 	bl	80066ec <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005b4a:	4b0d      	ldr	r3, [pc, #52]	@ (8005b80 <prvAddNewTaskToReadyList+0xc0>)
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d00e      	beq.n	8005b70 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005b52:	4b0a      	ldr	r3, [pc, #40]	@ (8005b7c <prvAddNewTaskToReadyList+0xbc>)
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b5c:	429a      	cmp	r2, r3
 8005b5e:	d207      	bcs.n	8005b70 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005b60:	4b0b      	ldr	r3, [pc, #44]	@ (8005b90 <prvAddNewTaskToReadyList+0xd0>)
 8005b62:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005b66:	601a      	str	r2, [r3, #0]
 8005b68:	f3bf 8f4f 	dsb	sy
 8005b6c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005b70:	bf00      	nop
 8005b72:	3708      	adds	r7, #8
 8005b74:	46bd      	mov	sp, r7
 8005b76:	bd80      	pop	{r7, pc}
 8005b78:	2400047c 	.word	0x2400047c
 8005b7c:	2400037c 	.word	0x2400037c
 8005b80:	24000488 	.word	0x24000488
 8005b84:	24000498 	.word	0x24000498
 8005b88:	24000484 	.word	0x24000484
 8005b8c:	24000380 	.word	0x24000380
 8005b90:	e000ed04 	.word	0xe000ed04

08005b94 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005b94:	b580      	push	{r7, lr}
 8005b96:	b084      	sub	sp, #16
 8005b98:	af00      	add	r7, sp, #0
 8005b9a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005b9c:	2300      	movs	r3, #0
 8005b9e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d018      	beq.n	8005bd8 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005ba6:	4b14      	ldr	r3, [pc, #80]	@ (8005bf8 <vTaskDelay+0x64>)
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d00b      	beq.n	8005bc6 <vTaskDelay+0x32>
	__asm volatile
 8005bae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005bb2:	f383 8811 	msr	BASEPRI, r3
 8005bb6:	f3bf 8f6f 	isb	sy
 8005bba:	f3bf 8f4f 	dsb	sy
 8005bbe:	60bb      	str	r3, [r7, #8]
}
 8005bc0:	bf00      	nop
 8005bc2:	bf00      	nop
 8005bc4:	e7fd      	b.n	8005bc2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8005bc6:	f000 f911 	bl	8005dec <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005bca:	2100      	movs	r1, #0
 8005bcc:	6878      	ldr	r0, [r7, #4]
 8005bce:	f000 fbc3 	bl	8006358 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005bd2:	f000 f919 	bl	8005e08 <xTaskResumeAll>
 8005bd6:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d107      	bne.n	8005bee <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8005bde:	4b07      	ldr	r3, [pc, #28]	@ (8005bfc <vTaskDelay+0x68>)
 8005be0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005be4:	601a      	str	r2, [r3, #0]
 8005be6:	f3bf 8f4f 	dsb	sy
 8005bea:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005bee:	bf00      	nop
 8005bf0:	3710      	adds	r7, #16
 8005bf2:	46bd      	mov	sp, r7
 8005bf4:	bd80      	pop	{r7, pc}
 8005bf6:	bf00      	nop
 8005bf8:	240004a4 	.word	0x240004a4
 8005bfc:	e000ed04 	.word	0xe000ed04

08005c00 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 8005c00:	b580      	push	{r7, lr}
 8005c02:	b084      	sub	sp, #16
 8005c04:	af00      	add	r7, sp, #0
 8005c06:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8005c08:	f000 fd3e 	bl	8006688 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d102      	bne.n	8005c18 <vTaskSuspend+0x18>
 8005c12:	4b3d      	ldr	r3, [pc, #244]	@ (8005d08 <vTaskSuspend+0x108>)
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	e000      	b.n	8005c1a <vTaskSuspend+0x1a>
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	3304      	adds	r3, #4
 8005c20:	4618      	mov	r0, r3
 8005c22:	f7ff fdf5 	bl	8005810 <uxListRemove>
 8005c26:	4603      	mov	r3, r0
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d115      	bne.n	8005c58 <vTaskSuspend+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005c30:	4936      	ldr	r1, [pc, #216]	@ (8005d0c <vTaskSuspend+0x10c>)
 8005c32:	4613      	mov	r3, r2
 8005c34:	009b      	lsls	r3, r3, #2
 8005c36:	4413      	add	r3, r2
 8005c38:	009b      	lsls	r3, r3, #2
 8005c3a:	440b      	add	r3, r1
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d10a      	bne.n	8005c58 <vTaskSuspend+0x58>
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c46:	2201      	movs	r2, #1
 8005c48:	fa02 f303 	lsl.w	r3, r2, r3
 8005c4c:	43da      	mvns	r2, r3
 8005c4e:	4b30      	ldr	r3, [pc, #192]	@ (8005d10 <vTaskSuspend+0x110>)
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	4013      	ands	r3, r2
 8005c54:	4a2e      	ldr	r2, [pc, #184]	@ (8005d10 <vTaskSuspend+0x110>)
 8005c56:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d004      	beq.n	8005c6a <vTaskSuspend+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	3318      	adds	r3, #24
 8005c64:	4618      	mov	r0, r3
 8005c66:	f7ff fdd3 	bl	8005810 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	3304      	adds	r3, #4
 8005c6e:	4619      	mov	r1, r3
 8005c70:	4828      	ldr	r0, [pc, #160]	@ (8005d14 <vTaskSuspend+0x114>)
 8005c72:	f7ff fd70 	bl	8005756 <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8005c7c:	b2db      	uxtb	r3, r3
 8005c7e:	2b01      	cmp	r3, #1
 8005c80:	d103      	bne.n	8005c8a <vTaskSuspend+0x8a>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	2200      	movs	r2, #0
 8005c86:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 8005c8a:	f000 fd2f 	bl	80066ec <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 8005c8e:	4b22      	ldr	r3, [pc, #136]	@ (8005d18 <vTaskSuspend+0x118>)
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d005      	beq.n	8005ca2 <vTaskSuspend+0xa2>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 8005c96:	f000 fcf7 	bl	8006688 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 8005c9a:	f000 fb1f 	bl	80062dc <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 8005c9e:	f000 fd25 	bl	80066ec <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 8005ca2:	4b19      	ldr	r3, [pc, #100]	@ (8005d08 <vTaskSuspend+0x108>)
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	68fa      	ldr	r2, [r7, #12]
 8005ca8:	429a      	cmp	r2, r3
 8005caa:	d128      	bne.n	8005cfe <vTaskSuspend+0xfe>
		{
			if( xSchedulerRunning != pdFALSE )
 8005cac:	4b1a      	ldr	r3, [pc, #104]	@ (8005d18 <vTaskSuspend+0x118>)
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d018      	beq.n	8005ce6 <vTaskSuspend+0xe6>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 8005cb4:	4b19      	ldr	r3, [pc, #100]	@ (8005d1c <vTaskSuspend+0x11c>)
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d00b      	beq.n	8005cd4 <vTaskSuspend+0xd4>
	__asm volatile
 8005cbc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005cc0:	f383 8811 	msr	BASEPRI, r3
 8005cc4:	f3bf 8f6f 	isb	sy
 8005cc8:	f3bf 8f4f 	dsb	sy
 8005ccc:	60bb      	str	r3, [r7, #8]
}
 8005cce:	bf00      	nop
 8005cd0:	bf00      	nop
 8005cd2:	e7fd      	b.n	8005cd0 <vTaskSuspend+0xd0>
				portYIELD_WITHIN_API();
 8005cd4:	4b12      	ldr	r3, [pc, #72]	@ (8005d20 <vTaskSuspend+0x120>)
 8005cd6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005cda:	601a      	str	r2, [r3, #0]
 8005cdc:	f3bf 8f4f 	dsb	sy
 8005ce0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005ce4:	e00b      	b.n	8005cfe <vTaskSuspend+0xfe>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 8005ce6:	4b0b      	ldr	r3, [pc, #44]	@ (8005d14 <vTaskSuspend+0x114>)
 8005ce8:	681a      	ldr	r2, [r3, #0]
 8005cea:	4b0e      	ldr	r3, [pc, #56]	@ (8005d24 <vTaskSuspend+0x124>)
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	429a      	cmp	r2, r3
 8005cf0:	d103      	bne.n	8005cfa <vTaskSuspend+0xfa>
					pxCurrentTCB = NULL;
 8005cf2:	4b05      	ldr	r3, [pc, #20]	@ (8005d08 <vTaskSuspend+0x108>)
 8005cf4:	2200      	movs	r2, #0
 8005cf6:	601a      	str	r2, [r3, #0]
	}
 8005cf8:	e001      	b.n	8005cfe <vTaskSuspend+0xfe>
					vTaskSwitchContext();
 8005cfa:	f000 f9dd 	bl	80060b8 <vTaskSwitchContext>
	}
 8005cfe:	bf00      	nop
 8005d00:	3710      	adds	r7, #16
 8005d02:	46bd      	mov	sp, r7
 8005d04:	bd80      	pop	{r7, pc}
 8005d06:	bf00      	nop
 8005d08:	2400037c 	.word	0x2400037c
 8005d0c:	24000380 	.word	0x24000380
 8005d10:	24000484 	.word	0x24000484
 8005d14:	24000468 	.word	0x24000468
 8005d18:	24000488 	.word	0x24000488
 8005d1c:	240004a4 	.word	0x240004a4
 8005d20:	e000ed04 	.word	0xe000ed04
 8005d24:	2400047c 	.word	0x2400047c

08005d28 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005d28:	b580      	push	{r7, lr}
 8005d2a:	b08a      	sub	sp, #40	@ 0x28
 8005d2c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005d2e:	2300      	movs	r3, #0
 8005d30:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005d32:	2300      	movs	r3, #0
 8005d34:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005d36:	463a      	mov	r2, r7
 8005d38:	1d39      	adds	r1, r7, #4
 8005d3a:	f107 0308 	add.w	r3, r7, #8
 8005d3e:	4618      	mov	r0, r3
 8005d40:	f7fa face 	bl	80002e0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005d44:	6839      	ldr	r1, [r7, #0]
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	68ba      	ldr	r2, [r7, #8]
 8005d4a:	9202      	str	r2, [sp, #8]
 8005d4c:	9301      	str	r3, [sp, #4]
 8005d4e:	2300      	movs	r3, #0
 8005d50:	9300      	str	r3, [sp, #0]
 8005d52:	2300      	movs	r3, #0
 8005d54:	460a      	mov	r2, r1
 8005d56:	491f      	ldr	r1, [pc, #124]	@ (8005dd4 <vTaskStartScheduler+0xac>)
 8005d58:	481f      	ldr	r0, [pc, #124]	@ (8005dd8 <vTaskStartScheduler+0xb0>)
 8005d5a:	f7ff fd83 	bl	8005864 <xTaskCreateStatic>
 8005d5e:	4603      	mov	r3, r0
 8005d60:	4a1e      	ldr	r2, [pc, #120]	@ (8005ddc <vTaskStartScheduler+0xb4>)
 8005d62:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005d64:	4b1d      	ldr	r3, [pc, #116]	@ (8005ddc <vTaskStartScheduler+0xb4>)
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d002      	beq.n	8005d72 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005d6c:	2301      	movs	r3, #1
 8005d6e:	617b      	str	r3, [r7, #20]
 8005d70:	e001      	b.n	8005d76 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005d72:	2300      	movs	r3, #0
 8005d74:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005d76:	697b      	ldr	r3, [r7, #20]
 8005d78:	2b01      	cmp	r3, #1
 8005d7a:	d116      	bne.n	8005daa <vTaskStartScheduler+0x82>
	__asm volatile
 8005d7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d80:	f383 8811 	msr	BASEPRI, r3
 8005d84:	f3bf 8f6f 	isb	sy
 8005d88:	f3bf 8f4f 	dsb	sy
 8005d8c:	613b      	str	r3, [r7, #16]
}
 8005d8e:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005d90:	4b13      	ldr	r3, [pc, #76]	@ (8005de0 <vTaskStartScheduler+0xb8>)
 8005d92:	f04f 32ff 	mov.w	r2, #4294967295
 8005d96:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005d98:	4b12      	ldr	r3, [pc, #72]	@ (8005de4 <vTaskStartScheduler+0xbc>)
 8005d9a:	2201      	movs	r2, #1
 8005d9c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005d9e:	4b12      	ldr	r3, [pc, #72]	@ (8005de8 <vTaskStartScheduler+0xc0>)
 8005da0:	2200      	movs	r2, #0
 8005da2:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005da4:	f000 fbcc 	bl	8006540 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005da8:	e00f      	b.n	8005dca <vTaskStartScheduler+0xa2>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005daa:	697b      	ldr	r3, [r7, #20]
 8005dac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005db0:	d10b      	bne.n	8005dca <vTaskStartScheduler+0xa2>
	__asm volatile
 8005db2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005db6:	f383 8811 	msr	BASEPRI, r3
 8005dba:	f3bf 8f6f 	isb	sy
 8005dbe:	f3bf 8f4f 	dsb	sy
 8005dc2:	60fb      	str	r3, [r7, #12]
}
 8005dc4:	bf00      	nop
 8005dc6:	bf00      	nop
 8005dc8:	e7fd      	b.n	8005dc6 <vTaskStartScheduler+0x9e>
}
 8005dca:	bf00      	nop
 8005dcc:	3718      	adds	r7, #24
 8005dce:	46bd      	mov	sp, r7
 8005dd0:	bd80      	pop	{r7, pc}
 8005dd2:	bf00      	nop
 8005dd4:	08006d40 	.word	0x08006d40
 8005dd8:	08006171 	.word	0x08006171
 8005ddc:	240004a0 	.word	0x240004a0
 8005de0:	2400049c 	.word	0x2400049c
 8005de4:	24000488 	.word	0x24000488
 8005de8:	24000480 	.word	0x24000480

08005dec <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005dec:	b480      	push	{r7}
 8005dee:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8005df0:	4b04      	ldr	r3, [pc, #16]	@ (8005e04 <vTaskSuspendAll+0x18>)
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	3301      	adds	r3, #1
 8005df6:	4a03      	ldr	r2, [pc, #12]	@ (8005e04 <vTaskSuspendAll+0x18>)
 8005df8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8005dfa:	bf00      	nop
 8005dfc:	46bd      	mov	sp, r7
 8005dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e02:	4770      	bx	lr
 8005e04:	240004a4 	.word	0x240004a4

08005e08 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005e08:	b580      	push	{r7, lr}
 8005e0a:	b084      	sub	sp, #16
 8005e0c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005e0e:	2300      	movs	r3, #0
 8005e10:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005e12:	2300      	movs	r3, #0
 8005e14:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005e16:	4b42      	ldr	r3, [pc, #264]	@ (8005f20 <xTaskResumeAll+0x118>)
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d10b      	bne.n	8005e36 <xTaskResumeAll+0x2e>
	__asm volatile
 8005e1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e22:	f383 8811 	msr	BASEPRI, r3
 8005e26:	f3bf 8f6f 	isb	sy
 8005e2a:	f3bf 8f4f 	dsb	sy
 8005e2e:	603b      	str	r3, [r7, #0]
}
 8005e30:	bf00      	nop
 8005e32:	bf00      	nop
 8005e34:	e7fd      	b.n	8005e32 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005e36:	f000 fc27 	bl	8006688 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005e3a:	4b39      	ldr	r3, [pc, #228]	@ (8005f20 <xTaskResumeAll+0x118>)
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	3b01      	subs	r3, #1
 8005e40:	4a37      	ldr	r2, [pc, #220]	@ (8005f20 <xTaskResumeAll+0x118>)
 8005e42:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005e44:	4b36      	ldr	r3, [pc, #216]	@ (8005f20 <xTaskResumeAll+0x118>)
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d161      	bne.n	8005f10 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005e4c:	4b35      	ldr	r3, [pc, #212]	@ (8005f24 <xTaskResumeAll+0x11c>)
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d05d      	beq.n	8005f10 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005e54:	e02e      	b.n	8005eb4 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005e56:	4b34      	ldr	r3, [pc, #208]	@ (8005f28 <xTaskResumeAll+0x120>)
 8005e58:	68db      	ldr	r3, [r3, #12]
 8005e5a:	68db      	ldr	r3, [r3, #12]
 8005e5c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	3318      	adds	r3, #24
 8005e62:	4618      	mov	r0, r3
 8005e64:	f7ff fcd4 	bl	8005810 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	3304      	adds	r3, #4
 8005e6c:	4618      	mov	r0, r3
 8005e6e:	f7ff fccf 	bl	8005810 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e76:	2201      	movs	r2, #1
 8005e78:	409a      	lsls	r2, r3
 8005e7a:	4b2c      	ldr	r3, [pc, #176]	@ (8005f2c <xTaskResumeAll+0x124>)
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	4313      	orrs	r3, r2
 8005e80:	4a2a      	ldr	r2, [pc, #168]	@ (8005f2c <xTaskResumeAll+0x124>)
 8005e82:	6013      	str	r3, [r2, #0]
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005e88:	4613      	mov	r3, r2
 8005e8a:	009b      	lsls	r3, r3, #2
 8005e8c:	4413      	add	r3, r2
 8005e8e:	009b      	lsls	r3, r3, #2
 8005e90:	4a27      	ldr	r2, [pc, #156]	@ (8005f30 <xTaskResumeAll+0x128>)
 8005e92:	441a      	add	r2, r3
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	3304      	adds	r3, #4
 8005e98:	4619      	mov	r1, r3
 8005e9a:	4610      	mov	r0, r2
 8005e9c:	f7ff fc5b 	bl	8005756 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005ea4:	4b23      	ldr	r3, [pc, #140]	@ (8005f34 <xTaskResumeAll+0x12c>)
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005eaa:	429a      	cmp	r2, r3
 8005eac:	d302      	bcc.n	8005eb4 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8005eae:	4b22      	ldr	r3, [pc, #136]	@ (8005f38 <xTaskResumeAll+0x130>)
 8005eb0:	2201      	movs	r2, #1
 8005eb2:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005eb4:	4b1c      	ldr	r3, [pc, #112]	@ (8005f28 <xTaskResumeAll+0x120>)
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d1cc      	bne.n	8005e56 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d001      	beq.n	8005ec6 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005ec2:	f000 fa0b 	bl	80062dc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8005ec6:	4b1d      	ldr	r3, [pc, #116]	@ (8005f3c <xTaskResumeAll+0x134>)
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d010      	beq.n	8005ef4 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005ed2:	f000 f837 	bl	8005f44 <xTaskIncrementTick>
 8005ed6:	4603      	mov	r3, r0
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d002      	beq.n	8005ee2 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8005edc:	4b16      	ldr	r3, [pc, #88]	@ (8005f38 <xTaskResumeAll+0x130>)
 8005ede:	2201      	movs	r2, #1
 8005ee0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	3b01      	subs	r3, #1
 8005ee6:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d1f1      	bne.n	8005ed2 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8005eee:	4b13      	ldr	r3, [pc, #76]	@ (8005f3c <xTaskResumeAll+0x134>)
 8005ef0:	2200      	movs	r2, #0
 8005ef2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005ef4:	4b10      	ldr	r3, [pc, #64]	@ (8005f38 <xTaskResumeAll+0x130>)
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d009      	beq.n	8005f10 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005efc:	2301      	movs	r3, #1
 8005efe:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005f00:	4b0f      	ldr	r3, [pc, #60]	@ (8005f40 <xTaskResumeAll+0x138>)
 8005f02:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005f06:	601a      	str	r2, [r3, #0]
 8005f08:	f3bf 8f4f 	dsb	sy
 8005f0c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005f10:	f000 fbec 	bl	80066ec <vPortExitCritical>

	return xAlreadyYielded;
 8005f14:	68bb      	ldr	r3, [r7, #8]
}
 8005f16:	4618      	mov	r0, r3
 8005f18:	3710      	adds	r7, #16
 8005f1a:	46bd      	mov	sp, r7
 8005f1c:	bd80      	pop	{r7, pc}
 8005f1e:	bf00      	nop
 8005f20:	240004a4 	.word	0x240004a4
 8005f24:	2400047c 	.word	0x2400047c
 8005f28:	2400043c 	.word	0x2400043c
 8005f2c:	24000484 	.word	0x24000484
 8005f30:	24000380 	.word	0x24000380
 8005f34:	2400037c 	.word	0x2400037c
 8005f38:	24000490 	.word	0x24000490
 8005f3c:	2400048c 	.word	0x2400048c
 8005f40:	e000ed04 	.word	0xe000ed04

08005f44 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005f44:	b580      	push	{r7, lr}
 8005f46:	b086      	sub	sp, #24
 8005f48:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005f4a:	2300      	movs	r3, #0
 8005f4c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005f4e:	4b4f      	ldr	r3, [pc, #316]	@ (800608c <xTaskIncrementTick+0x148>)
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	f040 808f 	bne.w	8006076 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005f58:	4b4d      	ldr	r3, [pc, #308]	@ (8006090 <xTaskIncrementTick+0x14c>)
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	3301      	adds	r3, #1
 8005f5e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005f60:	4a4b      	ldr	r2, [pc, #300]	@ (8006090 <xTaskIncrementTick+0x14c>)
 8005f62:	693b      	ldr	r3, [r7, #16]
 8005f64:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005f66:	693b      	ldr	r3, [r7, #16]
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d121      	bne.n	8005fb0 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8005f6c:	4b49      	ldr	r3, [pc, #292]	@ (8006094 <xTaskIncrementTick+0x150>)
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d00b      	beq.n	8005f8e <xTaskIncrementTick+0x4a>
	__asm volatile
 8005f76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f7a:	f383 8811 	msr	BASEPRI, r3
 8005f7e:	f3bf 8f6f 	isb	sy
 8005f82:	f3bf 8f4f 	dsb	sy
 8005f86:	603b      	str	r3, [r7, #0]
}
 8005f88:	bf00      	nop
 8005f8a:	bf00      	nop
 8005f8c:	e7fd      	b.n	8005f8a <xTaskIncrementTick+0x46>
 8005f8e:	4b41      	ldr	r3, [pc, #260]	@ (8006094 <xTaskIncrementTick+0x150>)
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	60fb      	str	r3, [r7, #12]
 8005f94:	4b40      	ldr	r3, [pc, #256]	@ (8006098 <xTaskIncrementTick+0x154>)
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	4a3e      	ldr	r2, [pc, #248]	@ (8006094 <xTaskIncrementTick+0x150>)
 8005f9a:	6013      	str	r3, [r2, #0]
 8005f9c:	4a3e      	ldr	r2, [pc, #248]	@ (8006098 <xTaskIncrementTick+0x154>)
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	6013      	str	r3, [r2, #0]
 8005fa2:	4b3e      	ldr	r3, [pc, #248]	@ (800609c <xTaskIncrementTick+0x158>)
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	3301      	adds	r3, #1
 8005fa8:	4a3c      	ldr	r2, [pc, #240]	@ (800609c <xTaskIncrementTick+0x158>)
 8005faa:	6013      	str	r3, [r2, #0]
 8005fac:	f000 f996 	bl	80062dc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005fb0:	4b3b      	ldr	r3, [pc, #236]	@ (80060a0 <xTaskIncrementTick+0x15c>)
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	693a      	ldr	r2, [r7, #16]
 8005fb6:	429a      	cmp	r2, r3
 8005fb8:	d348      	bcc.n	800604c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005fba:	4b36      	ldr	r3, [pc, #216]	@ (8006094 <xTaskIncrementTick+0x150>)
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d104      	bne.n	8005fce <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005fc4:	4b36      	ldr	r3, [pc, #216]	@ (80060a0 <xTaskIncrementTick+0x15c>)
 8005fc6:	f04f 32ff 	mov.w	r2, #4294967295
 8005fca:	601a      	str	r2, [r3, #0]
					break;
 8005fcc:	e03e      	b.n	800604c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005fce:	4b31      	ldr	r3, [pc, #196]	@ (8006094 <xTaskIncrementTick+0x150>)
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	68db      	ldr	r3, [r3, #12]
 8005fd4:	68db      	ldr	r3, [r3, #12]
 8005fd6:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005fd8:	68bb      	ldr	r3, [r7, #8]
 8005fda:	685b      	ldr	r3, [r3, #4]
 8005fdc:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005fde:	693a      	ldr	r2, [r7, #16]
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	429a      	cmp	r2, r3
 8005fe4:	d203      	bcs.n	8005fee <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005fe6:	4a2e      	ldr	r2, [pc, #184]	@ (80060a0 <xTaskIncrementTick+0x15c>)
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005fec:	e02e      	b.n	800604c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005fee:	68bb      	ldr	r3, [r7, #8]
 8005ff0:	3304      	adds	r3, #4
 8005ff2:	4618      	mov	r0, r3
 8005ff4:	f7ff fc0c 	bl	8005810 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005ff8:	68bb      	ldr	r3, [r7, #8]
 8005ffa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d004      	beq.n	800600a <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006000:	68bb      	ldr	r3, [r7, #8]
 8006002:	3318      	adds	r3, #24
 8006004:	4618      	mov	r0, r3
 8006006:	f7ff fc03 	bl	8005810 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800600a:	68bb      	ldr	r3, [r7, #8]
 800600c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800600e:	2201      	movs	r2, #1
 8006010:	409a      	lsls	r2, r3
 8006012:	4b24      	ldr	r3, [pc, #144]	@ (80060a4 <xTaskIncrementTick+0x160>)
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	4313      	orrs	r3, r2
 8006018:	4a22      	ldr	r2, [pc, #136]	@ (80060a4 <xTaskIncrementTick+0x160>)
 800601a:	6013      	str	r3, [r2, #0]
 800601c:	68bb      	ldr	r3, [r7, #8]
 800601e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006020:	4613      	mov	r3, r2
 8006022:	009b      	lsls	r3, r3, #2
 8006024:	4413      	add	r3, r2
 8006026:	009b      	lsls	r3, r3, #2
 8006028:	4a1f      	ldr	r2, [pc, #124]	@ (80060a8 <xTaskIncrementTick+0x164>)
 800602a:	441a      	add	r2, r3
 800602c:	68bb      	ldr	r3, [r7, #8]
 800602e:	3304      	adds	r3, #4
 8006030:	4619      	mov	r1, r3
 8006032:	4610      	mov	r0, r2
 8006034:	f7ff fb8f 	bl	8005756 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006038:	68bb      	ldr	r3, [r7, #8]
 800603a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800603c:	4b1b      	ldr	r3, [pc, #108]	@ (80060ac <xTaskIncrementTick+0x168>)
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006042:	429a      	cmp	r2, r3
 8006044:	d3b9      	bcc.n	8005fba <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8006046:	2301      	movs	r3, #1
 8006048:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800604a:	e7b6      	b.n	8005fba <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800604c:	4b17      	ldr	r3, [pc, #92]	@ (80060ac <xTaskIncrementTick+0x168>)
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006052:	4915      	ldr	r1, [pc, #84]	@ (80060a8 <xTaskIncrementTick+0x164>)
 8006054:	4613      	mov	r3, r2
 8006056:	009b      	lsls	r3, r3, #2
 8006058:	4413      	add	r3, r2
 800605a:	009b      	lsls	r3, r3, #2
 800605c:	440b      	add	r3, r1
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	2b01      	cmp	r3, #1
 8006062:	d901      	bls.n	8006068 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8006064:	2301      	movs	r3, #1
 8006066:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8006068:	4b11      	ldr	r3, [pc, #68]	@ (80060b0 <xTaskIncrementTick+0x16c>)
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	2b00      	cmp	r3, #0
 800606e:	d007      	beq.n	8006080 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8006070:	2301      	movs	r3, #1
 8006072:	617b      	str	r3, [r7, #20]
 8006074:	e004      	b.n	8006080 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8006076:	4b0f      	ldr	r3, [pc, #60]	@ (80060b4 <xTaskIncrementTick+0x170>)
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	3301      	adds	r3, #1
 800607c:	4a0d      	ldr	r2, [pc, #52]	@ (80060b4 <xTaskIncrementTick+0x170>)
 800607e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8006080:	697b      	ldr	r3, [r7, #20]
}
 8006082:	4618      	mov	r0, r3
 8006084:	3718      	adds	r7, #24
 8006086:	46bd      	mov	sp, r7
 8006088:	bd80      	pop	{r7, pc}
 800608a:	bf00      	nop
 800608c:	240004a4 	.word	0x240004a4
 8006090:	24000480 	.word	0x24000480
 8006094:	24000434 	.word	0x24000434
 8006098:	24000438 	.word	0x24000438
 800609c:	24000494 	.word	0x24000494
 80060a0:	2400049c 	.word	0x2400049c
 80060a4:	24000484 	.word	0x24000484
 80060a8:	24000380 	.word	0x24000380
 80060ac:	2400037c 	.word	0x2400037c
 80060b0:	24000490 	.word	0x24000490
 80060b4:	2400048c 	.word	0x2400048c

080060b8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80060b8:	b480      	push	{r7}
 80060ba:	b087      	sub	sp, #28
 80060bc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80060be:	4b27      	ldr	r3, [pc, #156]	@ (800615c <vTaskSwitchContext+0xa4>)
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d003      	beq.n	80060ce <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80060c6:	4b26      	ldr	r3, [pc, #152]	@ (8006160 <vTaskSwitchContext+0xa8>)
 80060c8:	2201      	movs	r2, #1
 80060ca:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80060cc:	e040      	b.n	8006150 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 80060ce:	4b24      	ldr	r3, [pc, #144]	@ (8006160 <vTaskSwitchContext+0xa8>)
 80060d0:	2200      	movs	r2, #0
 80060d2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80060d4:	4b23      	ldr	r3, [pc, #140]	@ (8006164 <vTaskSwitchContext+0xac>)
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	fab3 f383 	clz	r3, r3
 80060e0:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80060e2:	7afb      	ldrb	r3, [r7, #11]
 80060e4:	f1c3 031f 	rsb	r3, r3, #31
 80060e8:	617b      	str	r3, [r7, #20]
 80060ea:	491f      	ldr	r1, [pc, #124]	@ (8006168 <vTaskSwitchContext+0xb0>)
 80060ec:	697a      	ldr	r2, [r7, #20]
 80060ee:	4613      	mov	r3, r2
 80060f0:	009b      	lsls	r3, r3, #2
 80060f2:	4413      	add	r3, r2
 80060f4:	009b      	lsls	r3, r3, #2
 80060f6:	440b      	add	r3, r1
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d10b      	bne.n	8006116 <vTaskSwitchContext+0x5e>
	__asm volatile
 80060fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006102:	f383 8811 	msr	BASEPRI, r3
 8006106:	f3bf 8f6f 	isb	sy
 800610a:	f3bf 8f4f 	dsb	sy
 800610e:	607b      	str	r3, [r7, #4]
}
 8006110:	bf00      	nop
 8006112:	bf00      	nop
 8006114:	e7fd      	b.n	8006112 <vTaskSwitchContext+0x5a>
 8006116:	697a      	ldr	r2, [r7, #20]
 8006118:	4613      	mov	r3, r2
 800611a:	009b      	lsls	r3, r3, #2
 800611c:	4413      	add	r3, r2
 800611e:	009b      	lsls	r3, r3, #2
 8006120:	4a11      	ldr	r2, [pc, #68]	@ (8006168 <vTaskSwitchContext+0xb0>)
 8006122:	4413      	add	r3, r2
 8006124:	613b      	str	r3, [r7, #16]
 8006126:	693b      	ldr	r3, [r7, #16]
 8006128:	685b      	ldr	r3, [r3, #4]
 800612a:	685a      	ldr	r2, [r3, #4]
 800612c:	693b      	ldr	r3, [r7, #16]
 800612e:	605a      	str	r2, [r3, #4]
 8006130:	693b      	ldr	r3, [r7, #16]
 8006132:	685a      	ldr	r2, [r3, #4]
 8006134:	693b      	ldr	r3, [r7, #16]
 8006136:	3308      	adds	r3, #8
 8006138:	429a      	cmp	r2, r3
 800613a:	d104      	bne.n	8006146 <vTaskSwitchContext+0x8e>
 800613c:	693b      	ldr	r3, [r7, #16]
 800613e:	685b      	ldr	r3, [r3, #4]
 8006140:	685a      	ldr	r2, [r3, #4]
 8006142:	693b      	ldr	r3, [r7, #16]
 8006144:	605a      	str	r2, [r3, #4]
 8006146:	693b      	ldr	r3, [r7, #16]
 8006148:	685b      	ldr	r3, [r3, #4]
 800614a:	68db      	ldr	r3, [r3, #12]
 800614c:	4a07      	ldr	r2, [pc, #28]	@ (800616c <vTaskSwitchContext+0xb4>)
 800614e:	6013      	str	r3, [r2, #0]
}
 8006150:	bf00      	nop
 8006152:	371c      	adds	r7, #28
 8006154:	46bd      	mov	sp, r7
 8006156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800615a:	4770      	bx	lr
 800615c:	240004a4 	.word	0x240004a4
 8006160:	24000490 	.word	0x24000490
 8006164:	24000484 	.word	0x24000484
 8006168:	24000380 	.word	0x24000380
 800616c:	2400037c 	.word	0x2400037c

08006170 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006170:	b580      	push	{r7, lr}
 8006172:	b082      	sub	sp, #8
 8006174:	af00      	add	r7, sp, #0
 8006176:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006178:	f000 f852 	bl	8006220 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800617c:	4b06      	ldr	r3, [pc, #24]	@ (8006198 <prvIdleTask+0x28>)
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	2b01      	cmp	r3, #1
 8006182:	d9f9      	bls.n	8006178 <prvIdleTask+0x8>
			{
				taskYIELD();
 8006184:	4b05      	ldr	r3, [pc, #20]	@ (800619c <prvIdleTask+0x2c>)
 8006186:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800618a:	601a      	str	r2, [r3, #0]
 800618c:	f3bf 8f4f 	dsb	sy
 8006190:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006194:	e7f0      	b.n	8006178 <prvIdleTask+0x8>
 8006196:	bf00      	nop
 8006198:	24000380 	.word	0x24000380
 800619c:	e000ed04 	.word	0xe000ed04

080061a0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80061a0:	b580      	push	{r7, lr}
 80061a2:	b082      	sub	sp, #8
 80061a4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80061a6:	2300      	movs	r3, #0
 80061a8:	607b      	str	r3, [r7, #4]
 80061aa:	e00c      	b.n	80061c6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80061ac:	687a      	ldr	r2, [r7, #4]
 80061ae:	4613      	mov	r3, r2
 80061b0:	009b      	lsls	r3, r3, #2
 80061b2:	4413      	add	r3, r2
 80061b4:	009b      	lsls	r3, r3, #2
 80061b6:	4a12      	ldr	r2, [pc, #72]	@ (8006200 <prvInitialiseTaskLists+0x60>)
 80061b8:	4413      	add	r3, r2
 80061ba:	4618      	mov	r0, r3
 80061bc:	f7ff fa9e 	bl	80056fc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	3301      	adds	r3, #1
 80061c4:	607b      	str	r3, [r7, #4]
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	2b06      	cmp	r3, #6
 80061ca:	d9ef      	bls.n	80061ac <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80061cc:	480d      	ldr	r0, [pc, #52]	@ (8006204 <prvInitialiseTaskLists+0x64>)
 80061ce:	f7ff fa95 	bl	80056fc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80061d2:	480d      	ldr	r0, [pc, #52]	@ (8006208 <prvInitialiseTaskLists+0x68>)
 80061d4:	f7ff fa92 	bl	80056fc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80061d8:	480c      	ldr	r0, [pc, #48]	@ (800620c <prvInitialiseTaskLists+0x6c>)
 80061da:	f7ff fa8f 	bl	80056fc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80061de:	480c      	ldr	r0, [pc, #48]	@ (8006210 <prvInitialiseTaskLists+0x70>)
 80061e0:	f7ff fa8c 	bl	80056fc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80061e4:	480b      	ldr	r0, [pc, #44]	@ (8006214 <prvInitialiseTaskLists+0x74>)
 80061e6:	f7ff fa89 	bl	80056fc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80061ea:	4b0b      	ldr	r3, [pc, #44]	@ (8006218 <prvInitialiseTaskLists+0x78>)
 80061ec:	4a05      	ldr	r2, [pc, #20]	@ (8006204 <prvInitialiseTaskLists+0x64>)
 80061ee:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80061f0:	4b0a      	ldr	r3, [pc, #40]	@ (800621c <prvInitialiseTaskLists+0x7c>)
 80061f2:	4a05      	ldr	r2, [pc, #20]	@ (8006208 <prvInitialiseTaskLists+0x68>)
 80061f4:	601a      	str	r2, [r3, #0]
}
 80061f6:	bf00      	nop
 80061f8:	3708      	adds	r7, #8
 80061fa:	46bd      	mov	sp, r7
 80061fc:	bd80      	pop	{r7, pc}
 80061fe:	bf00      	nop
 8006200:	24000380 	.word	0x24000380
 8006204:	2400040c 	.word	0x2400040c
 8006208:	24000420 	.word	0x24000420
 800620c:	2400043c 	.word	0x2400043c
 8006210:	24000450 	.word	0x24000450
 8006214:	24000468 	.word	0x24000468
 8006218:	24000434 	.word	0x24000434
 800621c:	24000438 	.word	0x24000438

08006220 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006220:	b580      	push	{r7, lr}
 8006222:	b082      	sub	sp, #8
 8006224:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006226:	e019      	b.n	800625c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006228:	f000 fa2e 	bl	8006688 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800622c:	4b10      	ldr	r3, [pc, #64]	@ (8006270 <prvCheckTasksWaitingTermination+0x50>)
 800622e:	68db      	ldr	r3, [r3, #12]
 8006230:	68db      	ldr	r3, [r3, #12]
 8006232:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	3304      	adds	r3, #4
 8006238:	4618      	mov	r0, r3
 800623a:	f7ff fae9 	bl	8005810 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800623e:	4b0d      	ldr	r3, [pc, #52]	@ (8006274 <prvCheckTasksWaitingTermination+0x54>)
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	3b01      	subs	r3, #1
 8006244:	4a0b      	ldr	r2, [pc, #44]	@ (8006274 <prvCheckTasksWaitingTermination+0x54>)
 8006246:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006248:	4b0b      	ldr	r3, [pc, #44]	@ (8006278 <prvCheckTasksWaitingTermination+0x58>)
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	3b01      	subs	r3, #1
 800624e:	4a0a      	ldr	r2, [pc, #40]	@ (8006278 <prvCheckTasksWaitingTermination+0x58>)
 8006250:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006252:	f000 fa4b 	bl	80066ec <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006256:	6878      	ldr	r0, [r7, #4]
 8006258:	f000 f810 	bl	800627c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800625c:	4b06      	ldr	r3, [pc, #24]	@ (8006278 <prvCheckTasksWaitingTermination+0x58>)
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	2b00      	cmp	r3, #0
 8006262:	d1e1      	bne.n	8006228 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006264:	bf00      	nop
 8006266:	bf00      	nop
 8006268:	3708      	adds	r7, #8
 800626a:	46bd      	mov	sp, r7
 800626c:	bd80      	pop	{r7, pc}
 800626e:	bf00      	nop
 8006270:	24000450 	.word	0x24000450
 8006274:	2400047c 	.word	0x2400047c
 8006278:	24000464 	.word	0x24000464

0800627c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800627c:	b580      	push	{r7, lr}
 800627e:	b084      	sub	sp, #16
 8006280:	af00      	add	r7, sp, #0
 8006282:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800628a:	2b00      	cmp	r3, #0
 800628c:	d108      	bne.n	80062a0 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006292:	4618      	mov	r0, r3
 8006294:	f000 fba6 	bl	80069e4 <vPortFree>
				vPortFree( pxTCB );
 8006298:	6878      	ldr	r0, [r7, #4]
 800629a:	f000 fba3 	bl	80069e4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800629e:	e019      	b.n	80062d4 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80062a6:	2b01      	cmp	r3, #1
 80062a8:	d103      	bne.n	80062b2 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80062aa:	6878      	ldr	r0, [r7, #4]
 80062ac:	f000 fb9a 	bl	80069e4 <vPortFree>
	}
 80062b0:	e010      	b.n	80062d4 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80062b8:	2b02      	cmp	r3, #2
 80062ba:	d00b      	beq.n	80062d4 <prvDeleteTCB+0x58>
	__asm volatile
 80062bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80062c0:	f383 8811 	msr	BASEPRI, r3
 80062c4:	f3bf 8f6f 	isb	sy
 80062c8:	f3bf 8f4f 	dsb	sy
 80062cc:	60fb      	str	r3, [r7, #12]
}
 80062ce:	bf00      	nop
 80062d0:	bf00      	nop
 80062d2:	e7fd      	b.n	80062d0 <prvDeleteTCB+0x54>
	}
 80062d4:	bf00      	nop
 80062d6:	3710      	adds	r7, #16
 80062d8:	46bd      	mov	sp, r7
 80062da:	bd80      	pop	{r7, pc}

080062dc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80062dc:	b480      	push	{r7}
 80062de:	b083      	sub	sp, #12
 80062e0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80062e2:	4b0c      	ldr	r3, [pc, #48]	@ (8006314 <prvResetNextTaskUnblockTime+0x38>)
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d104      	bne.n	80062f6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80062ec:	4b0a      	ldr	r3, [pc, #40]	@ (8006318 <prvResetNextTaskUnblockTime+0x3c>)
 80062ee:	f04f 32ff 	mov.w	r2, #4294967295
 80062f2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80062f4:	e008      	b.n	8006308 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80062f6:	4b07      	ldr	r3, [pc, #28]	@ (8006314 <prvResetNextTaskUnblockTime+0x38>)
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	68db      	ldr	r3, [r3, #12]
 80062fc:	68db      	ldr	r3, [r3, #12]
 80062fe:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	685b      	ldr	r3, [r3, #4]
 8006304:	4a04      	ldr	r2, [pc, #16]	@ (8006318 <prvResetNextTaskUnblockTime+0x3c>)
 8006306:	6013      	str	r3, [r2, #0]
}
 8006308:	bf00      	nop
 800630a:	370c      	adds	r7, #12
 800630c:	46bd      	mov	sp, r7
 800630e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006312:	4770      	bx	lr
 8006314:	24000434 	.word	0x24000434
 8006318:	2400049c 	.word	0x2400049c

0800631c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800631c:	b480      	push	{r7}
 800631e:	b083      	sub	sp, #12
 8006320:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006322:	4b0b      	ldr	r3, [pc, #44]	@ (8006350 <xTaskGetSchedulerState+0x34>)
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	2b00      	cmp	r3, #0
 8006328:	d102      	bne.n	8006330 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800632a:	2301      	movs	r3, #1
 800632c:	607b      	str	r3, [r7, #4]
 800632e:	e008      	b.n	8006342 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006330:	4b08      	ldr	r3, [pc, #32]	@ (8006354 <xTaskGetSchedulerState+0x38>)
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	2b00      	cmp	r3, #0
 8006336:	d102      	bne.n	800633e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006338:	2302      	movs	r3, #2
 800633a:	607b      	str	r3, [r7, #4]
 800633c:	e001      	b.n	8006342 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800633e:	2300      	movs	r3, #0
 8006340:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006342:	687b      	ldr	r3, [r7, #4]
	}
 8006344:	4618      	mov	r0, r3
 8006346:	370c      	adds	r7, #12
 8006348:	46bd      	mov	sp, r7
 800634a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800634e:	4770      	bx	lr
 8006350:	24000488 	.word	0x24000488
 8006354:	240004a4 	.word	0x240004a4

08006358 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006358:	b580      	push	{r7, lr}
 800635a:	b084      	sub	sp, #16
 800635c:	af00      	add	r7, sp, #0
 800635e:	6078      	str	r0, [r7, #4]
 8006360:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006362:	4b29      	ldr	r3, [pc, #164]	@ (8006408 <prvAddCurrentTaskToDelayedList+0xb0>)
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006368:	4b28      	ldr	r3, [pc, #160]	@ (800640c <prvAddCurrentTaskToDelayedList+0xb4>)
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	3304      	adds	r3, #4
 800636e:	4618      	mov	r0, r3
 8006370:	f7ff fa4e 	bl	8005810 <uxListRemove>
 8006374:	4603      	mov	r3, r0
 8006376:	2b00      	cmp	r3, #0
 8006378:	d10b      	bne.n	8006392 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800637a:	4b24      	ldr	r3, [pc, #144]	@ (800640c <prvAddCurrentTaskToDelayedList+0xb4>)
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006380:	2201      	movs	r2, #1
 8006382:	fa02 f303 	lsl.w	r3, r2, r3
 8006386:	43da      	mvns	r2, r3
 8006388:	4b21      	ldr	r3, [pc, #132]	@ (8006410 <prvAddCurrentTaskToDelayedList+0xb8>)
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	4013      	ands	r3, r2
 800638e:	4a20      	ldr	r2, [pc, #128]	@ (8006410 <prvAddCurrentTaskToDelayedList+0xb8>)
 8006390:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006398:	d10a      	bne.n	80063b0 <prvAddCurrentTaskToDelayedList+0x58>
 800639a:	683b      	ldr	r3, [r7, #0]
 800639c:	2b00      	cmp	r3, #0
 800639e:	d007      	beq.n	80063b0 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80063a0:	4b1a      	ldr	r3, [pc, #104]	@ (800640c <prvAddCurrentTaskToDelayedList+0xb4>)
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	3304      	adds	r3, #4
 80063a6:	4619      	mov	r1, r3
 80063a8:	481a      	ldr	r0, [pc, #104]	@ (8006414 <prvAddCurrentTaskToDelayedList+0xbc>)
 80063aa:	f7ff f9d4 	bl	8005756 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80063ae:	e026      	b.n	80063fe <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80063b0:	68fa      	ldr	r2, [r7, #12]
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	4413      	add	r3, r2
 80063b6:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80063b8:	4b14      	ldr	r3, [pc, #80]	@ (800640c <prvAddCurrentTaskToDelayedList+0xb4>)
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	68ba      	ldr	r2, [r7, #8]
 80063be:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80063c0:	68ba      	ldr	r2, [r7, #8]
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	429a      	cmp	r2, r3
 80063c6:	d209      	bcs.n	80063dc <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80063c8:	4b13      	ldr	r3, [pc, #76]	@ (8006418 <prvAddCurrentTaskToDelayedList+0xc0>)
 80063ca:	681a      	ldr	r2, [r3, #0]
 80063cc:	4b0f      	ldr	r3, [pc, #60]	@ (800640c <prvAddCurrentTaskToDelayedList+0xb4>)
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	3304      	adds	r3, #4
 80063d2:	4619      	mov	r1, r3
 80063d4:	4610      	mov	r0, r2
 80063d6:	f7ff f9e2 	bl	800579e <vListInsert>
}
 80063da:	e010      	b.n	80063fe <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80063dc:	4b0f      	ldr	r3, [pc, #60]	@ (800641c <prvAddCurrentTaskToDelayedList+0xc4>)
 80063de:	681a      	ldr	r2, [r3, #0]
 80063e0:	4b0a      	ldr	r3, [pc, #40]	@ (800640c <prvAddCurrentTaskToDelayedList+0xb4>)
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	3304      	adds	r3, #4
 80063e6:	4619      	mov	r1, r3
 80063e8:	4610      	mov	r0, r2
 80063ea:	f7ff f9d8 	bl	800579e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80063ee:	4b0c      	ldr	r3, [pc, #48]	@ (8006420 <prvAddCurrentTaskToDelayedList+0xc8>)
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	68ba      	ldr	r2, [r7, #8]
 80063f4:	429a      	cmp	r2, r3
 80063f6:	d202      	bcs.n	80063fe <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80063f8:	4a09      	ldr	r2, [pc, #36]	@ (8006420 <prvAddCurrentTaskToDelayedList+0xc8>)
 80063fa:	68bb      	ldr	r3, [r7, #8]
 80063fc:	6013      	str	r3, [r2, #0]
}
 80063fe:	bf00      	nop
 8006400:	3710      	adds	r7, #16
 8006402:	46bd      	mov	sp, r7
 8006404:	bd80      	pop	{r7, pc}
 8006406:	bf00      	nop
 8006408:	24000480 	.word	0x24000480
 800640c:	2400037c 	.word	0x2400037c
 8006410:	24000484 	.word	0x24000484
 8006414:	24000468 	.word	0x24000468
 8006418:	24000438 	.word	0x24000438
 800641c:	24000434 	.word	0x24000434
 8006420:	2400049c 	.word	0x2400049c

08006424 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006424:	b480      	push	{r7}
 8006426:	b085      	sub	sp, #20
 8006428:	af00      	add	r7, sp, #0
 800642a:	60f8      	str	r0, [r7, #12]
 800642c:	60b9      	str	r1, [r7, #8]
 800642e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	3b04      	subs	r3, #4
 8006434:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800643c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	3b04      	subs	r3, #4
 8006442:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006444:	68bb      	ldr	r3, [r7, #8]
 8006446:	f023 0201 	bic.w	r2, r3, #1
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	3b04      	subs	r3, #4
 8006452:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006454:	4a0c      	ldr	r2, [pc, #48]	@ (8006488 <pxPortInitialiseStack+0x64>)
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	3b14      	subs	r3, #20
 800645e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006460:	687a      	ldr	r2, [r7, #4]
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	3b04      	subs	r3, #4
 800646a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	f06f 0202 	mvn.w	r2, #2
 8006472:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	3b20      	subs	r3, #32
 8006478:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800647a:	68fb      	ldr	r3, [r7, #12]
}
 800647c:	4618      	mov	r0, r3
 800647e:	3714      	adds	r7, #20
 8006480:	46bd      	mov	sp, r7
 8006482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006486:	4770      	bx	lr
 8006488:	0800648d 	.word	0x0800648d

0800648c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800648c:	b480      	push	{r7}
 800648e:	b085      	sub	sp, #20
 8006490:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8006492:	2300      	movs	r3, #0
 8006494:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006496:	4b13      	ldr	r3, [pc, #76]	@ (80064e4 <prvTaskExitError+0x58>)
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800649e:	d00b      	beq.n	80064b8 <prvTaskExitError+0x2c>
	__asm volatile
 80064a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80064a4:	f383 8811 	msr	BASEPRI, r3
 80064a8:	f3bf 8f6f 	isb	sy
 80064ac:	f3bf 8f4f 	dsb	sy
 80064b0:	60fb      	str	r3, [r7, #12]
}
 80064b2:	bf00      	nop
 80064b4:	bf00      	nop
 80064b6:	e7fd      	b.n	80064b4 <prvTaskExitError+0x28>
	__asm volatile
 80064b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80064bc:	f383 8811 	msr	BASEPRI, r3
 80064c0:	f3bf 8f6f 	isb	sy
 80064c4:	f3bf 8f4f 	dsb	sy
 80064c8:	60bb      	str	r3, [r7, #8]
}
 80064ca:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80064cc:	bf00      	nop
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d0fc      	beq.n	80064ce <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80064d4:	bf00      	nop
 80064d6:	bf00      	nop
 80064d8:	3714      	adds	r7, #20
 80064da:	46bd      	mov	sp, r7
 80064dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064e0:	4770      	bx	lr
 80064e2:	bf00      	nop
 80064e4:	24000018 	.word	0x24000018
	...

080064f0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80064f0:	4b07      	ldr	r3, [pc, #28]	@ (8006510 <pxCurrentTCBConst2>)
 80064f2:	6819      	ldr	r1, [r3, #0]
 80064f4:	6808      	ldr	r0, [r1, #0]
 80064f6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80064fa:	f380 8809 	msr	PSP, r0
 80064fe:	f3bf 8f6f 	isb	sy
 8006502:	f04f 0000 	mov.w	r0, #0
 8006506:	f380 8811 	msr	BASEPRI, r0
 800650a:	4770      	bx	lr
 800650c:	f3af 8000 	nop.w

08006510 <pxCurrentTCBConst2>:
 8006510:	2400037c 	.word	0x2400037c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006514:	bf00      	nop
 8006516:	bf00      	nop

08006518 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006518:	4808      	ldr	r0, [pc, #32]	@ (800653c <prvPortStartFirstTask+0x24>)
 800651a:	6800      	ldr	r0, [r0, #0]
 800651c:	6800      	ldr	r0, [r0, #0]
 800651e:	f380 8808 	msr	MSP, r0
 8006522:	f04f 0000 	mov.w	r0, #0
 8006526:	f380 8814 	msr	CONTROL, r0
 800652a:	b662      	cpsie	i
 800652c:	b661      	cpsie	f
 800652e:	f3bf 8f4f 	dsb	sy
 8006532:	f3bf 8f6f 	isb	sy
 8006536:	df00      	svc	0
 8006538:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800653a:	bf00      	nop
 800653c:	e000ed08 	.word	0xe000ed08

08006540 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006540:	b580      	push	{r7, lr}
 8006542:	b086      	sub	sp, #24
 8006544:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006546:	4b47      	ldr	r3, [pc, #284]	@ (8006664 <xPortStartScheduler+0x124>)
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	4a47      	ldr	r2, [pc, #284]	@ (8006668 <xPortStartScheduler+0x128>)
 800654c:	4293      	cmp	r3, r2
 800654e:	d10b      	bne.n	8006568 <xPortStartScheduler+0x28>
	__asm volatile
 8006550:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006554:	f383 8811 	msr	BASEPRI, r3
 8006558:	f3bf 8f6f 	isb	sy
 800655c:	f3bf 8f4f 	dsb	sy
 8006560:	613b      	str	r3, [r7, #16]
}
 8006562:	bf00      	nop
 8006564:	bf00      	nop
 8006566:	e7fd      	b.n	8006564 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006568:	4b3e      	ldr	r3, [pc, #248]	@ (8006664 <xPortStartScheduler+0x124>)
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	4a3f      	ldr	r2, [pc, #252]	@ (800666c <xPortStartScheduler+0x12c>)
 800656e:	4293      	cmp	r3, r2
 8006570:	d10b      	bne.n	800658a <xPortStartScheduler+0x4a>
	__asm volatile
 8006572:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006576:	f383 8811 	msr	BASEPRI, r3
 800657a:	f3bf 8f6f 	isb	sy
 800657e:	f3bf 8f4f 	dsb	sy
 8006582:	60fb      	str	r3, [r7, #12]
}
 8006584:	bf00      	nop
 8006586:	bf00      	nop
 8006588:	e7fd      	b.n	8006586 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800658a:	4b39      	ldr	r3, [pc, #228]	@ (8006670 <xPortStartScheduler+0x130>)
 800658c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800658e:	697b      	ldr	r3, [r7, #20]
 8006590:	781b      	ldrb	r3, [r3, #0]
 8006592:	b2db      	uxtb	r3, r3
 8006594:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006596:	697b      	ldr	r3, [r7, #20]
 8006598:	22ff      	movs	r2, #255	@ 0xff
 800659a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800659c:	697b      	ldr	r3, [r7, #20]
 800659e:	781b      	ldrb	r3, [r3, #0]
 80065a0:	b2db      	uxtb	r3, r3
 80065a2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80065a4:	78fb      	ldrb	r3, [r7, #3]
 80065a6:	b2db      	uxtb	r3, r3
 80065a8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80065ac:	b2da      	uxtb	r2, r3
 80065ae:	4b31      	ldr	r3, [pc, #196]	@ (8006674 <xPortStartScheduler+0x134>)
 80065b0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80065b2:	4b31      	ldr	r3, [pc, #196]	@ (8006678 <xPortStartScheduler+0x138>)
 80065b4:	2207      	movs	r2, #7
 80065b6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80065b8:	e009      	b.n	80065ce <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 80065ba:	4b2f      	ldr	r3, [pc, #188]	@ (8006678 <xPortStartScheduler+0x138>)
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	3b01      	subs	r3, #1
 80065c0:	4a2d      	ldr	r2, [pc, #180]	@ (8006678 <xPortStartScheduler+0x138>)
 80065c2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80065c4:	78fb      	ldrb	r3, [r7, #3]
 80065c6:	b2db      	uxtb	r3, r3
 80065c8:	005b      	lsls	r3, r3, #1
 80065ca:	b2db      	uxtb	r3, r3
 80065cc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80065ce:	78fb      	ldrb	r3, [r7, #3]
 80065d0:	b2db      	uxtb	r3, r3
 80065d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80065d6:	2b80      	cmp	r3, #128	@ 0x80
 80065d8:	d0ef      	beq.n	80065ba <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80065da:	4b27      	ldr	r3, [pc, #156]	@ (8006678 <xPortStartScheduler+0x138>)
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	f1c3 0307 	rsb	r3, r3, #7
 80065e2:	2b04      	cmp	r3, #4
 80065e4:	d00b      	beq.n	80065fe <xPortStartScheduler+0xbe>
	__asm volatile
 80065e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80065ea:	f383 8811 	msr	BASEPRI, r3
 80065ee:	f3bf 8f6f 	isb	sy
 80065f2:	f3bf 8f4f 	dsb	sy
 80065f6:	60bb      	str	r3, [r7, #8]
}
 80065f8:	bf00      	nop
 80065fa:	bf00      	nop
 80065fc:	e7fd      	b.n	80065fa <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80065fe:	4b1e      	ldr	r3, [pc, #120]	@ (8006678 <xPortStartScheduler+0x138>)
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	021b      	lsls	r3, r3, #8
 8006604:	4a1c      	ldr	r2, [pc, #112]	@ (8006678 <xPortStartScheduler+0x138>)
 8006606:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006608:	4b1b      	ldr	r3, [pc, #108]	@ (8006678 <xPortStartScheduler+0x138>)
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006610:	4a19      	ldr	r2, [pc, #100]	@ (8006678 <xPortStartScheduler+0x138>)
 8006612:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	b2da      	uxtb	r2, r3
 8006618:	697b      	ldr	r3, [r7, #20]
 800661a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800661c:	4b17      	ldr	r3, [pc, #92]	@ (800667c <xPortStartScheduler+0x13c>)
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	4a16      	ldr	r2, [pc, #88]	@ (800667c <xPortStartScheduler+0x13c>)
 8006622:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8006626:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006628:	4b14      	ldr	r3, [pc, #80]	@ (800667c <xPortStartScheduler+0x13c>)
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	4a13      	ldr	r2, [pc, #76]	@ (800667c <xPortStartScheduler+0x13c>)
 800662e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8006632:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006634:	f000 f8da 	bl	80067ec <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006638:	4b11      	ldr	r3, [pc, #68]	@ (8006680 <xPortStartScheduler+0x140>)
 800663a:	2200      	movs	r2, #0
 800663c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800663e:	f000 f8f9 	bl	8006834 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8006642:	4b10      	ldr	r3, [pc, #64]	@ (8006684 <xPortStartScheduler+0x144>)
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	4a0f      	ldr	r2, [pc, #60]	@ (8006684 <xPortStartScheduler+0x144>)
 8006648:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800664c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800664e:	f7ff ff63 	bl	8006518 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006652:	f7ff fd31 	bl	80060b8 <vTaskSwitchContext>
	prvTaskExitError();
 8006656:	f7ff ff19 	bl	800648c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800665a:	2300      	movs	r3, #0
}
 800665c:	4618      	mov	r0, r3
 800665e:	3718      	adds	r7, #24
 8006660:	46bd      	mov	sp, r7
 8006662:	bd80      	pop	{r7, pc}
 8006664:	e000ed00 	.word	0xe000ed00
 8006668:	410fc271 	.word	0x410fc271
 800666c:	410fc270 	.word	0x410fc270
 8006670:	e000e400 	.word	0xe000e400
 8006674:	240004a8 	.word	0x240004a8
 8006678:	240004ac 	.word	0x240004ac
 800667c:	e000ed20 	.word	0xe000ed20
 8006680:	24000018 	.word	0x24000018
 8006684:	e000ef34 	.word	0xe000ef34

08006688 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006688:	b480      	push	{r7}
 800668a:	b083      	sub	sp, #12
 800668c:	af00      	add	r7, sp, #0
	__asm volatile
 800668e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006692:	f383 8811 	msr	BASEPRI, r3
 8006696:	f3bf 8f6f 	isb	sy
 800669a:	f3bf 8f4f 	dsb	sy
 800669e:	607b      	str	r3, [r7, #4]
}
 80066a0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80066a2:	4b10      	ldr	r3, [pc, #64]	@ (80066e4 <vPortEnterCritical+0x5c>)
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	3301      	adds	r3, #1
 80066a8:	4a0e      	ldr	r2, [pc, #56]	@ (80066e4 <vPortEnterCritical+0x5c>)
 80066aa:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80066ac:	4b0d      	ldr	r3, [pc, #52]	@ (80066e4 <vPortEnterCritical+0x5c>)
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	2b01      	cmp	r3, #1
 80066b2:	d110      	bne.n	80066d6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80066b4:	4b0c      	ldr	r3, [pc, #48]	@ (80066e8 <vPortEnterCritical+0x60>)
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	b2db      	uxtb	r3, r3
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d00b      	beq.n	80066d6 <vPortEnterCritical+0x4e>
	__asm volatile
 80066be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80066c2:	f383 8811 	msr	BASEPRI, r3
 80066c6:	f3bf 8f6f 	isb	sy
 80066ca:	f3bf 8f4f 	dsb	sy
 80066ce:	603b      	str	r3, [r7, #0]
}
 80066d0:	bf00      	nop
 80066d2:	bf00      	nop
 80066d4:	e7fd      	b.n	80066d2 <vPortEnterCritical+0x4a>
	}
}
 80066d6:	bf00      	nop
 80066d8:	370c      	adds	r7, #12
 80066da:	46bd      	mov	sp, r7
 80066dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066e0:	4770      	bx	lr
 80066e2:	bf00      	nop
 80066e4:	24000018 	.word	0x24000018
 80066e8:	e000ed04 	.word	0xe000ed04

080066ec <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80066ec:	b480      	push	{r7}
 80066ee:	b083      	sub	sp, #12
 80066f0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80066f2:	4b12      	ldr	r3, [pc, #72]	@ (800673c <vPortExitCritical+0x50>)
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d10b      	bne.n	8006712 <vPortExitCritical+0x26>
	__asm volatile
 80066fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80066fe:	f383 8811 	msr	BASEPRI, r3
 8006702:	f3bf 8f6f 	isb	sy
 8006706:	f3bf 8f4f 	dsb	sy
 800670a:	607b      	str	r3, [r7, #4]
}
 800670c:	bf00      	nop
 800670e:	bf00      	nop
 8006710:	e7fd      	b.n	800670e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006712:	4b0a      	ldr	r3, [pc, #40]	@ (800673c <vPortExitCritical+0x50>)
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	3b01      	subs	r3, #1
 8006718:	4a08      	ldr	r2, [pc, #32]	@ (800673c <vPortExitCritical+0x50>)
 800671a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800671c:	4b07      	ldr	r3, [pc, #28]	@ (800673c <vPortExitCritical+0x50>)
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	2b00      	cmp	r3, #0
 8006722:	d105      	bne.n	8006730 <vPortExitCritical+0x44>
 8006724:	2300      	movs	r3, #0
 8006726:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006728:	683b      	ldr	r3, [r7, #0]
 800672a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800672e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006730:	bf00      	nop
 8006732:	370c      	adds	r7, #12
 8006734:	46bd      	mov	sp, r7
 8006736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800673a:	4770      	bx	lr
 800673c:	24000018 	.word	0x24000018

08006740 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006740:	f3ef 8009 	mrs	r0, PSP
 8006744:	f3bf 8f6f 	isb	sy
 8006748:	4b15      	ldr	r3, [pc, #84]	@ (80067a0 <pxCurrentTCBConst>)
 800674a:	681a      	ldr	r2, [r3, #0]
 800674c:	f01e 0f10 	tst.w	lr, #16
 8006750:	bf08      	it	eq
 8006752:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006756:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800675a:	6010      	str	r0, [r2, #0]
 800675c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006760:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8006764:	f380 8811 	msr	BASEPRI, r0
 8006768:	f3bf 8f4f 	dsb	sy
 800676c:	f3bf 8f6f 	isb	sy
 8006770:	f7ff fca2 	bl	80060b8 <vTaskSwitchContext>
 8006774:	f04f 0000 	mov.w	r0, #0
 8006778:	f380 8811 	msr	BASEPRI, r0
 800677c:	bc09      	pop	{r0, r3}
 800677e:	6819      	ldr	r1, [r3, #0]
 8006780:	6808      	ldr	r0, [r1, #0]
 8006782:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006786:	f01e 0f10 	tst.w	lr, #16
 800678a:	bf08      	it	eq
 800678c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006790:	f380 8809 	msr	PSP, r0
 8006794:	f3bf 8f6f 	isb	sy
 8006798:	4770      	bx	lr
 800679a:	bf00      	nop
 800679c:	f3af 8000 	nop.w

080067a0 <pxCurrentTCBConst>:
 80067a0:	2400037c 	.word	0x2400037c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80067a4:	bf00      	nop
 80067a6:	bf00      	nop

080067a8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80067a8:	b580      	push	{r7, lr}
 80067aa:	b082      	sub	sp, #8
 80067ac:	af00      	add	r7, sp, #0
	__asm volatile
 80067ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80067b2:	f383 8811 	msr	BASEPRI, r3
 80067b6:	f3bf 8f6f 	isb	sy
 80067ba:	f3bf 8f4f 	dsb	sy
 80067be:	607b      	str	r3, [r7, #4]
}
 80067c0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80067c2:	f7ff fbbf 	bl	8005f44 <xTaskIncrementTick>
 80067c6:	4603      	mov	r3, r0
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d003      	beq.n	80067d4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80067cc:	4b06      	ldr	r3, [pc, #24]	@ (80067e8 <xPortSysTickHandler+0x40>)
 80067ce:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80067d2:	601a      	str	r2, [r3, #0]
 80067d4:	2300      	movs	r3, #0
 80067d6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80067d8:	683b      	ldr	r3, [r7, #0]
 80067da:	f383 8811 	msr	BASEPRI, r3
}
 80067de:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80067e0:	bf00      	nop
 80067e2:	3708      	adds	r7, #8
 80067e4:	46bd      	mov	sp, r7
 80067e6:	bd80      	pop	{r7, pc}
 80067e8:	e000ed04 	.word	0xe000ed04

080067ec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80067ec:	b480      	push	{r7}
 80067ee:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80067f0:	4b0b      	ldr	r3, [pc, #44]	@ (8006820 <vPortSetupTimerInterrupt+0x34>)
 80067f2:	2200      	movs	r2, #0
 80067f4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80067f6:	4b0b      	ldr	r3, [pc, #44]	@ (8006824 <vPortSetupTimerInterrupt+0x38>)
 80067f8:	2200      	movs	r2, #0
 80067fa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80067fc:	4b0a      	ldr	r3, [pc, #40]	@ (8006828 <vPortSetupTimerInterrupt+0x3c>)
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	4a0a      	ldr	r2, [pc, #40]	@ (800682c <vPortSetupTimerInterrupt+0x40>)
 8006802:	fba2 2303 	umull	r2, r3, r2, r3
 8006806:	099b      	lsrs	r3, r3, #6
 8006808:	4a09      	ldr	r2, [pc, #36]	@ (8006830 <vPortSetupTimerInterrupt+0x44>)
 800680a:	3b01      	subs	r3, #1
 800680c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800680e:	4b04      	ldr	r3, [pc, #16]	@ (8006820 <vPortSetupTimerInterrupt+0x34>)
 8006810:	2207      	movs	r2, #7
 8006812:	601a      	str	r2, [r3, #0]
}
 8006814:	bf00      	nop
 8006816:	46bd      	mov	sp, r7
 8006818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800681c:	4770      	bx	lr
 800681e:	bf00      	nop
 8006820:	e000e010 	.word	0xe000e010
 8006824:	e000e018 	.word	0xe000e018
 8006828:	24000008 	.word	0x24000008
 800682c:	10624dd3 	.word	0x10624dd3
 8006830:	e000e014 	.word	0xe000e014

08006834 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006834:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8006844 <vPortEnableVFP+0x10>
 8006838:	6801      	ldr	r1, [r0, #0]
 800683a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800683e:	6001      	str	r1, [r0, #0]
 8006840:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006842:	bf00      	nop
 8006844:	e000ed88 	.word	0xe000ed88

08006848 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006848:	b580      	push	{r7, lr}
 800684a:	b08a      	sub	sp, #40	@ 0x28
 800684c:	af00      	add	r7, sp, #0
 800684e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006850:	2300      	movs	r3, #0
 8006852:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006854:	f7ff faca 	bl	8005dec <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006858:	4b5c      	ldr	r3, [pc, #368]	@ (80069cc <pvPortMalloc+0x184>)
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	2b00      	cmp	r3, #0
 800685e:	d101      	bne.n	8006864 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006860:	f000 f924 	bl	8006aac <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006864:	4b5a      	ldr	r3, [pc, #360]	@ (80069d0 <pvPortMalloc+0x188>)
 8006866:	681a      	ldr	r2, [r3, #0]
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	4013      	ands	r3, r2
 800686c:	2b00      	cmp	r3, #0
 800686e:	f040 8095 	bne.w	800699c <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	2b00      	cmp	r3, #0
 8006876:	d01e      	beq.n	80068b6 <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8006878:	2208      	movs	r2, #8
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	4413      	add	r3, r2
 800687e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	f003 0307 	and.w	r3, r3, #7
 8006886:	2b00      	cmp	r3, #0
 8006888:	d015      	beq.n	80068b6 <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	f023 0307 	bic.w	r3, r3, #7
 8006890:	3308      	adds	r3, #8
 8006892:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	f003 0307 	and.w	r3, r3, #7
 800689a:	2b00      	cmp	r3, #0
 800689c:	d00b      	beq.n	80068b6 <pvPortMalloc+0x6e>
	__asm volatile
 800689e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80068a2:	f383 8811 	msr	BASEPRI, r3
 80068a6:	f3bf 8f6f 	isb	sy
 80068aa:	f3bf 8f4f 	dsb	sy
 80068ae:	617b      	str	r3, [r7, #20]
}
 80068b0:	bf00      	nop
 80068b2:	bf00      	nop
 80068b4:	e7fd      	b.n	80068b2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d06f      	beq.n	800699c <pvPortMalloc+0x154>
 80068bc:	4b45      	ldr	r3, [pc, #276]	@ (80069d4 <pvPortMalloc+0x18c>)
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	687a      	ldr	r2, [r7, #4]
 80068c2:	429a      	cmp	r2, r3
 80068c4:	d86a      	bhi.n	800699c <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80068c6:	4b44      	ldr	r3, [pc, #272]	@ (80069d8 <pvPortMalloc+0x190>)
 80068c8:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80068ca:	4b43      	ldr	r3, [pc, #268]	@ (80069d8 <pvPortMalloc+0x190>)
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80068d0:	e004      	b.n	80068dc <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 80068d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068d4:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80068d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80068dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068de:	685b      	ldr	r3, [r3, #4]
 80068e0:	687a      	ldr	r2, [r7, #4]
 80068e2:	429a      	cmp	r2, r3
 80068e4:	d903      	bls.n	80068ee <pvPortMalloc+0xa6>
 80068e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d1f1      	bne.n	80068d2 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80068ee:	4b37      	ldr	r3, [pc, #220]	@ (80069cc <pvPortMalloc+0x184>)
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80068f4:	429a      	cmp	r2, r3
 80068f6:	d051      	beq.n	800699c <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80068f8:	6a3b      	ldr	r3, [r7, #32]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	2208      	movs	r2, #8
 80068fe:	4413      	add	r3, r2
 8006900:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006902:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006904:	681a      	ldr	r2, [r3, #0]
 8006906:	6a3b      	ldr	r3, [r7, #32]
 8006908:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800690a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800690c:	685a      	ldr	r2, [r3, #4]
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	1ad2      	subs	r2, r2, r3
 8006912:	2308      	movs	r3, #8
 8006914:	005b      	lsls	r3, r3, #1
 8006916:	429a      	cmp	r2, r3
 8006918:	d920      	bls.n	800695c <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800691a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	4413      	add	r3, r2
 8006920:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006922:	69bb      	ldr	r3, [r7, #24]
 8006924:	f003 0307 	and.w	r3, r3, #7
 8006928:	2b00      	cmp	r3, #0
 800692a:	d00b      	beq.n	8006944 <pvPortMalloc+0xfc>
	__asm volatile
 800692c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006930:	f383 8811 	msr	BASEPRI, r3
 8006934:	f3bf 8f6f 	isb	sy
 8006938:	f3bf 8f4f 	dsb	sy
 800693c:	613b      	str	r3, [r7, #16]
}
 800693e:	bf00      	nop
 8006940:	bf00      	nop
 8006942:	e7fd      	b.n	8006940 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006944:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006946:	685a      	ldr	r2, [r3, #4]
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	1ad2      	subs	r2, r2, r3
 800694c:	69bb      	ldr	r3, [r7, #24]
 800694e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006950:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006952:	687a      	ldr	r2, [r7, #4]
 8006954:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006956:	69b8      	ldr	r0, [r7, #24]
 8006958:	f000 f90a 	bl	8006b70 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800695c:	4b1d      	ldr	r3, [pc, #116]	@ (80069d4 <pvPortMalloc+0x18c>)
 800695e:	681a      	ldr	r2, [r3, #0]
 8006960:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006962:	685b      	ldr	r3, [r3, #4]
 8006964:	1ad3      	subs	r3, r2, r3
 8006966:	4a1b      	ldr	r2, [pc, #108]	@ (80069d4 <pvPortMalloc+0x18c>)
 8006968:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800696a:	4b1a      	ldr	r3, [pc, #104]	@ (80069d4 <pvPortMalloc+0x18c>)
 800696c:	681a      	ldr	r2, [r3, #0]
 800696e:	4b1b      	ldr	r3, [pc, #108]	@ (80069dc <pvPortMalloc+0x194>)
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	429a      	cmp	r2, r3
 8006974:	d203      	bcs.n	800697e <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006976:	4b17      	ldr	r3, [pc, #92]	@ (80069d4 <pvPortMalloc+0x18c>)
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	4a18      	ldr	r2, [pc, #96]	@ (80069dc <pvPortMalloc+0x194>)
 800697c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800697e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006980:	685a      	ldr	r2, [r3, #4]
 8006982:	4b13      	ldr	r3, [pc, #76]	@ (80069d0 <pvPortMalloc+0x188>)
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	431a      	orrs	r2, r3
 8006988:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800698a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800698c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800698e:	2200      	movs	r2, #0
 8006990:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8006992:	4b13      	ldr	r3, [pc, #76]	@ (80069e0 <pvPortMalloc+0x198>)
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	3301      	adds	r3, #1
 8006998:	4a11      	ldr	r2, [pc, #68]	@ (80069e0 <pvPortMalloc+0x198>)
 800699a:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800699c:	f7ff fa34 	bl	8005e08 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80069a0:	69fb      	ldr	r3, [r7, #28]
 80069a2:	f003 0307 	and.w	r3, r3, #7
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d00b      	beq.n	80069c2 <pvPortMalloc+0x17a>
	__asm volatile
 80069aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80069ae:	f383 8811 	msr	BASEPRI, r3
 80069b2:	f3bf 8f6f 	isb	sy
 80069b6:	f3bf 8f4f 	dsb	sy
 80069ba:	60fb      	str	r3, [r7, #12]
}
 80069bc:	bf00      	nop
 80069be:	bf00      	nop
 80069c0:	e7fd      	b.n	80069be <pvPortMalloc+0x176>
	return pvReturn;
 80069c2:	69fb      	ldr	r3, [r7, #28]
}
 80069c4:	4618      	mov	r0, r3
 80069c6:	3728      	adds	r7, #40	@ 0x28
 80069c8:	46bd      	mov	sp, r7
 80069ca:	bd80      	pop	{r7, pc}
 80069cc:	240040b8 	.word	0x240040b8
 80069d0:	240040cc 	.word	0x240040cc
 80069d4:	240040bc 	.word	0x240040bc
 80069d8:	240040b0 	.word	0x240040b0
 80069dc:	240040c0 	.word	0x240040c0
 80069e0:	240040c4 	.word	0x240040c4

080069e4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80069e4:	b580      	push	{r7, lr}
 80069e6:	b086      	sub	sp, #24
 80069e8:	af00      	add	r7, sp, #0
 80069ea:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d04f      	beq.n	8006a96 <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80069f6:	2308      	movs	r3, #8
 80069f8:	425b      	negs	r3, r3
 80069fa:	697a      	ldr	r2, [r7, #20]
 80069fc:	4413      	add	r3, r2
 80069fe:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006a00:	697b      	ldr	r3, [r7, #20]
 8006a02:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006a04:	693b      	ldr	r3, [r7, #16]
 8006a06:	685a      	ldr	r2, [r3, #4]
 8006a08:	4b25      	ldr	r3, [pc, #148]	@ (8006aa0 <vPortFree+0xbc>)
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	4013      	ands	r3, r2
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d10b      	bne.n	8006a2a <vPortFree+0x46>
	__asm volatile
 8006a12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a16:	f383 8811 	msr	BASEPRI, r3
 8006a1a:	f3bf 8f6f 	isb	sy
 8006a1e:	f3bf 8f4f 	dsb	sy
 8006a22:	60fb      	str	r3, [r7, #12]
}
 8006a24:	bf00      	nop
 8006a26:	bf00      	nop
 8006a28:	e7fd      	b.n	8006a26 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006a2a:	693b      	ldr	r3, [r7, #16]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d00b      	beq.n	8006a4a <vPortFree+0x66>
	__asm volatile
 8006a32:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a36:	f383 8811 	msr	BASEPRI, r3
 8006a3a:	f3bf 8f6f 	isb	sy
 8006a3e:	f3bf 8f4f 	dsb	sy
 8006a42:	60bb      	str	r3, [r7, #8]
}
 8006a44:	bf00      	nop
 8006a46:	bf00      	nop
 8006a48:	e7fd      	b.n	8006a46 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006a4a:	693b      	ldr	r3, [r7, #16]
 8006a4c:	685a      	ldr	r2, [r3, #4]
 8006a4e:	4b14      	ldr	r3, [pc, #80]	@ (8006aa0 <vPortFree+0xbc>)
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	4013      	ands	r3, r2
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d01e      	beq.n	8006a96 <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006a58:	693b      	ldr	r3, [r7, #16]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d11a      	bne.n	8006a96 <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006a60:	693b      	ldr	r3, [r7, #16]
 8006a62:	685a      	ldr	r2, [r3, #4]
 8006a64:	4b0e      	ldr	r3, [pc, #56]	@ (8006aa0 <vPortFree+0xbc>)
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	43db      	mvns	r3, r3
 8006a6a:	401a      	ands	r2, r3
 8006a6c:	693b      	ldr	r3, [r7, #16]
 8006a6e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006a70:	f7ff f9bc 	bl	8005dec <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006a74:	693b      	ldr	r3, [r7, #16]
 8006a76:	685a      	ldr	r2, [r3, #4]
 8006a78:	4b0a      	ldr	r3, [pc, #40]	@ (8006aa4 <vPortFree+0xc0>)
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	4413      	add	r3, r2
 8006a7e:	4a09      	ldr	r2, [pc, #36]	@ (8006aa4 <vPortFree+0xc0>)
 8006a80:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006a82:	6938      	ldr	r0, [r7, #16]
 8006a84:	f000 f874 	bl	8006b70 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8006a88:	4b07      	ldr	r3, [pc, #28]	@ (8006aa8 <vPortFree+0xc4>)
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	3301      	adds	r3, #1
 8006a8e:	4a06      	ldr	r2, [pc, #24]	@ (8006aa8 <vPortFree+0xc4>)
 8006a90:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8006a92:	f7ff f9b9 	bl	8005e08 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006a96:	bf00      	nop
 8006a98:	3718      	adds	r7, #24
 8006a9a:	46bd      	mov	sp, r7
 8006a9c:	bd80      	pop	{r7, pc}
 8006a9e:	bf00      	nop
 8006aa0:	240040cc 	.word	0x240040cc
 8006aa4:	240040bc 	.word	0x240040bc
 8006aa8:	240040c8 	.word	0x240040c8

08006aac <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006aac:	b480      	push	{r7}
 8006aae:	b085      	sub	sp, #20
 8006ab0:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006ab2:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8006ab6:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006ab8:	4b27      	ldr	r3, [pc, #156]	@ (8006b58 <prvHeapInit+0xac>)
 8006aba:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	f003 0307 	and.w	r3, r3, #7
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d00c      	beq.n	8006ae0 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	3307      	adds	r3, #7
 8006aca:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	f023 0307 	bic.w	r3, r3, #7
 8006ad2:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006ad4:	68ba      	ldr	r2, [r7, #8]
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	1ad3      	subs	r3, r2, r3
 8006ada:	4a1f      	ldr	r2, [pc, #124]	@ (8006b58 <prvHeapInit+0xac>)
 8006adc:	4413      	add	r3, r2
 8006ade:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006ae4:	4a1d      	ldr	r2, [pc, #116]	@ (8006b5c <prvHeapInit+0xb0>)
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006aea:	4b1c      	ldr	r3, [pc, #112]	@ (8006b5c <prvHeapInit+0xb0>)
 8006aec:	2200      	movs	r2, #0
 8006aee:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	68ba      	ldr	r2, [r7, #8]
 8006af4:	4413      	add	r3, r2
 8006af6:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006af8:	2208      	movs	r2, #8
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	1a9b      	subs	r3, r3, r2
 8006afe:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	f023 0307 	bic.w	r3, r3, #7
 8006b06:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	4a15      	ldr	r2, [pc, #84]	@ (8006b60 <prvHeapInit+0xb4>)
 8006b0c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006b0e:	4b14      	ldr	r3, [pc, #80]	@ (8006b60 <prvHeapInit+0xb4>)
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	2200      	movs	r2, #0
 8006b14:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006b16:	4b12      	ldr	r3, [pc, #72]	@ (8006b60 <prvHeapInit+0xb4>)
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	2200      	movs	r2, #0
 8006b1c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006b22:	683b      	ldr	r3, [r7, #0]
 8006b24:	68fa      	ldr	r2, [r7, #12]
 8006b26:	1ad2      	subs	r2, r2, r3
 8006b28:	683b      	ldr	r3, [r7, #0]
 8006b2a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006b2c:	4b0c      	ldr	r3, [pc, #48]	@ (8006b60 <prvHeapInit+0xb4>)
 8006b2e:	681a      	ldr	r2, [r3, #0]
 8006b30:	683b      	ldr	r3, [r7, #0]
 8006b32:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006b34:	683b      	ldr	r3, [r7, #0]
 8006b36:	685b      	ldr	r3, [r3, #4]
 8006b38:	4a0a      	ldr	r2, [pc, #40]	@ (8006b64 <prvHeapInit+0xb8>)
 8006b3a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006b3c:	683b      	ldr	r3, [r7, #0]
 8006b3e:	685b      	ldr	r3, [r3, #4]
 8006b40:	4a09      	ldr	r2, [pc, #36]	@ (8006b68 <prvHeapInit+0xbc>)
 8006b42:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006b44:	4b09      	ldr	r3, [pc, #36]	@ (8006b6c <prvHeapInit+0xc0>)
 8006b46:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8006b4a:	601a      	str	r2, [r3, #0]
}
 8006b4c:	bf00      	nop
 8006b4e:	3714      	adds	r7, #20
 8006b50:	46bd      	mov	sp, r7
 8006b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b56:	4770      	bx	lr
 8006b58:	240004b0 	.word	0x240004b0
 8006b5c:	240040b0 	.word	0x240040b0
 8006b60:	240040b8 	.word	0x240040b8
 8006b64:	240040c0 	.word	0x240040c0
 8006b68:	240040bc 	.word	0x240040bc
 8006b6c:	240040cc 	.word	0x240040cc

08006b70 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006b70:	b480      	push	{r7}
 8006b72:	b085      	sub	sp, #20
 8006b74:	af00      	add	r7, sp, #0
 8006b76:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006b78:	4b28      	ldr	r3, [pc, #160]	@ (8006c1c <prvInsertBlockIntoFreeList+0xac>)
 8006b7a:	60fb      	str	r3, [r7, #12]
 8006b7c:	e002      	b.n	8006b84 <prvInsertBlockIntoFreeList+0x14>
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	60fb      	str	r3, [r7, #12]
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	687a      	ldr	r2, [r7, #4]
 8006b8a:	429a      	cmp	r2, r3
 8006b8c:	d8f7      	bhi.n	8006b7e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	685b      	ldr	r3, [r3, #4]
 8006b96:	68ba      	ldr	r2, [r7, #8]
 8006b98:	4413      	add	r3, r2
 8006b9a:	687a      	ldr	r2, [r7, #4]
 8006b9c:	429a      	cmp	r2, r3
 8006b9e:	d108      	bne.n	8006bb2 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	685a      	ldr	r2, [r3, #4]
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	685b      	ldr	r3, [r3, #4]
 8006ba8:	441a      	add	r2, r3
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	685b      	ldr	r3, [r3, #4]
 8006bba:	68ba      	ldr	r2, [r7, #8]
 8006bbc:	441a      	add	r2, r3
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	429a      	cmp	r2, r3
 8006bc4:	d118      	bne.n	8006bf8 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	681a      	ldr	r2, [r3, #0]
 8006bca:	4b15      	ldr	r3, [pc, #84]	@ (8006c20 <prvInsertBlockIntoFreeList+0xb0>)
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	429a      	cmp	r2, r3
 8006bd0:	d00d      	beq.n	8006bee <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	685a      	ldr	r2, [r3, #4]
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	685b      	ldr	r3, [r3, #4]
 8006bdc:	441a      	add	r2, r3
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	681a      	ldr	r2, [r3, #0]
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	601a      	str	r2, [r3, #0]
 8006bec:	e008      	b.n	8006c00 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006bee:	4b0c      	ldr	r3, [pc, #48]	@ (8006c20 <prvInsertBlockIntoFreeList+0xb0>)
 8006bf0:	681a      	ldr	r2, [r3, #0]
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	601a      	str	r2, [r3, #0]
 8006bf6:	e003      	b.n	8006c00 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	681a      	ldr	r2, [r3, #0]
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006c00:	68fa      	ldr	r2, [r7, #12]
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	429a      	cmp	r2, r3
 8006c06:	d002      	beq.n	8006c0e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	687a      	ldr	r2, [r7, #4]
 8006c0c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006c0e:	bf00      	nop
 8006c10:	3714      	adds	r7, #20
 8006c12:	46bd      	mov	sp, r7
 8006c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c18:	4770      	bx	lr
 8006c1a:	bf00      	nop
 8006c1c:	240040b0 	.word	0x240040b0
 8006c20:	240040b8 	.word	0x240040b8

08006c24 <memset>:
 8006c24:	4402      	add	r2, r0
 8006c26:	4603      	mov	r3, r0
 8006c28:	4293      	cmp	r3, r2
 8006c2a:	d100      	bne.n	8006c2e <memset+0xa>
 8006c2c:	4770      	bx	lr
 8006c2e:	f803 1b01 	strb.w	r1, [r3], #1
 8006c32:	e7f9      	b.n	8006c28 <memset+0x4>

08006c34 <__libc_init_array>:
 8006c34:	b570      	push	{r4, r5, r6, lr}
 8006c36:	4d0d      	ldr	r5, [pc, #52]	@ (8006c6c <__libc_init_array+0x38>)
 8006c38:	4c0d      	ldr	r4, [pc, #52]	@ (8006c70 <__libc_init_array+0x3c>)
 8006c3a:	1b64      	subs	r4, r4, r5
 8006c3c:	10a4      	asrs	r4, r4, #2
 8006c3e:	2600      	movs	r6, #0
 8006c40:	42a6      	cmp	r6, r4
 8006c42:	d109      	bne.n	8006c58 <__libc_init_array+0x24>
 8006c44:	4d0b      	ldr	r5, [pc, #44]	@ (8006c74 <__libc_init_array+0x40>)
 8006c46:	4c0c      	ldr	r4, [pc, #48]	@ (8006c78 <__libc_init_array+0x44>)
 8006c48:	f000 f818 	bl	8006c7c <_init>
 8006c4c:	1b64      	subs	r4, r4, r5
 8006c4e:	10a4      	asrs	r4, r4, #2
 8006c50:	2600      	movs	r6, #0
 8006c52:	42a6      	cmp	r6, r4
 8006c54:	d105      	bne.n	8006c62 <__libc_init_array+0x2e>
 8006c56:	bd70      	pop	{r4, r5, r6, pc}
 8006c58:	f855 3b04 	ldr.w	r3, [r5], #4
 8006c5c:	4798      	blx	r3
 8006c5e:	3601      	adds	r6, #1
 8006c60:	e7ee      	b.n	8006c40 <__libc_init_array+0xc>
 8006c62:	f855 3b04 	ldr.w	r3, [r5], #4
 8006c66:	4798      	blx	r3
 8006c68:	3601      	adds	r6, #1
 8006c6a:	e7f2      	b.n	8006c52 <__libc_init_array+0x1e>
 8006c6c:	080074c4 	.word	0x080074c4
 8006c70:	080074c4 	.word	0x080074c4
 8006c74:	080074c4 	.word	0x080074c4
 8006c78:	080074c8 	.word	0x080074c8

08006c7c <_init>:
 8006c7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c7e:	bf00      	nop
 8006c80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006c82:	bc08      	pop	{r3}
 8006c84:	469e      	mov	lr, r3
 8006c86:	4770      	bx	lr

08006c88 <_fini>:
 8006c88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c8a:	bf00      	nop
 8006c8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006c8e:	bc08      	pop	{r3}
 8006c90:	469e      	mov	lr, r3
 8006c92:	4770      	bx	lr
